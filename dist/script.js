/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/CanvasManager.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>o,backgroundCanvasCtx:()=>c,clearCanvas:()=>u,foregroundCanvas:()=>r,foregroundCanvasCtx:()=>s,updateCanvasSize:()=>d});var i=n("./src/script.ts"),r=document.getElementById("foreground-canvas"),o=document.getElementById("background-canvas"),a=document.getElementById("webgl-canvas");r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,a.width=a.getBoundingClientRect().width,a.height=a.getBoundingClientRect().height;var s=r.getContext("2d"),c=o.getContext("2d");function u(){s.clearRect(0,0,r.width,r.height)}function d(){r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,a.width=a.getBoundingClientRect().width,a.height=a.getBoundingClientRect().height,i.grid.canvas=o,i.grid.updateSize(),i.grid.draw()}window.addEventListener("resize",d)},"./src/Config.ts":(t,e,n)=>{n.r(e),n.d(e,{getFieldSize:()=>p,getFieldStrength:()=>g,getGravityDirection:()=>h,getGridSize:()=>m,getParticleNumber:()=>v,getPhysicsSubstepsAmount:()=>f,getPointerFunction:()=>y,isGyroEnabled:()=>x,setFieldSize:()=>P,setFieldStrength:()=>b,setGravityDirection:()=>C,setIsGyroEnabled:()=>M,setParticleNumber:()=>S,setPhysicsSubstepsAmount:()=>w,setPointerFunction:()=>E});var i=n("./src/Vec2D.ts"),r=10,o=4,a=new i.default(0,1.2),s=250,c=400,u="field",d=26,l=!1;function h(){return a}function f(){return o}function g(){return r}function p(){return s}function v(){return c}function y(){return u}function m(){return d}function x(){return l}function C(t){a=t}function w(t){o=t}function b(t){r=t}function P(t){s=t}function S(t){c=t}function E(t){u=t}function M(t){l=t}},"./src/Grid.ts":(t,e,n)=>{n.r(e),n.d(e,{Grid:()=>r});var i=n("./src/Config.ts"),r=function(){function t(t,e){void 0===e&&(e=i.getGridSize()),this.pixelSize=e,this.canvas=t,this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.cells=this.initialize(),this.canvasCtx=this.canvas.getContext("2d")}return t.prototype.initialize=function(){for(var t=[],e=0;e<this.columns;e++){t[e]=[];for(var n=0;n<this.rows;n++)t[e][n]=[]}return this.cells=t,t},t.prototype.removeAll=function(){for(var t=0;t<this.columns;t++)for(var e=0;e<this.rows&&null!=this.cells[t];e++)this.cells[t][e]=[]},t.prototype.put=function(t){var e=Math.floor(t.position.x/this.pixelSize),n=Math.floor(t.position.y/this.pixelSize);e>=0&&e<this.cells.length&&n>=0&&n<this.cells[e].length&&this.cells[e][n].push(t)},t.prototype.updateSize=function(){this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.initialize()},t.prototype.draw=function(){this.canvasCtx.clearRect(0,0,this.canvas.width,this.canvas.height),this.canvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),this.canvasCtx.lineWidth=1;for(var t=this.pixelSize;t<this.canvas.width;t+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(t,0),this.canvasCtx.lineTo(t,this.canvas.height),this.canvasCtx.stroke();for(var e=this.pixelSize;e<this.canvas.height;e+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(0,e),this.canvasCtx.lineTo(this.canvas.width,e),this.canvasCtx.stroke()},t}()},"./src/InputHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{InputHandler:()=>u});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/MenuManager.ts"),a=n("./src/script.ts"),s=n("./src/Utils.ts"),c=n("./src/Particle.ts"),u=function(){function t(){this.clicked=!1,this.pointerPosition=new i.default(0,0),this.clickStartPosition=new i.default(0,0),this.pointerFunction="field"}return t.getInstance=function(){return t.instance||(t.instance=new t,t.instance.initializeEventListeners()),t.instance},t.prototype.initializeEventListeners=function(){var t=document.getElementById("background");t&&(t.addEventListener("mousedown",this.handleMouseDown.bind(this)),t.addEventListener("mouseup",this.handleMouseUp.bind(this)),t.addEventListener("mousemove",this.handleMoveEvent.bind(this)),t.addEventListener("touchstart",this.handleMouseDown.bind(this)),t.addEventListener("touchend",this.handleMouseUp.bind(this)),t.addEventListener("touchmove",this.handleMoveEvent.bind(this)),t.addEventListener("click",(function(t){t.stopPropagation(),(0,o.closeMenu)()})))},t.prototype.handleMouseDown=function(t){t.stopPropagation(),this.clicked=!0,t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY),this.clickStartPosition.x=this.pointerPosition.x,this.clickStartPosition.y=this.pointerPosition.y},t.prototype.handleMouseUp=function(t){if(t.stopPropagation(),this.clicked=!1,"throw"==r.getPointerFunction()){var e=this.clickStartPosition.clone().difference(this.pointerPosition).multiply(.1);a.particles.push(new c.default(this.clickStartPosition.clone(),r.getGridSize()/2,e,(0,s.getRandomColor)(),a.grid))}},t.prototype.handleMoveEvent=function(t){t.stopPropagation(),this.clicked&&(t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY))},t}()},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>u,openMenu:()=>c,setGravityStrength:()=>x,updatePointerFunction:()=>m});var i=n("./src/Config.ts"),r=n("./src/Vec2D.ts"),o=n("./src/script.ts"),a=document.getElementById("menu-button"),s=document.querySelectorAll(".menu-element");function c(){"false"==a.getAttribute("open")&&(a.setAttribute("open","true"),a.style.cursor="auto",a.querySelector("#menu-back-button").style.transform="rotate(180deg)",s.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){a.setAttribute("open","false"),a.style.cursor="pointer",a.querySelector("#menu-back-button").style.transform="rotate(0deg)",s.forEach((function(t){t.style.display="none"}))}a.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),o.grid.draw()}));var d=document.getElementById("field-size-slider"),l=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),g=document.getElementById("particles-amount-entry"),p=document.getElementById("gyro-toggle");function v(){p.checked?(i.setIsGyroEnabled(!0),window.addEventListener("devicemotion",y,!0)):(window.removeEventListener("devicemotion",y),i.setIsGyroEnabled(!1),i.setGravityDirection(new r.default(0,1.3)))}function y(t){i.isGyroEnabled()?i.setGravityDirection(new r.default(-t.accelerationIncludingGravity.x/5,t.accelerationIncludingGravity.y/5)):i.setGravityDirection(new r.default(0,1.2))}function m(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}function x(t){i.setGravityDirection(new r.default(0,.1*t))}document.getElementsByName("cursor-function").forEach((function(t){t.addEventListener("change",(function(){t.checked&&i.setPointerFunction(t.value)}))})),d.oninput=function(){i.setFieldSize(parseInt(d.value))},l.oninput=function(){i.setFieldStrength(parseInt(l.value))},h.oninput=function(){x(parseInt(h.value))},f.addEventListener("change",(function(){i.setPhysicsSubstepsAmount(parseInt(f.value))})),p.oninput=function(){"undefined"!=typeof DeviceMotionEvent&&"function"==typeof DeviceMotionEvent.requestPermission?DeviceMotionEvent.requestPermission().then((function(t){"granted"==t&&v()})).catch(console.error):v()},g.addEventListener("change",(function(){i.setParticleNumber(parseInt(g.value));for(var t=o.particles.length-i.getParticleNumber();t>0;)o.particles.pop(),t--}))},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./src/Vec2D.ts");const r=function(){function t(t,e,n,r,o){this.position=t,this.velocity=n,this.acceleration=new i.default(0,0),this.radius=e,this.color=r,this.grid=o,this.cell=new i.default(Math.floor(this.position.x/o.pixelSize),Math.floor(this.position.y/o.pixelSize))}return t.prototype.updatePosition=function(t){var e=this.velocity.add(this.acceleration.multiply(t)).clone();e.multiply(t),this.position.add(e),this.acceleration.x=0,this.acceleration.y=0,this.updateCell()},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.getNeighboringParticles=function(){for(var t=[],e=this.cell.x-1;e<=this.cell.x+1;e++)for(var n=this.cell.y-1;n<=this.cell.y+1;n++)e>=0&&e<this.grid.columns&&n>=0&&n<this.grid.rows&&t.push.apply(t,this.grid.cells[e][n]);return t},t.prototype.updateCell=function(){this.cell=new i.default(Math.floor(this.position.x/this.grid.pixelSize),Math.floor(this.position.y/this.grid.pixelSize))},t.canvas=document.getElementById("foreground-canvas"),t}()},"./src/PhysicsEngine.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>y,applyAttractorForcesToAll:()=>g,applyConstraint:()=>v,tick:()=>p});var i=n("./src/CanvasManager.ts"),r=n("./src/Config.ts"),o=n("./src/InputHandler.ts"),a=n("./src/Vec2D.ts"),s=n("./src/script.ts"),c=o.InputHandler.getInstance(),u=0,d=0;function l(t){s.grid.removeAll(),s.particles.forEach((function(e){e.updatePosition(t),s.grid.put(e)}))}function h(t){s.particles.forEach((function(e){e.position.add(t)}))}function f(t){s.particles.forEach((function(e){var n=t.difference(e.position),i=n.length();i<r.getFieldSize()&&i>10&&(n.multiply(100*r.getFieldStrength()),n.divide(i*i),e.accelerate(n))}))}function g(){s.particles.forEach((function(t){y(t)}))}function p(t){for(var e=t/r.getPhysicsSubstepsAmount(),n=0;n<r.getPhysicsSubstepsAmount();n++){if(0!=r.getGravityDirection().y&&s.particles.forEach((function(t){t.accelerate(r.getGravityDirection())})),c.clicked)switch(r.getPointerFunction()){case"field":f(c.pointerPosition);break;case"gravity":r.setGravityDirection(c.pointerPosition.difference(c.clickStartPosition).divide(400))}var i=window.screenX-u,o=window.screenY-d,g=new a.default(-i,-o);0==i&&0==o||h(g),u=window.screenX,d=window.screenY,s.particles.forEach((function(t){v(t)})),m(),l(e)}}function v(t){t.position.y+t.radius>=i.foregroundCanvas.height&&(t.velocity=new a.default(.992*t.velocity.x,-Math.abs(.6*t.velocity.y)),t.position.y=i.foregroundCanvas.height-t.radius),t.position.y-t.radius<=0&&(t.position.y=t.radius,t.velocity=new a.default(t.velocity.x,Math.abs(.6*t.velocity.y))),t.position.x-t.radius<=0&&(t.position.x=t.radius,t.velocity=new a.default(Math.abs(.6*t.velocity.x),t.velocity.y)),t.position.x+t.radius>=i.foregroundCanvas.width&&(t.velocity=new a.default(-Math.abs(.6*t.velocity.x),t.velocity.y),t.position.x=i.foregroundCanvas.width-t.radius)}function y(t){s.attractors.forEach((function(e){var n=e.position.difference(t.position),i=n.length();i<e.radius&&i>10&&(n.multiply(e.force),n.divide(i*i),t.accelerate(n))}))}function m(){var t=new a.default(0,0),e=0,n=0;s.particles.forEach((function(i){i.getNeighboringParticles().forEach((function(r){if(i!==r&&(t.set(i.position).subtract(r.position),e=t.squaredLength(),n=i.radius+r.radius,e<n*n&&0!=e)){var o=Math.sqrt(e);t.divide(o);var s=n-o;t.multiply(.5*s),i.position.add(t),r.position.subtract(t),t.multiply(6),i.velocity.add(t).add(new a.default((1-2*Math.random())/1e3,(1-2*Math.random())/1e3)),r.velocity.subtract(t).add(new a.default((1-2*Math.random())/1e3,(1-2*Math.random())/1e3))}}))}))}new a.default(0,0)},"./src/Renderer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>F,drawCursorFunction:()=>R,drawDot:()=>z,drawDottedLine:()=>k,drawLasso:()=>A,drawParticles:()=>_,drawPredictedPath:()=>I,setGeometry:()=>M});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/shaders/particleFragmentShader.frag"),a=n("./src/shaders/particleVertexShader.vert"),s=n("./src/ShaderHelper.ts"),c=n("./src/CanvasManager.ts"),u=n("./src/PhysicsEngine.ts"),d=n("./src/InputHandler.ts"),l=n("./src/script.ts"),h=n("./src/Particle.ts"),f=document.getElementById("webgl-canvas"),g=f.getContext("webgl");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height;var p=d.InputHandler.getInstance();g||console.error("Unable to initialize WebGL. Your browser may not support it."),g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);var v=(0,s.createShader)(g,g.VERTEX_SHADER,a),y=(0,s.createShader)(g,g.FRAGMENT_SHADER,o),m=(0,s.createProgram)(g,v,y),x=g.getAttribLocation(m,"a_position"),C=g.getUniformLocation(m,"u_resolution"),w=g.getUniformLocation(m,"u_color"),b=g.getUniformLocation(m,"u_translation"),P=g.getUniformLocation(m,"u_radius"),S=g.getUniformLocation(m,"u_outline_black"),E=g.createBuffer();function M(){l.particles.forEach((function(t){!function(t,e,n,i,r){var o=0-i/2,a=0+i/2,s=0-r/2,c=0+r/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([o,s,a,s,o,c,o,c,a,s,a,c]),t.STATIC_DRAW)}(g,0,0,r.getGridSize(),r.getGridSize())}))}function _(){(0,s.resizeCanvasToDisplaySize)(g.canvas),g.viewport(0,0,g.canvas.width,g.canvas.height),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT),g.useProgram(m),g.enableVertexAttribArray(x),g.bindBuffer(g.ARRAY_BUFFER,E),g.vertexAttribPointer(x,2,g.FLOAT,!1,0,0);var t=parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--is-outline-dark")),e=[g.canvas.width,g.canvas.height];l.particles.forEach((function(n){g.uniform2fv(C,e),g.uniform2f(b,n.position.x,n.position.y),g.uniform3f(w,n.color.r,n.color.g,n.color.b),g.uniform1f(P,n.radius),g.uniform1f(S,t),g.drawArrays(g.TRIANGLES,0,6)}))}function k(t,e,n,r){if(void 0===n&&(n=5),void 0===r&&(r=8),p.clicked&&t.x!=e.x&&t.y!=e.y){var o=t.difference(e);I(t.clone(),o.clone().multiply(.1)),o.divide(r);var a=Math.atan2(e.y-t.y,e.x-t.x),s=new i.default(e.x,e.y);s.x-=Math.cos(a),s.y-=Math.sin(a);for(var c=0;c<=r;c++)z(t.x-o.x*c,t.y-o.y*c,n,255)}}function I(t,e){for(var n=new h.default(t,r.getGridSize()/2,e,{r:0,g:0,b:0},l.grid),i=1;i<=127;i++)n.accelerate(r.getGravityDirection()),(0,u.applyConstraint)(n),(0,u.applyAttractorForces)(n),n.updatePosition(.5),i%3==0&&z(n.position.x,n.position.y,5,255-2*i)}function z(t,e,n,i){c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),c.foregroundCanvasCtx.fillStyle="rgba(210, 210, 210, ".concat(i/255,")"),c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}function A(t){void 0===t&&(t=3),p.clicked&&(c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(p.pointerPosition.x,p.pointerPosition.y,r.getFieldSize(),0,2*Math.PI),c.foregroundCanvasCtx.lineWidth=t,c.foregroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.closePath())}function F(t,e){if(p.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),r=10,o=new i.default(e.x,e.y);o.x-=11.5*Math.cos(n),o.y-=11.5*Math.sin(n),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(t.x,t.y),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n+Math.PI/7),o.y-r*Math.sin(n+Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.fillStyle="#bbbbbb",c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}}function R(){if(p.clicked)switch(r.getPointerFunction()){case"field":A();break;case"gravity":F(p.clickStartPosition,p.pointerPosition);break;case"throw":k(p.clickStartPosition,p.pointerPosition)}}g.bindBuffer(g.ARRAY_BUFFER,E)},"./src/ShaderHelper.ts":(t,e,n)=>{function i(t,e,n){var i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;console.log(t.getShaderInfoLog(i)),t.deleteShader(i)}function r(t,e,n){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS))return i;console.log(t.getProgramInfoLog(i)),t.deleteProgram(i)}function o(t){var e=t.clientWidth,n=t.clientHeight,i=t.width!==e||t.height!==n;return i&&(t.width=e,t.height=n),i}n.r(e),n.d(e,{createProgram:()=>r,createShader:()=>i,resizeCanvasToDisplaySize:()=>o})},"./src/UIManager.ts":(t,e,n)=>{n.r(e),n.d(e,{fps:()=>r,frameTimes:()=>o,getAverageFrameTime:()=>u,updateUI:()=>c});var i=document.createElement("div");i.style.position="absolute",i.style.top="10px",i.style.left="10px",document.body.appendChild(i);var r=60,o=[],a=100,s=performance.now();function c(){var t=function(){var t=performance.now(),e=t-s;o.push(e),o.length>a&&o.shift();var n=o.reduce((function(t,e){return t+e}),0)/o.length;return s=t,1e3/n}();i.innerText="FPS: ".concat(Math.round(t))}function u(){return o.reduce((function(t,e){return t+e}),0)/o.length}},"./src/Utils.ts":(t,e,n)=>{function i(){return{r:Math.random(),g:Math.random(),b:Math.random()}}n.r(e),n.d(e,{getRandomColor:()=>i})},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this},t.prototype.divide=function(t){return this.x/=t,this.y/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t.prototype.squaredDistanceTo=function(t){return Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{attractors:()=>f,grid:()=>p,particles:()=>h});var i=n("./src/Renderer.ts"),r=n("./src/Particle.ts"),o=n("./src/Vec2D.ts"),a=n("./src/UIManager.ts"),s=n("./src/CanvasManager.ts"),c=n("./src/PhysicsEngine.ts"),u=n("./src/Config.ts"),d=n("./src/Grid.ts"),l=n("./src/Utils.ts"),h=[],f=[],g=0,p=new d.Grid(s.backgroundCanvas);p.draw(),requestAnimationFrame((function t(){var e=(0,a.getAverageFrameTime)();(0,c.tick)(e/20),(0,s.clearCanvas)(),(0,i.drawParticles)(),(0,i.drawCursorFunction)(),(0,a.updateUI)(),g%3==0&&h.length<u.getParticleNumber()&&g>120&&(h.push(new r.default(new o.default(200,200),p.pixelSize/2,new o.default(27,-12),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,260),p.pixelSize/2,new o.default(29,-12),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,320),p.pixelSize/2,new o.default(24,-12),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,380),p.pixelSize/2,new o.default(25,-12),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,440),p.pixelSize/2,new o.default(24,-12),(0,l.getRandomColor)(),p)),(0,i.setGeometry)()),g++,requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9Db25maWcudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9HcmlkLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvSW5wdXRIYW5kbGVyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvTWVudU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9QYXJ0aWNsZS50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1BoeXNpY3NFbmdpbmUudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9SZW5kZXJlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1NoYWRlckhlbHBlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1VJTWFuYWdlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1V0aWxzLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvVmVjMkQudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9zY3JpcHQudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdyaWQgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmb3JlZ3JvdW5kQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvcmVncm91bmQtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tncm91bmQtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbmNvbnN0IHdlYmdsQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dlYmdsLWNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuZm9yZWdyb3VuZENhbnZhcyEud2lkdGggPSBmb3JlZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG5mb3JlZ3JvdW5kQ2FudmFzIS5oZWlnaHQgPSBmb3JlZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuYmFja2dyb3VuZENhbnZhcyEud2lkdGggPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG5iYWNrZ3JvdW5kQ2FudmFzIS5oZWlnaHQgPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxud2ViZ2xDYW52YXMud2lkdGggPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxud2ViZ2xDYW52YXMuaGVpZ2h0ID0gd2ViZ2xDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5leHBvcnQgY29uc3QgZm9yZWdyb3VuZENhbnZhc0N0eCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDYW52YXNDdHggPSBiYWNrZ3JvdW5kQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdXBkYXRlQ2FudmFzU2l6ZSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDYW52YXMoKSB7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCBmb3JlZ3JvdW5kQ2FudmFzLndpZHRoLCBmb3JlZ3JvdW5kQ2FudmFzLmhlaWdodCk7XHJcbiAgfVxyXG4gIFxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ2FudmFzU2l6ZSgpIHtcclxuICAgIGZvcmVncm91bmRDYW52YXMud2lkdGggPSBmb3JlZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhcy5oZWlnaHQgPSBmb3JlZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIGJhY2tncm91bmRDYW52YXMud2lkdGggPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgYmFja2dyb3VuZENhbnZhcy5oZWlnaHQgPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIHdlYmdsQ2FudmFzLndpZHRoID0gd2ViZ2xDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICB3ZWJnbENhbnZhcy5oZWlnaHQgPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICBncmlkLmNhbnZhcyA9IGJhY2tncm91bmRDYW52YXM7XHJcbiAgICBncmlkLnVwZGF0ZVNpemUoKTtcclxuICAgIGdyaWQuZHJhdygpO1xyXG4gIH1cclxuICAiLCJpbXBvcnQgeyBQb2ludGVyRnVuY3Rpb25UeXBlIH0gZnJvbSBcIi4vSW5wdXRIYW5kbGVyXCI7XHJcbmltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5cclxudmFyIGZpZWxkU3RyZW5ndGggPSAxMDtcclxudmFyIHBoeXNpY3NTdWJzdGVwc0Ftb3VudCA9IDQ7XHJcbnZhciBncmF2aXR5RGlyZWN0aW9uID0gbmV3IFZlYzJEKDAsIDEuMik7XHJcbnZhciBmaWVsZFNpemUgPSAyNTA7XHJcbnZhciBwYXJ0aWNsZU51bWJlciA9IDQwMDtcclxudmFyIHBvaW50ZXJGdW5jdGlvbjogUG9pbnRlckZ1bmN0aW9uVHlwZSA9ICdmaWVsZCc7XHJcbnZhciBncmlkU2l6ZSA9IDI2O1xyXG52YXIgZ3lyb0VuYWJsZWQgPSBmYWxzZTtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdyYXZpdHlEaXJlY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZ3Jhdml0eURpcmVjdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCgpIHtcclxuICAgIHJldHVybiBwaHlzaWNzU3Vic3RlcHNBbW91bnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZFN0cmVuZ3RoKCkge1xyXG4gICAgcmV0dXJuIGZpZWxkU3RyZW5ndGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZFNpemUoKSB7XHJcbiAgICByZXR1cm4gZmllbGRTaXplO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFydGljbGVOdW1iZXIoKSB7XHJcbiAgICByZXR1cm4gcGFydGljbGVOdW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludGVyRnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gcG9pbnRlckZ1bmN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZFNpemUoKSB7XHJcbiAgICByZXR1cm4gZ3JpZFNpemU7ICAgIFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNHeXJvRW5hYmxlZCgpIHtcclxuICAgIHJldHVybiBneXJvRW5hYmxlZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEdyYXZpdHlEaXJlY3Rpb24obmV3R3Jhdml0eURpcmVjdGlvbjogVmVjMkQpIHtcclxuICAgIGdyYXZpdHlEaXJlY3Rpb24gPSBuZXdHcmF2aXR5RGlyZWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KG5ld0Ftb3VudDogbnVtYmVyKSB7XHJcbiAgICBwaHlzaWNzU3Vic3RlcHNBbW91bnQgPSBuZXdBbW91bnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRGaWVsZFN0cmVuZ3RoKG5ld2ZpZWxkU3RyZW5ndGg6IG51bWJlcikge1xyXG4gICAgZmllbGRTdHJlbmd0aCA9IG5ld2ZpZWxkU3RyZW5ndGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRGaWVsZFNpemUobmV3ZmllbGRTaXplOiBudW1iZXIpIHtcclxuICAgIGZpZWxkU2l6ZSA9IG5ld2ZpZWxkU2l6ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFBhcnRpY2xlTnVtYmVyKG5ld1BhcnRpY2xlTnVtYmVyOiBudW1iZXIpIHtcclxuICAgIHBhcnRpY2xlTnVtYmVyID0gbmV3UGFydGljbGVOdW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQb2ludGVyRnVuY3Rpb24obmV3UG9pbnRlckZ1bmN0aW9uOiBQb2ludGVyRnVuY3Rpb25UeXBlKSB7XHJcbiAgICBwb2ludGVyRnVuY3Rpb24gPSBuZXdQb2ludGVyRnVuY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRJc0d5cm9FbmFibGVkKG5ld0lzR3lyb0VuYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgIGd5cm9FbmFibGVkID0gbmV3SXNHeXJvRW5hYmxlZDtcclxufSIsImltcG9ydCB7IGJhY2tncm91bmRDYW52YXNDdHggfSBmcm9tIFwiLi9DYW52YXNNYW5hZ2VyXCI7XHJcbmltcG9ydCBQYXJ0aWNsZSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xyXG5pbXBvcnQgeyBncmlkIH0gZnJvbSBcIi4vc2NyaXB0XCI7XHJcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XHJcbmV4cG9ydCBjbGFzcyBHcmlkIHtcclxuICAgIHB1YmxpYyBjZWxsczogUGFydGljbGVbXVtdW107XHJcbiAgICBwdWJsaWMgY29sdW1uczogbnVtYmVyO1xyXG4gICAgcHVibGljIHJvd3M6IG51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBwaXhlbFNpemU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjYW52YXNDdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGdyaWRQaXhlbFNpemU6IG51bWJlciA9IENvbmZpZy5nZXRHcmlkU2l6ZSgpKSB7XHJcbiAgICAgICAgdGhpcy5waXhlbFNpemUgPSBncmlkUGl4ZWxTaXplO1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICB0aGlzLnJvd3MgPSBNYXRoLmNlaWwodGhpcy5jYW52YXMuaGVpZ2h0IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMuY2VsbHMgPSB0aGlzLmluaXRpYWxpemUoKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0N0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRpYWxpemUoKTogUGFydGljbGVbXVtdW10ge1xyXG4gICAgICAgIGNvbnN0IGNlbGxzOiBQYXJ0aWNsZVtdW11bXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcclxuICAgICAgICAgICAgY2VsbHNbaV0gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd3M7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY2VsbHNbaV1bal0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNlbGxzICA9IGNlbGxzO1xyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQWxsKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd3M7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jZWxsc1tpXT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1tpXVtqXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwdXQocGFydGljbGU6IFBhcnRpY2xlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29sdW1uID0gTWF0aC5mbG9vcihwYXJ0aWNsZS5wb3NpdGlvbi54IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IocGFydGljbGUucG9zaXRpb24ueSAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY29sdW1uID49IDAgJiYgY29sdW1uIDwgdGhpcy5jZWxscy5sZW5ndGggJiYgcm93ID49IDAgJiYgcm93IDwgdGhpcy5jZWxsc1tjb2x1bW5dLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxzW2NvbHVtbl1bcm93XS5wdXNoKHBhcnRpY2xlKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCR7Y29sdW1ufSAgICR7cm93fWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlU2l6ZSgpOnZvaWQge1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICB0aGlzLnJvd3MgPSBNYXRoLmNlaWwodGhpcy5jYW52YXMuaGVpZ2h0IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCl7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguc3Ryb2tlU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1ncmlkLWNvbG9yJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB0aGlzLnBpeGVsU2l6ZTsgeCA8IHRoaXMuY2FudmFzLndpZHRoOyB4ICs9IHRoaXMucGl4ZWxTaXplKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubW92ZVRvKHgsIDApO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmxpbmVUbyh4LCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSB0aGlzLnBpeGVsU2l6ZTsgeSA8IHRoaXMuY2FudmFzLmhlaWdodDsgeSArPSB0aGlzLnBpeGVsU2l6ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4Lm1vdmVUbygwLCB5KTtcclxuICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5saW5lVG8odGhpcy5jYW52YXMud2lkdGgsIHkpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERFQlVHXHJcbiAgICAgICAgICAgIC8vICAgZm9yIChsZXQgeCA9IDA7IHggPCBncmlkLmNvbHVtbnM7IHggKz0gMSkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vICAgZm9yIChsZXQgeSA9IDA7IHkgPCBncmlkLnJvd3M7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZENhbnZhc0N0eC5mb250ID0gXCIxMnB4IHNlcmlmXCI7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICAgIGJhY2tncm91bmRDYW52YXNDdHguZmlsbFRleHQoYCR7Z3JpZC5jZWxsc1t4XVt5XS5sZW5ndGh9YCwgKHgrMSkqdGhpcy5waXhlbFNpemUgLSB0aGlzLnBpeGVsU2l6ZS8yIC0gMiwgKHkrMSkqdGhpcy5waXhlbFNpemUgLXRoaXMucGl4ZWxTaXplLzIgKyA0KTtcclxuICAgICAgICAgICAgICAgIC8vIGJhY2tfY3R4LmZpbGxUZXh0KGAke3h9ICR7eX1gLCAoeCsxKSp0aGlzLnBpeGVsU2l6ZSAtIHRoaXMucGl4ZWxTaXplLzIgLSAyLCAoeSsxKSp0aGlzLnBpeGVsU2l6ZSAtdGhpcy5waXhlbFNpemUvMiArIDQpO1xyXG4gICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgfVxyXG4gICAgfSIsImltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBjbG9zZU1lbnUsIHVwZGF0ZVBvaW50ZXJGdW5jdGlvbiB9IGZyb20gXCIuL01lbnVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGZwcyB9IGZyb20gXCIuL1VJTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBncmlkLCBwYXJ0aWNsZXMgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tQ29sb3IgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSBcIi4vUGFydGljbGVcIjtcclxuZXhwb3J0IHR5cGUgUG9pbnRlckZ1bmN0aW9uVHlwZSA9ICdmaWVsZCcgfCAnZ3Jhdml0eScgfCAndGhyb3cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0SGFuZGxlciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IElucHV0SGFuZGxlcjtcclxuICBwdWJsaWMgY2xpY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgcG9pbnRlckZ1bmN0aW9uOiBQb2ludGVyRnVuY3Rpb25UeXBlO1xyXG4gIHB1YmxpYyBwb2ludGVyUG9zaXRpb24gPSBuZXcgVmVjMkQoMCwgMClcclxuICBwdWJsaWMgY2xpY2tTdGFydFBvc2l0aW9uID0gbmV3IFZlYzJEKDAsIDApXHJcblxyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5wb2ludGVyRnVuY3Rpb24gPSAnZmllbGQnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBJbnB1dEhhbmRsZXIge1xyXG4gICAgaWYgKCFJbnB1dEhhbmRsZXIuaW5zdGFuY2UpIHtcclxuICAgICAgSW5wdXRIYW5kbGVyLmluc3RhbmNlID0gbmV3IElucHV0SGFuZGxlcigpO1xyXG4gICAgICBJbnB1dEhhbmRsZXIuaW5zdGFuY2UuaW5pdGlhbGl6ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSW5wdXRIYW5kbGVyLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBtYWluX2JvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja2dyb3VuZCcpO1xyXG4gICAgaWYgKCFtYWluX2JvZHkpIHJldHVybjtcclxuXHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXAuYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdmVFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLmJpbmQodGhpcykpO1xyXG4gICAgbWFpbl9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVNb3ZlRXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgY2xvc2VNZW51KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLmNsaWNrZWQgPSB0cnVlO1xyXG4gICAgXHJcblxyXG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCkge1xyXG4gICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24ueSA9IGV2ZW50LmNsaWVudFk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCkge1xyXG4gICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi55ID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLnggPSB0aGlzLnBvaW50ZXJQb3NpdGlvbi54O1xyXG4gICAgdGhpcy5jbGlja1N0YXJ0UG9zaXRpb24ueSA9IHRoaXMucG9pbnRlclBvc2l0aW9uLnk7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTW91c2VVcChldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgdGhpcy5jbGlja2VkID0gZmFsc2U7XHJcbiAgICBpZihDb25maWcuZ2V0UG9pbnRlckZ1bmN0aW9uKCkgPT0gJ3Rocm93Jyl7XHJcbiAgICAgIGxldCBsYXVuY2hfZGlyID0gdGhpcy5jbGlja1N0YXJ0UG9zaXRpb24uY2xvbmUoKS5kaWZmZXJlbmNlKHRoaXMucG9pbnRlclBvc2l0aW9uKS5tdWx0aXBseSgwLjEpO1xyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLmNsb25lKCksIENvbmZpZy5nZXRHcmlkU2l6ZSgpLzIsIGxhdW5jaF9kaXIsIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTW92ZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBpZiAodGhpcy5jbGlja2VkKSB7XHJcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi55ID0gZXZlbnQuY2xpZW50WTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuXHJcbn0iLCJpbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBQb2ludGVyRnVuY3Rpb25UeXBlIH0gZnJvbSAnLi9JbnB1dEhhbmRsZXInO1xyXG5pbXBvcnQgVmVjMkQgZnJvbSBcIi4vVmVjMkRcIjtcclxuaW1wb3J0IHsgZ3JpZCwgcGFydGljbGVzIH0gZnJvbSAnLi9zY3JpcHQnO1xyXG5cclxuY29uc3QgbWVudUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudS1idXR0b25cIik7XHJcbmNvbnN0IG1lbnVFbGVtZW50czogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lbnUtZWxlbWVudFwiKTtcclxuXHJcbm1lbnVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBvcGVuTWVudSgpO1xyXG59KTtcclxuXHJcbmNvbnN0IHN3aXRjaFRoZW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvb3RFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XHJcbiAgbGV0IHRoZW1lID0gcm9vdEVsZW0uZ2V0QXR0cmlidXRlKCd0aGVtZScpLCBuZXdUaGVtZTtcclxuICBuZXdUaGVtZSA9ICh0aGVtZSA9PT0gJ2xpZ2h0JykgPyAnZGFyaycgOiAnbGlnaHQnO1xyXG5cclxuICByb290RWxlbS5zZXRBdHRyaWJ1dGUoJ3RoZW1lJywgbmV3VGhlbWUpO1xyXG4gIGdyaWQuZHJhdygpO1xyXG59XHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RoZW1lLXN3aXRjaCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpdGNoVGhlbWUpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5NZW51KCkge1xyXG4gIGlmIChtZW51QnV0dG9uLmdldEF0dHJpYnV0ZShcIm9wZW5cIikgPT0gXCJmYWxzZVwiKSB7XHJcbiAgICBtZW51QnV0dG9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJ0cnVlXCIpO1xyXG4gICAgbWVudUJ1dHRvbi5zdHlsZS5jdXJzb3IgPSBcImF1dG9cIjtcclxuICAgIGNvbnN0IG1lbnVCYWNrQnV0dG9uID0gbWVudUJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcjbWVudS1iYWNrLWJ1dHRvbicpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgbWVudUJhY2tCdXR0b24uc3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoMTgwZGVnKVwiO1xyXG4gICAgbWVudUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgfSwgMzAwKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcbiAgZWxzZSB7XHJcblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcclxuICBtZW51QnV0dG9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJmYWxzZVwiKTtcclxuICBtZW51QnV0dG9uLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gIGNvbnN0IG1lbnVCYWNrQnV0dG9uID0gbWVudUJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcjbWVudS1iYWNrLWJ1dHRvbicpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gIG1lbnVCYWNrQnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKDBkZWcpXCI7XHJcbiAgbWVudUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICB9KTtcclxuXHJcbn1cclxuXHJcbnZhciBmaWVsZFNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpZWxkLXNpemUtc2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbnZhciBmaWVsZFN0cmVuZ3RoU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWVsZC1zdHJlbmd0aC1zbGlkZXJcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIGdyYXZpdHlTdHJlbmd0aFNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3Jhdml0eS1zdHJlbmd0aC1zbGlkZXJcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIHN1YnN0ZXBzQW1vdW50RW50cnlCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1YnN0ZXBzLWFtb3VudC1lbnRyeVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG52YXIgcGFydGljbGVzQW1vdW50RW50cnlCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcnRpY2xlcy1hbW91bnQtZW50cnlcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIGd5cm9FbmFibGVkQ2hlY2tCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImd5cm8tdG9nZ2xlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG5jb25zdCByYWRpb0J1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnY3Vyc29yLWZ1bmN0aW9uJykgYXMgTm9kZUxpc3RPZjxIVE1MSW5wdXRFbGVtZW50PjtcclxuXHJcbiAgcmFkaW9CdXR0b25zLmZvckVhY2gocmFkaW9CdXR0b24gPT4ge1xyXG4gICAgcmFkaW9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICBpZiAocmFkaW9CdXR0b24uY2hlY2tlZCkge1xyXG4gICAgICAgIENvbmZpZy5zZXRQb2ludGVyRnVuY3Rpb24ocmFkaW9CdXR0b24udmFsdWUgYXMgUG9pbnRlckZ1bmN0aW9uVHlwZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuZmllbGRTaXplU2xpZGVyLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgQ29uZmlnLnNldEZpZWxkU2l6ZShwYXJzZUludChmaWVsZFNpemVTbGlkZXIudmFsdWUpKTtcclxufVxyXG5cclxuZmllbGRTdHJlbmd0aFNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIENvbmZpZy5zZXRGaWVsZFN0cmVuZ3RoKHBhcnNlSW50KGZpZWxkU3RyZW5ndGhTbGlkZXIudmFsdWUpKTtcclxufVxyXG5cclxuZ3Jhdml0eVN0cmVuZ3RoU2xpZGVyLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgc2V0R3Jhdml0eVN0cmVuZ3RoKHBhcnNlSW50KGdyYXZpdHlTdHJlbmd0aFNsaWRlci52YWx1ZSkpO1xyXG59XHJcblxyXG5zdWJzdGVwc0Ftb3VudEVudHJ5Qm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KHBhcnNlSW50KHN1YnN0ZXBzQW1vdW50RW50cnlCb3gudmFsdWUpKTtcclxufSk7XHJcblxyXG5neXJvRW5hYmxlZENoZWNrQm94Lm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHR5cGVvZiBEZXZpY2VNb3Rpb25FdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIChEZXZpY2VNb3Rpb25FdmVudCBhcyBhbnkpLnJlcXVlc3RQZXJtaXNzaW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAoRGV2aWNlTW90aW9uRXZlbnQgYXMgYW55KS5yZXF1ZXN0UGVybWlzc2lvbigpLnRoZW4oKHJlc3BvbnNlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gJ2dyYW50ZWQnKSB7XHJcbiAgICAgICAgICAgIHRvZ2dsZUd5cm8oKTtcclxuICAgICAgICB9XHJcbiAgICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxufSBlbHNlIHtcclxuICAgIHRvZ2dsZUd5cm8oKTtcclxufVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVHeXJvKCl7XHJcbiAgaWYgKGd5cm9FbmFibGVkQ2hlY2tCb3guY2hlY2tlZCkge1xyXG4gICAgQ29uZmlnLnNldElzR3lyb0VuYWJsZWQodHJ1ZSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgaGFuZGxlTW90aW9uLCB0cnVlKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgaGFuZGxlTW90aW9uKTtcclxuICAgIENvbmZpZy5zZXRJc0d5cm9FbmFibGVkKGZhbHNlKTtcclxuICAgIENvbmZpZy5zZXRHcmF2aXR5RGlyZWN0aW9uKG5ldyBWZWMyRCgwLCAxLjMpKTtcclxuICB9XHJcbn1cclxuXHJcbnBhcnRpY2xlc0Ftb3VudEVudHJ5Qm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0UGFydGljbGVOdW1iZXIocGFyc2VJbnQocGFydGljbGVzQW1vdW50RW50cnlCb3gudmFsdWUpKTtcclxuICBsZXQgZGlmZiA9IHBhcnRpY2xlcy5sZW5ndGggLSBDb25maWcuZ2V0UGFydGljbGVOdW1iZXIoKTtcclxuICB3aGlsZSggZGlmZiA+IDApe1xyXG4gICBwYXJ0aWNsZXMucG9wKCk7XHJcbiAgIGRpZmYtLTtcclxuICB9XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU1vdGlvbihldmVudDogRGV2aWNlTW90aW9uRXZlbnQpOiB2b2lkIHtcclxuICBpZihDb25maWcuaXNHeXJvRW5hYmxlZCgpKXtcclxuICBDb25maWcuc2V0R3Jhdml0eURpcmVjdGlvbihuZXcgVmVjMkQoLWV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueC81LGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueS81KSk7XHJcbiAgfSBlbHNle1xyXG4gICAgQ29uZmlnLnNldEdyYXZpdHlEaXJlY3Rpb24obmV3IFZlYzJEKDAsIDEuMikpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQb2ludGVyRnVuY3Rpb24oKSB7XHJcbiAgdmFyIHJhZGlvQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdjdXJzb3ItZnVuY3Rpb24nKSBhcyBOb2RlTGlzdE9mPEhUTUxJbnB1dEVsZW1lbnQ+XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaW9CdXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAocmFkaW9CdXR0b25zW2ldLmNoZWNrZWQpIHtcclxuICAgICAgcmV0dXJuIHJhZGlvQnV0dG9uc1tpXS52YWx1ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRHcmF2aXR5U3RyZW5ndGgodmFsdWU6IG51bWJlcikge1xyXG4gIENvbmZpZy5zZXRHcmF2aXR5RGlyZWN0aW9uKG5ldyBWZWMyRCgwLCB2YWx1ZSAqIDAuMSkpO1xyXG59XHJcbiIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9HcmlkXCI7XHJcbmltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZSB7XHJcbiAgc3RhdGljIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JlZ3JvdW5kLWNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuICBwdWJsaWMgcG9zaXRpb246IFZlYzJEO1xyXG4gIHB1YmxpYyBhY2NlbGVyYXRpb246IFZlYzJEO1xyXG4gIHB1YmxpYyB2ZWxvY2l0eTogVmVjMkQ7XHJcbiAgcHVibGljIHJhZGl1czogbnVtYmVyO1xyXG4gIHB1YmxpYyBjb2xvcjogeyByOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyIH07XHJcbiAgcHJpdmF0ZSBncmlkOiBHcmlkO1xyXG4gIHByaXZhdGUgY2VsbDogVmVjMkQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBvczogVmVjMkQsIHJhZGl1czogbnVtYmVyLCB2ZWxvY2l0eTogVmVjMkQsIGNvbG9yOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSwgZ3JpZDogR3JpZCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvcztcclxuICAgIHRoaXMudmVsb2NpdHkgPSB2ZWxvY2l0eTtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gbmV3IFZlYzJEKDAsMCk7XHJcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuZ3JpZCA9IGdyaWQ7XHJcbiAgICB0aGlzLmNlbGwgPSBuZXcgVmVjMkQoTWF0aC5mbG9vcih0aGlzLnBvc2l0aW9uLnggLyBncmlkLnBpeGVsU2l6ZSksIE1hdGguZmxvb3IodGhpcy5wb3NpdGlvbi55IC8gZ3JpZC5waXhlbFNpemUpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBvc2l0aW9uKGR0OiBudW1iZXIpIHtcclxuICAgIC8vIGxldCB2ZWxvY2l0eTogVmVjMkQgPSBuZXcgVmVjMkQodGhpcy5jdXJyZW50UG9zaXRpb24ueCAtIHRoaXMucHJldmlvdXNQb3NpdGlvbi54LCB0aGlzLmN1cnJlbnRQb3NpdGlvbi55IC0gdGhpcy5wcmV2aW91c1Bvc2l0aW9uLnkpO1xyXG5cclxuICAgIC8vIGxldCBzcSA9IHRoaXMudmVsb2NpdHkuc3F1YXJlZExlbmd0aCgpXHJcbiAgICAvLyBsZXQgZHJhZyA9IHRoaXMudmVsb2NpdHkuY2xvbmUoKS5tdWx0aXBseSgtMSAqIHNxICogMC4wMDAwMDA1KVxyXG4gICAgLy8gdGhpcy52ZWxvY2l0eS5hZGQoZHJhZylcclxuXHJcblxyXG4gICAgbGV0IG1vdmVEZWx0YSA9IHRoaXMudmVsb2NpdHkuYWRkKHRoaXMuYWNjZWxlcmF0aW9uLm11bHRpcGx5KChkdCkpKS5jbG9uZSgpXHJcbiAgICBcclxuICAgIG1vdmVEZWx0YS5tdWx0aXBseShkdClcclxuXHJcbiAgICBcclxuXHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbi5hZGQobW92ZURlbHRhKTtcclxuXHJcbiAgICB0aGlzLmFjY2VsZXJhdGlvbi54ID0gMDtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uLnkgPSAwO1xyXG5cclxuICAgIHRoaXMudXBkYXRlQ2VsbCgpO1xyXG4gIH1cclxuXHJcbiAgYWNjZWxlcmF0ZShhY2M6IFZlYzJEKSB7XHJcbiAgICB0aGlzLmFjY2VsZXJhdGlvbi5hZGQoYWNjKTtcclxuICB9XHJcblxyXG5cclxuICBnZXROZWlnaGJvcmluZ1BhcnRpY2xlcygpOiBQYXJ0aWNsZVtdIHtcclxuICAgIGNvbnN0IG5laWdoYm9yaW5nUGFydGljbGVzOiBQYXJ0aWNsZVtdID0gW107XHJcbiAgXHJcbiAgICBmb3IgKGxldCBpID0gdGhpcy5jZWxsLnggLSAxOyBpIDw9IHRoaXMuY2VsbC54ICsgMTsgaSsrKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSB0aGlzLmNlbGwueSAtIDE7IGogPD0gdGhpcy5jZWxsLnkgKyAxOyBqKyspIHtcclxuICAgICAgICBpZiAoaSA+PSAwICYmIGkgPCB0aGlzLmdyaWQuY29sdW1ucyAmJiBqID49IDAgJiYgaiA8IHRoaXMuZ3JpZC5yb3dzKSB7XHJcbiAgICAgICAgICBuZWlnaGJvcmluZ1BhcnRpY2xlcy5wdXNoKC4uLnRoaXMuZ3JpZC5jZWxsc1tpXVtqXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmVpZ2hib3JpbmdQYXJ0aWNsZXM7XHJcbiAgfVxyXG4gIFxyXG4gIHVwZGF0ZUNlbGwoKXtcclxuICAgIHRoaXMuY2VsbCA9IG5ldyBWZWMyRChNYXRoLmZsb29yKHRoaXMucG9zaXRpb24ueCAvIHRoaXMuZ3JpZC5waXhlbFNpemUpLCBNYXRoLmZsb29yKHRoaXMucG9zaXRpb24ueSAvIHRoaXMuZ3JpZC5waXhlbFNpemUpKTtcclxuICB9XHJcblxyXG5cclxuXHJcbn0iLCJpbXBvcnQgeyBmb3JlZ3JvdW5kQ2FudmFzIH0gZnJvbSAnLi9DYW52YXNNYW5hZ2VyJztcclxuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgSW5wdXRIYW5kbGVyIH0gZnJvbSAnLi9JbnB1dEhhbmRsZXInO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi9QYXJ0aWNsZSc7XHJcbmltcG9ydCBWZWMyRCBmcm9tICcuL1ZlYzJEJztcclxuaW1wb3J0IHsgYXR0cmFjdG9ycywgZ3JpZCwgcGFydGljbGVzIH0gZnJvbSAnLi9zY3JpcHQnO1xyXG5cclxuY29uc3QgaW5wdXRIYW5kbGVyID0gSW5wdXRIYW5kbGVyLmdldEluc3RhbmNlKCk7XHJcbmxldCBwcmV2aW91c1NjcmVlblg9IDAsIHByZXZpb3VzU2NyZWVuWSA9IDAsIHByZXZpb3VzVmVsb2NpdHkgPSBuZXcgVmVjMkQoMCwwKVxyXG5mdW5jdGlvbiB1cGRhdGVQb3NpdGlvbnMoZHQ6IG51bWJlcikge1xyXG4gICAgZ3JpZC5yZW1vdmVBbGwoKTtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gIFxyXG4gICAgICBwYXJ0aWNsZS51cGRhdGVQb3NpdGlvbihkdCk7XHJcbiAgICAgIGdyaWQucHV0KHBhcnRpY2xlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBhcHBseUdyYXZpdHkoKSB7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShDb25maWcuZ2V0R3Jhdml0eURpcmVjdGlvbigpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXBwbHlBY2NlbGVyYXRpb24oYWNjOiBWZWMyRCl7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShhY2MpXHJcbiAgICB9KTtcclxuICB9XHJcbiAgZnVuY3Rpb24gYXBwbHlWZWxvY2l0eSh2ZWw6IFZlYzJEKXtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS5hZGQodmVsKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtb3ZlQWxsUGFydGljbGVzKHZlYzogVmVjMkQpe1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLmFkZCh2ZWMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGFwcGx5RmllbGQoZmllbGRQb3M6IFZlYzJEKSB7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgY29uc3QgcHVsbERpcmVjdGlvbiA9IGZpZWxkUG9zLmRpZmZlcmVuY2UocGFydGljbGUucG9zaXRpb24pO1xyXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHB1bGxEaXJlY3Rpb24ubGVuZ3RoKCk7XHJcbiAgXHJcbiAgICAgIGlmIChkaXN0YW5jZSA8IENvbmZpZy5nZXRGaWVsZFNpemUoKSAmJiBkaXN0YW5jZSA+IDEwKSB7XHJcbiAgICAgICAgcHVsbERpcmVjdGlvbi5tdWx0aXBseShDb25maWcuZ2V0RmllbGRTdHJlbmd0aCgpICogMTAwKTtcclxuICAgICAgICBwdWxsRGlyZWN0aW9uLmRpdmlkZShkaXN0YW5jZSAqIGRpc3RhbmNlKTtcclxuICAgICAgICBwYXJ0aWNsZS5hY2NlbGVyYXRlKHB1bGxEaXJlY3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGFwcGx5QXR0cmFjdG9yRm9yY2VzVG9BbGwoKSB7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgYXBwbHlBdHRyYWN0b3JGb3JjZXMocGFydGljbGUpXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gdGljayhkdDogbnVtYmVyKSB7XHJcbiAgICB2YXIgc3ViX2R0ID0gZHQgLyBDb25maWcuZ2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KCk7XHJcbiAgICBcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ29uZmlnLmdldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCgpOyBpKyspIHtcclxuICAgICAgaWYgKENvbmZpZy5nZXRHcmF2aXR5RGlyZWN0aW9uKCkueSAhPSAwKSB7XHJcbiAgICAgICAgYXBwbHlHcmF2aXR5KCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG4gICAgICAgIHN3aXRjaCAoQ29uZmlnLmdldFBvaW50ZXJGdW5jdGlvbigpKSB7XHJcbiAgICAgICAgICBjYXNlICdmaWVsZCc6XHJcbiAgICAgICAgICAgIGFwcGx5RmllbGQoaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnZ3Jhdml0eSc6XHJcbiAgICAgICAgICAgIENvbmZpZy5zZXRHcmF2aXR5RGlyZWN0aW9uKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24uZGlmZmVyZW5jZShpbnB1dEhhbmRsZXIuY2xpY2tTdGFydFBvc2l0aW9uKS5kaXZpZGUoNDAwKSk7XHJcbiAgICAgICAgICBjYXNlICd0aHJvdyc6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gIFxyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGVsdGFYID0gd2luZG93LnNjcmVlblggLSBwcmV2aW91c1NjcmVlblg7XHJcbiAgICAgIGNvbnN0IGRlbHRhWSA9IHdpbmRvdy5zY3JlZW5ZIC0gcHJldmlvdXNTY3JlZW5ZO1xyXG4gICAgICBjb25zdCBzY3JlZW5WZWxvY2l0eSA9IG5ldyBWZWMyRCgtZGVsdGFYLCAtZGVsdGFZKTtcclxuICAgICAgaWYgKGRlbHRhWCAhPSAwIHx8IGRlbHRhWSAhPSAwICl7XHJcbiAgICAgICAgIG1vdmVBbGxQYXJ0aWNsZXMoc2NyZWVuVmVsb2NpdHkpO1xyXG4gICAgICAgIC8vYXBwbHlWZWxvY2l0eShzY3JlZW5WZWxvY2l0eS5tdWx0aXBseSgwLjEpKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuXHJcbiAgICAgIHByZXZpb3VzU2NyZWVuWCA9IHdpbmRvdy5zY3JlZW5YO1xyXG4gICAgICBwcmV2aW91c1NjcmVlblkgPSB3aW5kb3cuc2NyZWVuWTtcclxuXHJcblxyXG4gICAgICAvLyBhcHBseUF0dHJhY3RvckZvcmNlc1RvQWxsKCk7XHJcbiAgICAgIGFwcGx5Q29uc3RyYWludFRvQWxsRWRnZXMoKTtcclxuICAgICAgc29sdmVDb2xsaXNpb25zKCk7XHJcbiAgICAgIHVwZGF0ZVBvc2l0aW9ucyhzdWJfZHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXBwbHlDb25zdHJhaW50VG9BbGxFZGdlcygpIHtcclxuXHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlKTtcclxuICAgIH0pO1xyXG4gICAgLy8gZm9yICh2YXIgY29sID0gMDsgY29sIDwgZ3JpZC5sZW5ndGg7IGNvbCsrKSB7XHJcbiAgICAvLyAgIGZvciAodmFyIHRoaWNrbmVzcyA9IDA7IHRoaWNrbmVzcyA8IDI7IHRoaWNrbmVzcysrKSB7XHJcbiAgICAvLyAgICAgZ3JpZFtjb2xdW3RoaWNrbmVzc10uZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgIC8vICAgICAgIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZSk7XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgXHJcbiAgICAvLyAgICAgZ3JpZFtjb2xdW2dyaWRbMF0ubGVuZ3RoIC0gdGhpY2tuZXNzIC0gMV0uZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgIC8vICAgICAgIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZSk7XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH1cclxuICBcclxuICAgIC8vIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGdyaWRbMF0ubGVuZ3RoOyByb3crKykge1xyXG4gICAgLy8gICBmb3IgKHZhciB0aGlja25lc3MgPSAwOyB0aGlja25lc3MgPCAyOyB0aGlja25lc3MrKykge1xyXG4gICAgLy8gICAgIGdyaWRbdGhpY2tuZXNzXVtyb3ddLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gIFxyXG4gICAgLy8gICAgIGdyaWRbZ3JpZC5sZW5ndGggLSB0aGlja25lc3MgLSAxXVtyb3ddLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlOiBQYXJ0aWNsZSkge1xyXG4gICAgLy8gQXBwbHkgZmxvb3IgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgKyBwYXJ0aWNsZS5yYWRpdXMgPj0gZm9yZWdyb3VuZENhbnZhcy5oZWlnaHQpIHtcclxuICAgICAgcGFydGljbGUudmVsb2NpdHkgPSBuZXcgVmVjMkQocGFydGljbGUudmVsb2NpdHkueCogMC45OTIsIC1NYXRoLmFicyhwYXJ0aWNsZS52ZWxvY2l0eS55ICogMC42KSlcclxuICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IGZvcmVncm91bmRDYW52YXMuaGVpZ2h0IC0gcGFydGljbGUucmFkaXVzO1xyXG5cclxuICAgIH1cclxuICBcclxuICAgIC8vIEFwcGx5IENlaWxpbmcgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5yYWRpdXMgPD0gMCkge1xyXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gcGFydGljbGUucmFkaXVzO1xyXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eSA9IG5ldyBWZWMyRChwYXJ0aWNsZS52ZWxvY2l0eS54LCBNYXRoLmFicyhwYXJ0aWNsZS52ZWxvY2l0eS55ICogMC42KSlcclxuICAgIH1cclxuICBcclxuICBcclxuICAgIC8vIEFwcGx5IGxlZnQgd2FsbCBjb25zdHJhaW50XHJcbiAgICBpZiAocGFydGljbGUucG9zaXRpb24ueCAtIHBhcnRpY2xlLnJhZGl1cyA8PSAwKSB7XHJcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5ID0gbmV3IFZlYzJEKE1hdGguYWJzKHBhcnRpY2xlLnZlbG9jaXR5LnggKiAwLjYpLCBwYXJ0aWNsZS52ZWxvY2l0eS55KVxyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gQXBwbHkgcmlnaHQgd2FsbCBjb25zdHJhaW50XHJcbiAgICBpZiAocGFydGljbGUucG9zaXRpb24ueCArIHBhcnRpY2xlLnJhZGl1cyA+PSBmb3JlZ3JvdW5kQ2FudmFzLndpZHRoKSB7XHJcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5ID0gbmV3IFZlYzJEKC1NYXRoLmFicyhwYXJ0aWNsZS52ZWxvY2l0eS54ICogMC42KSwgcGFydGljbGUudmVsb2NpdHkueSlcclxuICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IGZvcmVncm91bmRDYW52YXMud2lkdGggLSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gYXBwbHlBdHRyYWN0b3JGb3JjZXMocGFydGljbGU6IFBhcnRpY2xlKSB7XHJcbiAgICBhdHRyYWN0b3JzLmZvckVhY2goKGF0dHJhY3RvcikgPT4ge1xyXG4gICAgICBjb25zdCBwdWxsRGlyZWN0aW9uID0gYXR0cmFjdG9yLnBvc2l0aW9uLmRpZmZlcmVuY2UocGFydGljbGUucG9zaXRpb24pXHJcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gcHVsbERpcmVjdGlvbi5sZW5ndGgoKTtcclxuICBcclxuICAgICAgaWYgKGRpc3RhbmNlIDwgYXR0cmFjdG9yLnJhZGl1cyAmJiBkaXN0YW5jZSA+IDEwKSB7XHJcbiAgICAgICAgcHVsbERpcmVjdGlvbi5tdWx0aXBseShhdHRyYWN0b3IuZm9yY2UpO1xyXG4gICAgICAgIHB1bGxEaXJlY3Rpb24uZGl2aWRlKGRpc3RhbmNlICogZGlzdGFuY2UpXHJcbiAgICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShwdWxsRGlyZWN0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNvbHZlQ29sbGlzaW9uczIoKSB7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUxKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmVpZ2hib3JpbmdQYXJ0aWNsZXMgPSBwYXJ0aWNsZTEuZ2V0TmVpZ2hib3JpbmdQYXJ0aWNsZXMoKTtcclxuICAgICAgICBuZWlnaGJvcmluZ1BhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZTIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhcnRpY2xlMSA9PT0gcGFydGljbGUyKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgc3F1YXJlZERpc3RhbmNlID0gcGFydGljbGUxLnBvc2l0aW9uLnNxdWFyZWREaXN0YW5jZVRvKHBhcnRpY2xlMi5wb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHRoZSBjb2xsaXNpb24gb2NjdXJyZWQsIGlmIG5vLCByZXR1cm5cclxuICAgICAgICAgICAgaWYgKHNxdWFyZWREaXN0YW5jZSA+IChwYXJ0aWNsZTEucmFkaXVzICsgcGFydGljbGUyLnJhZGl1cykqKjIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChzcXVhcmVkRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICBsZXQgY29sbGlzaW9uTm9ybWFsID0gbmV3IFZlYzJEKChwYXJ0aWNsZTIucG9zaXRpb24ueCAtIHBhcnRpY2xlMS5wb3NpdGlvbi54KS8gZGlzdGFuY2UsIChwYXJ0aWNsZTIucG9zaXRpb24ueSAtIHBhcnRpY2xlMS5wb3NpdGlvbi55KSAvIGRpc3RhbmNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vbm8gbmVlZCB0byBtdWx0aXBseSBieSAyLCBiZWNhdXNlIG0xKyBtMiBpcyAyXHJcbiAgICAgICAgICAgIGxldCBwID0gKHBhcnRpY2xlMS52ZWxvY2l0eS54ICogY29sbGlzaW9uTm9ybWFsLnggKyBwYXJ0aWNsZTEudmVsb2NpdHkueSAqIGNvbGxpc2lvbk5vcm1hbC55IC0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlMi52ZWxvY2l0eS54ICogY29sbGlzaW9uTm9ybWFsLnggKyBwYXJ0aWNsZTIudmVsb2NpdHkueSAqIGNvbGxpc2lvbk5vcm1hbC55KTtcclxuICAgICAgICAgICAgcGFydGljbGUxLnZlbG9jaXR5LnNldChuZXcgVmVjMkQocGFydGljbGUxLnZlbG9jaXR5LnggLSBwICogY29sbGlzaW9uTm9ybWFsLngsIHBhcnRpY2xlMS52ZWxvY2l0eS55IC0gcCAqIGNvbGxpc2lvbk5vcm1hbC55KSlcclxuICAgICAgICAgICAgcGFydGljbGUyLnZlbG9jaXR5LnNldChuZXcgVmVjMkQocGFydGljbGUyLnZlbG9jaXR5LnggKyBwICogY29sbGlzaW9uTm9ybWFsLngsIHBhcnRpY2xlMi52ZWxvY2l0eS55ICsgcCAqIGNvbGxpc2lvbk5vcm1hbC55KSlcclxuXHJcblxyXG4gICAgICAgICAgICAvLyB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLnNldChwYXJ0aWNsZTEuY3VycmVudFBvc2l0aW9uKS5zdWJ0cmFjdChwYXJ0aWNsZTIuY3VycmVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgLy8gc3F1YXJlZERpc3RhbmNlID0gdGVtcENvbGxpc2lvbkRpcmVjdGlvbi5zcXVhcmVkTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyByYWRpaVN1bSA9IHBhcnRpY2xlMS5yYWRpdXMgKyBwYXJ0aWNsZTIucmFkaXVzO1xyXG4gICAgICAgICAgICAvLyBzcXVhcmVkUmFkaWlTdW0gPSByYWRpaVN1bSAqIHJhZGlpU3VtO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgKHNxdWFyZWREaXN0YW5jZSA8IHNxdWFyZWRSYWRpaVN1bSAmJiBzcXVhcmVkRGlzdGFuY2UgIT09IDApIHtcclxuICAgICAgICAgICAgLy8gICAgIG51bWJlck9mQ29sbGlzaW9ucysrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vICAgICBsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoc3F1YXJlZERpc3RhbmNlKTtcclxuICAgICAgICAgICAgLy8gICAgIGxldCBub3JtYWwgPSB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLmRpdmlkZShkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIC8vICAgICBsZXQgZGVsdGEgPSByYWRpaVN1bSAtIGRpc3RhbmNlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1vdmUgcGFydGljbGVzIGFwYXJ0IGJhc2VkIG9uIHRoZWlyIG92ZXJsYXBcclxuICAgICAgICAgICAgLy8gbGV0IGRpc3BsYWNlbWVudCA9IG5vcm1hbC5tdWx0aXBseShkZWx0YSAqIDAuNSk7XHJcbiAgICAgICAgICAgIC8vIHBhcnRpY2xlMS5jdXJyZW50UG9zaXRpb24uYWRkKGRpc3BsYWNlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIHBhcnRpY2xlMi5jdXJyZW50UG9zaXRpb24uc3VidHJhY3QoZGlzcGxhY2VtZW50KTtcclxuICAgICAgICAgICAgbGV0IGRlbHRhID0gKHBhcnRpY2xlMS5yYWRpdXMgKyBwYXJ0aWNsZTIucmFkaXVzKSAtIGRpc3RhbmNlO1xyXG4gICAgICAgICAgICBjb2xsaXNpb25Ob3JtYWwubXVsdGlwbHkoZGVsdGEgKiAwLjYpXHJcblxyXG4gICAgICAgICAgICBwYXJ0aWNsZTEucG9zaXRpb24uc3VidHJhY3QoY29sbGlzaW9uTm9ybWFsKTtcclxuICAgICAgICAgICAgcGFydGljbGUyLnBvc2l0aW9uLmFkZChjb2xsaXNpb25Ob3JtYWwpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2cobnVtYmVyT2ZDb2xsaXNpb25zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc29sdmVDb2xsaXNpb25zKCkge1xyXG4gIHZhciBudW1iZXJPZkNvbGxpc2lvbnMgPSAwO1xyXG5cclxuXHJcbiAgbGV0IHRlbXBDb2xsaXNpb25EaXJlY3Rpb24gPSBuZXcgVmVjMkQoMCwgMCk7XHJcbiAgbGV0IHNxdWFyZWREaXN0YW5jZSA9IDA7XHJcbiAgbGV0IHJhZGlpU3VtID0gMDtcclxuICBsZXQgc3F1YXJlZFJhZGlpU3VtID0gMDtcclxuXHJcbiAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlMSkgPT4ge1xyXG4gICAgY29uc3QgbmVpZ2hib3JpbmdQYXJ0aWNsZXMgPSBwYXJ0aWNsZTEuZ2V0TmVpZ2hib3JpbmdQYXJ0aWNsZXMoKTtcclxuICAgIG5laWdoYm9yaW5nUGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlMikgPT4ge1xyXG4gICAgICBpZiAocGFydGljbGUxID09PSBwYXJ0aWNsZTIpIHJldHVybjtcclxuXHJcbiAgICAgIHRlbXBDb2xsaXNpb25EaXJlY3Rpb24uc2V0KHBhcnRpY2xlMS5wb3NpdGlvbikuc3VidHJhY3QocGFydGljbGUyLnBvc2l0aW9uKTtcclxuICAgICAgc3F1YXJlZERpc3RhbmNlID0gdGVtcENvbGxpc2lvbkRpcmVjdGlvbi5zcXVhcmVkTGVuZ3RoKCk7XHJcbiAgICAgIFxyXG4gICAgICByYWRpaVN1bSA9IHBhcnRpY2xlMS5yYWRpdXMgKyBwYXJ0aWNsZTIucmFkaXVzO1xyXG4gICAgICBzcXVhcmVkUmFkaWlTdW0gPSByYWRpaVN1bSAqIHJhZGlpU3VtO1xyXG5cclxuICAgICAgaWYgKHNxdWFyZWREaXN0YW5jZSA8IHNxdWFyZWRSYWRpaVN1bSAmJiBzcXVhcmVkRGlzdGFuY2UgIT0gMCkge1xyXG4gICAgICAgIG51bWJlck9mQ29sbGlzaW9ucysrO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KHNxdWFyZWREaXN0YW5jZSk7XHJcbiAgICAgICAgICB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLmRpdmlkZShkaXN0YW5jZSk7XHJcbiAgICAgIFxyXG4gICAgICAgICAgbGV0IGRlbHRhID0gcmFkaWlTdW0gLSBkaXN0YW5jZTtcclxuICAgICAgICAgIHRlbXBDb2xsaXNpb25EaXJlY3Rpb24ubXVsdGlwbHkoZGVsdGEgKiAwLjUpO1xyXG4gICAgICBcclxuICAgICAgICAgIHBhcnRpY2xlMS5wb3NpdGlvbi5hZGQodGVtcENvbGxpc2lvbkRpcmVjdGlvbik7XHJcbiAgICAgICAgICBwYXJ0aWNsZTIucG9zaXRpb24uc3VidHJhY3QodGVtcENvbGxpc2lvbkRpcmVjdGlvbik7XHJcbiAgICAgICAgICB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLm11bHRpcGx5KDYpXHJcbiAgICAgICAgICBwYXJ0aWNsZTEudmVsb2NpdHkuYWRkKHRlbXBDb2xsaXNpb25EaXJlY3Rpb24pLmFkZChuZXcgVmVjMkQgKCgxIC0gTWF0aC5yYW5kb20oKSoyKS8xMDAwLCAoMSAtIE1hdGgucmFuZG9tKCkqMikvMTAwMCkpO1xyXG4gICAgICAgICAgcGFydGljbGUyLnZlbG9jaXR5LnN1YnRyYWN0KHRlbXBDb2xsaXNpb25EaXJlY3Rpb24pLmFkZChuZXcgVmVjMkQgKCgxIC0gTWF0aC5yYW5kb20oKSoyKS8xMDAwLCAoMSAtIE1hdGgucmFuZG9tKCkqMikvMTAwMCkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuICAvLyBjb25zb2xlLmxvZyhudW1iZXJPZkNvbGxpc2lvbnMpO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgVmVjMkQgZnJvbSBcIi4vVmVjMkRcIjtcclxuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHBhcnRpY2xlRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vc2hhZGVycy9wYXJ0aWNsZUZyYWdtZW50U2hhZGVyLmZyYWdcIjtcclxuaW1wb3J0IHBhcnRpY2xlVmVydGV4U2hhZGVyIGZyb20gXCIuL3NoYWRlcnMvcGFydGljbGVWZXJ0ZXhTaGFkZXIudmVydFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVQcm9ncmFtLCBjcmVhdGVTaGFkZXIsIHJlc2l6ZUNhbnZhc1RvRGlzcGxheVNpemUgfSBmcm9tIFwiLi9TaGFkZXJIZWxwZXJcIjtcclxuaW1wb3J0IEF0dHJhY3RvciBmcm9tIFwiLi9BdHRyYWN0b3JcIjtcclxuaW1wb3J0IHsgYmFja2dyb3VuZENhbnZhc0N0eCwgZm9yZWdyb3VuZENhbnZhcywgZm9yZWdyb3VuZENhbnZhc0N0eCB9IGZyb20gXCIuL0NhbnZhc01hbmFnZXJcIjtcclxuaW1wb3J0IHsgYXBwbHlBdHRyYWN0b3JGb3JjZXMsIGFwcGx5Q29uc3RyYWludCB9IGZyb20gXCIuL1BoeXNpY3NFbmdpbmVcIjtcclxuaW1wb3J0IHsgSW5wdXRIYW5kbGVyIH0gZnJvbSBcIi4vSW5wdXRIYW5kbGVyXCI7XHJcbmltcG9ydCB7IGdyaWQsIHBhcnRpY2xlcyB9IGZyb20gXCIuL3NjcmlwdFwiO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSBcIi4vUGFydGljbGVcIjtcclxuaW1wb3J0IHsgZ2V0QXZlcmFnZUZyYW1lVGltZSB9IGZyb20gXCIuL1VJTWFuYWdlclwiO1xyXG5cclxuXHJcbnZhciB3ZWJnbENhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3ZWJnbC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxudmFyIGdsID0gd2ViZ2xDYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpO1xyXG53ZWJnbENhbnZhcyEud2lkdGggPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxud2ViZ2xDYW52YXMhLmhlaWdodCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuXHJcbmNvbnN0IGlucHV0SGFuZGxlciA9IElucHV0SGFuZGxlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuaWYgKCFnbCkge1xyXG4gIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5pdGlhbGl6ZSBXZWJHTC4gWW91ciBicm93c2VyIG1heSBub3Qgc3VwcG9ydCBpdC5cIik7XHJcbn1cclxuXHJcbi8vZW5hbGJpbmcgYmxlbmRpbmcgZm9yIHByb3BlciBhbHBoYSBvbiB0aGUgcGFydGljbGVzXHJcbmdsLmVuYWJsZShnbC5CTEVORCk7XHJcbmdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG5cclxuLy9jb21waWxpbmcgdGhlIHNoYWRlcnMgd2l0aCBhIGhlbHBlciBmdW5jdGlvblxyXG52YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBwYXJ0aWNsZVZlcnRleFNoYWRlcik7XHJcbnZhciBmcmFnbWVudFNoYWRlciA9IGNyZWF0ZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBwYXJ0aWNsZUZyYWdtZW50U2hhZGVyKTtcclxuXHJcbi8vY3JlYXRpbmcgYSBXZWJHTCBwcm9ncmFtIGFuZCBhdHRhY2hpbmcgdGhlIHNoYWRlcnMgdG8gaXQgd2l0aCBhIGhlbHBlciBmdW5jdGlvblxyXG52YXIgcHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW0oZ2wsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuLy9sb29raW5nIHVwIHVuaWZvcm0gbG9jYXRpb24gYW5kIHdoZXJlIHRoZSB2ZXJ0ZXggZGF0YSBuZWVkcyB0byBnb1xyXG52YXIgcG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcclxudmFyIHJlc29sdXRpb25Vbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJ1X3Jlc29sdXRpb25cIik7XHJcbnZhciBjb2xvclVuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfY29sb3JcIik7XHJcbnZhciB0cmFuc2xhdGlvbkxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV90cmFuc2xhdGlvblwiKTtcclxudmFyIHJhZGl1c1VuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfcmFkaXVzXCIpO1xyXG52YXIgb3V0bGluZVVuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfb3V0bGluZV9ibGFja1wiKTtcclxudmFyIHBvc2l0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbmdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkJ1ZmZlcik7XHJcblxyXG5mdW5jdGlvbiBzZXRSZWN0YW5nbGUoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgeDpudW1iZXIsIHk6bnVtYmVyLCB3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpIHtcclxuICB2YXIgeDEgPSB4IC0gd2lkdGggLyAyO1xyXG4gIHZhciB4MiA9IHggKyB3aWR0aCAvIDI7XHJcbiAgdmFyIHkxID0geSAtIGhlaWdodCAvIDI7XHJcbiAgdmFyIHkyID0geSArIGhlaWdodCAvIDI7XHJcbiBcclxuICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgeDEsIHkxLFxyXG4gICAgIHgyLCB5MSxcclxuICAgICB4MSwgeTIsXHJcbiAgICAgeDEsIHkyLFxyXG4gICAgIHgyLCB5MSxcclxuICAgICB4MiwgeTJdKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0R2VvbWV0cnkoKXtcclxuICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgIHNldFJlY3RhbmdsZShcclxuICAgICAgZ2wsIDAsIDAsIENvbmZpZy5nZXRHcmlkU2l6ZSgpLCBDb25maWcuZ2V0R3JpZFNpemUoKSk7XHJcbiAgfSk7XHJcblxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3UGFydGljbGVzKCkge1xyXG4gIHJlc2l6ZUNhbnZhc1RvRGlzcGxheVNpemUoZ2wuY2FudmFzKTtcclxuXHJcbiAgLy8gVGVsbCBXZWJHTCBob3cgdG8gY29udmVydCBmcm9tIGNsaXAgc3BhY2UgdG8gcGl4ZWxzXHJcbiAgZ2wudmlld3BvcnQoMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgLy8gQ2xlYXIgdGhlIGNhbnZhc1xyXG4gIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7IC8vIENsZWFyIHRvIHRyYW5zcGFyZW50IGJsYWNrXHJcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gIC8vIFRlbGwgaXQgdG8gdXNlIHByb2dyYW0gKHBhaXIgb2Ygc2hhZGVycylcclxuICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uKTtcclxuXHJcbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHBvc2l0aW9uQnVmZmVyKTtcclxuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgdmFyIG91dGxpbmVDb2xvciA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoJy0taXMtb3V0bGluZS1kYXJrJykpO1xyXG4gIHZhciByZXNvbHV0aW9uID0gW2dsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodF1cclxuICAvLyBEcmF3IHRoZSByZWN0YW5nbGUuXHJcbiAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGdsLnVuaWZvcm0yZnYocmVzb2x1dGlvblVuaWZvcm1Mb2NhdGlvbiwgcmVzb2x1dGlvbik7XHJcbiAgICAgIGdsLnVuaWZvcm0yZih0cmFuc2xhdGlvbkxvY2F0aW9uLCBwYXJ0aWNsZS5wb3NpdGlvbi54LCBwYXJ0aWNsZS5wb3NpdGlvbi55KTtcclxuICAgICAgZ2wudW5pZm9ybTNmKGNvbG9yVW5pZm9ybUxvY2F0aW9uLCBwYXJ0aWNsZS5jb2xvci5yLHBhcnRpY2xlLmNvbG9yLmcsIHBhcnRpY2xlLmNvbG9yLmIpO1xyXG4gICAgICBnbC51bmlmb3JtMWYocmFkaXVzVW5pZm9ybUxvY2F0aW9uLCBwYXJ0aWNsZS5yYWRpdXMpXHJcbiAgICAgIGdsLnVuaWZvcm0xZihvdXRsaW5lVW5pZm9ybUxvY2F0aW9uLCBvdXRsaW5lQ29sb3IpO1xyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgNik7XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3QXR0cmFjdG9ycyhhdHRyYWN0b3JzOiBBdHRyYWN0b3JbXSkge1xyXG4gIGF0dHJhY3RvcnMuZm9yRWFjaCgoYXR0cmFjdG9yKSA9PiB7XHJcbiAgICBhdHRyYWN0b3IuYW5pbWF0ZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdEb3R0ZWRMaW5lKGZyb206IFZlYzJELCB0bzogVmVjMkQsIHJhZGl1czogbnVtYmVyID0gNSwgZG90Q291bnQ6IG51bWJlciA9IDgpIHtcclxuICBpZiAoaW5wdXRIYW5kbGVyLmNsaWNrZWQgJiYgZnJvbS54ICE9IHRvLnggJiYgZnJvbS55ICE9IHRvLnkpIHtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0gZnJvbS5kaWZmZXJlbmNlKHRvKTtcclxuICAgIGRyYXdQcmVkaWN0ZWRQYXRoKGZyb20uY2xvbmUoKSwgZGlzdGFuY2UuY2xvbmUoKS5tdWx0aXBseSgwLjEpKVxyXG4gICAgZGlzdGFuY2UuZGl2aWRlKGRvdENvdW50KTtcclxuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIodG8ueSAtIGZyb20ueSwgdG8ueCAtIGZyb20ueCk7XHJcbiAgICB2YXIgbmV3X3RvID0gbmV3IFZlYzJEKHRvLngsIHRvLnkpO1xyXG5cclxuICAgIG5ld190by54IC09IE1hdGguY29zKGFuZ2xlKTtcclxuICAgIG5ld190by55IC09IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBkb3RDb3VudDsgaSsrKSB7XHJcbiAgICAgIHZhciBkb3RYID0gZnJvbS54IC0gZGlzdGFuY2UueCAqIGk7XHJcbiAgICAgIHZhciBkb3RZID0gZnJvbS55IC0gZGlzdGFuY2UueSAqIGk7XHJcbiAgICAgIGRyYXdEb3QoZG90WCwgZG90WSwgcmFkaXVzLCAyNTUpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3UHJlZGljdGVkUGF0aChzdGFydFBvczogVmVjMkQsIEFjY2VsZXJhdGlvblZlY3RvcjogVmVjMkQpIHtcclxuICBsZXQgZG90Q291bnQgPSAxMjc7XHJcbiAgbGV0IHByZWRpY3RlZERvdCA9IG5ldyBQYXJ0aWNsZShzdGFydFBvcywgQ29uZmlnLmdldEdyaWRTaXplKCkvMiwgQWNjZWxlcmF0aW9uVmVjdG9yLCB7cjowLCBnOjAsIGI6MH0sZ3JpZClcclxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBkb3RDb3VudDsgaSsrKSB7XHJcblxyXG4gICAgcHJlZGljdGVkRG90LmFjY2VsZXJhdGUoQ29uZmlnLmdldEdyYXZpdHlEaXJlY3Rpb24oKSk7XHJcbiAgICBhcHBseUNvbnN0cmFpbnQocHJlZGljdGVkRG90KTtcclxuICAgIGFwcGx5QXR0cmFjdG9yRm9yY2VzKHByZWRpY3RlZERvdCk7XHJcbiAgICBwcmVkaWN0ZWREb3QudXBkYXRlUG9zaXRpb24oMC41KTtcclxuICAgIGlmIChpICUgMyA9PSAwKSB7XHJcbiAgICAgIGRyYXdEb3QocHJlZGljdGVkRG90LnBvc2l0aW9uLngsIHByZWRpY3RlZERvdC5wb3NpdGlvbi55LCA1LCAyNTUgLSBpKjIpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RG90KGRvdFg6IG51bWJlciwgZG90WTogbnVtYmVyLCBkb3RTaXplOiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcikge1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgZm9yZWdyb3VuZENhbnZhc0N0eC5hcmMoXHJcbiAgICBkb3RYLFxyXG4gICAgZG90WSxcclxuICAgIGRvdFNpemUsXHJcbiAgICAwLFxyXG4gICAgMiAqIE1hdGguUEksXHJcbiAgICBmYWxzZVxyXG4gICk7XHJcblxyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gYHJnYmEoMjEwLCAyMTAsIDIxMCwgJHtvcGFjaXR5IC8gMjU1fSlgO1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbCgpO1xyXG5cclxuICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0xhc3NvKGxpbmVXaWR0aDogbnVtYmVyID0gMykge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYXJjKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24ueCwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbi55LCBDb25maWcuZ2V0RmllbGRTaXplKCksIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2VTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWdyaWQtY29sb3InKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdBcnJvdyhmcm9tOiBWZWMyRCwgdG86IFZlYzJEKSB7XHJcbiAgaWYgKGlucHV0SGFuZGxlci5jbGlja2VkICYmIGZyb20ueCAhPSB0by54ICYmIGZyb20ueSAhPSB0by55KSB7XHJcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHRvLnkgLSBmcm9tLnksIHRvLnggLSBmcm9tLngpO1xyXG4gICAgY29uc3Qgd2lkdGggPSAxMDtcclxuICAgIHZhciBoZWFkbGVuID0gMTA7XHJcbiAgICB2YXIgbmV3X3RvID0gbmV3IFZlYzJEKHRvLngsIHRvLnkpO1xyXG4gICAgLy8gVGhpcyBtYWtlcyBpdCBzbyB0aGUgZW5kIG9mIHRoZSBhcnJvdyBoZWFkIGlzIGxvY2F0ZWQgYXQgdG94LCB0b3ksIGRvbid0IGFzayB3aGVyZSAxLjE1IGNvbWVzIGZyb21cclxuICAgIG5ld190by54IC09IE1hdGguY29zKGFuZ2xlKSAqICgod2lkdGggKiAxLjE1KSk7XHJcbiAgICBuZXdfdG8ueSAtPSBNYXRoLnNpbihhbmdsZSkgKiAoKHdpZHRoICogMS4xNSkpO1xyXG5cclxuXHJcblxyXG4gICAgLy9zdGFydGluZyBwYXRoIG9mIHRoZSBhcnJvdyBmcm9tIHRoZSBzdGFydCBzcXVhcmUgdG8gdGhlIGVuZCBzcXVhcmUgYW5kIGRyYXdpbmcgdGhlIHN0cm9rZVxyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubW92ZVRvKGZyb20ueCwgZnJvbS55KTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVRvKG5ld190by54LCBuZXdfdG8ueSk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvL3N0YXJ0aW5nIGEgbmV3IHBhdGggZnJvbSB0aGUgaGVhZCBvZiB0aGUgYXJyb3cgdG8gb25lIG9mIHRoZSBzaWRlcyBvZiB0aGUgcG9pbnRcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4Lm1vdmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL3BhdGggZnJvbSB0aGUgc2lkZSBwb2ludCBvZiB0aGUgYXJyb3csIHRvIHRoZSBvdGhlciBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRsZW4gKiBNYXRoLmNvcyhhbmdsZSArIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkbGVuICogTWF0aC5zaW4oYW5nbGUgKyBNYXRoLlBJIC8gNykpO1xyXG5cclxuICAgIC8vcGF0aCBmcm9tIHRoZSBzaWRlIHBvaW50IGJhY2sgdG8gdGhlIHRpcCBvZiB0aGUgYXJyb3csIGFuZCB0aGVuIGFnYWluIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL2RyYXdzIHRoZSBwYXRocyBjcmVhdGVkIGFib3ZlXHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmZpbGwoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguY2xvc2VQYXRoKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0N1cnNvckZ1bmN0aW9uKCkge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG5zd2l0Y2ggKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSkge1xyXG4gIGNhc2UgJ2ZpZWxkJzpcclxuICAgIGRyYXdMYXNzbygpO1xyXG4gICAgYnJlYWs7XHJcbiAgY2FzZSAnZ3Jhdml0eSc6XHJcbiAgICBkcmF3QXJyb3coaW5wdXRIYW5kbGVyLmNsaWNrU3RhcnRQb3NpdGlvbiwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbilcclxuICAgIGJyZWFrO1xyXG4gIGNhc2UgJ3Rocm93JzpcclxuICAgIGRyYXdEb3R0ZWRMaW5lKGlucHV0SGFuZGxlci5jbGlja1N0YXJ0UG9zaXRpb24sIGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24pXHJcbiAgICBicmVhaztcclxufVxyXG4gIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFkZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdHlwZTogYW55LCBzb3VyY2U6IGFueSkge1xyXG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICB2YXIgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlciwgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyKSB7XHJcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdmFyIHN1Y2Nlc3MgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBwcm9ncmFtO1xyXG4gICAgfVxyXG4gICBcclxuICAgIGNvbnNvbGUubG9nKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcclxuICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZShjYW52YXM6YW55KSB7XHJcbiAgICAvLyBMb29rdXAgdGhlIHNpemUgdGhlIGJyb3dzZXIgaXMgZGlzcGxheWluZyB0aGUgY2FudmFzIGluIENTUyBwaXhlbHMuXHJcbiAgICBjb25zdCBkaXNwbGF5V2lkdGggID0gY2FudmFzLmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgZGlzcGxheUhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbnZhcyBpcyBub3QgdGhlIHNhbWUgc2l6ZS5cclxuICAgIGNvbnN0IG5lZWRSZXNpemUgPSBjYW52YXMud2lkdGggICE9PSBkaXNwbGF5V2lkdGggfHxcclxuICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ICE9PSBkaXNwbGF5SGVpZ2h0O1xyXG4gICBcclxuICAgIGlmIChuZWVkUmVzaXplKSB7XHJcbiAgICAgIC8vIE1ha2UgdGhlIGNhbnZhcyB0aGUgc2FtZSBzaXplXHJcbiAgICAgIGNhbnZhcy53aWR0aCAgPSBkaXNwbGF5V2lkdGg7XHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xyXG4gICAgfVxyXG4gICBcclxuICAgIHJldHVybiBuZWVkUmVzaXplO1xyXG5cclxuICB9IiwiaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuXHJcbmxldCBmcHNDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbmZwc0NvdW50ZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5mcHNDb3VudGVyLnN0eWxlLnRvcCA9ICcxMHB4JztcclxuZnBzQ291bnRlci5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xyXG5cclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmcHNDb3VudGVyKTtcclxuXHJcbmV4cG9ydCB2YXIgZnBzID0gNjA7XHJcbmV4cG9ydCB2YXIgZnJhbWVUaW1lczpudW1iZXJbXSA9IFtdO1xyXG5jb25zdCBtYXhGcmFtZXMgPSAxMDA7IFxyXG5cclxubGV0IGxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVUkoKSB7XHJcbiAgICBsZXQgYXZlcmFnZWRGUFMgPSBjYWxjdWxhdGVGUFMoKTtcclxuICAgIGZwc0NvdW50ZXIuaW5uZXJUZXh0ID0gYEZQUzogJHtNYXRoLnJvdW5kKGF2ZXJhZ2VkRlBTKX1gO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVGUFMoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgY29uc3QgdGltZURpZmYgPSBjdXJyZW50VGltZSAtIGxhc3RUaW1lO1xyXG4gICAgZnJhbWVUaW1lcy5wdXNoKHRpbWVEaWZmKTtcclxuXHJcbiAgICBpZiAoZnJhbWVUaW1lcy5sZW5ndGggPiBtYXhGcmFtZXMpIHtcclxuICAgICAgICBmcmFtZVRpbWVzLnNoaWZ0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0IGF2ZXJhZ2VGUFMgPSBmcmFtZVRpbWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gZnJhbWVUaW1lcy5sZW5ndGg7XHJcblxyXG4gICAgbGFzdFRpbWUgPSBjdXJyZW50VGltZTtcclxuXHJcbiAgICByZXR1cm4gMTAwMCAvIGF2ZXJhZ2VGUFM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmVyYWdlRnJhbWVUaW1lKCl7XHJcbiAgICByZXR1cm4gZnJhbWVUaW1lcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIGZyYW1lVGltZXMubGVuZ3RoO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBnOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBiOiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbiAgfVxyXG4gICIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlYzJEIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBhZGQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ICs9IG90aGVyLng7XHJcbiAgICAgIHRoaXMueSArPSBvdGhlci55O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ID0gb3RoZXIueDtcclxuICAgICAgdGhpcy55ID0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN1YnRyYWN0KG90aGVyOiBWZWMyRCl7XHJcbiAgICAgIHRoaXMueCAtPSBvdGhlci54O1xyXG4gICAgICB0aGlzLnkgLT0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBtdWx0aXBseShzY2FsYXI6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnggKj0gc2NhbGFyO1xyXG4gICAgICB0aGlzLnkgKj0gc2NhbGFyO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICBcclxuICAgIGRpdmlkZShzY2FsYXI6IG51bWJlcil7XHJcbiAgICAgIHRoaXMueCAvPSBzY2FsYXI7XHJcbiAgICAgIHRoaXMueSAvPSBzY2FsYXI7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZG90KHZlYzogVmVjMkQpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICogdmVjLnggKyB0aGlzLnkgKiB2ZWMueTtcclxuICAgIH1cclxuXHJcbiAgICBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNxdWFyZWRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBWZWMyRHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMyRCh0aGlzLngsIHRoaXMueSlcclxuICAgIH1cclxuXHJcbiAgICBkaWZmZXJlbmNlKG90aGVyOiBWZWMyRCk6IFZlYzJEe1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzJEKHRoaXMueCAtIG90aGVyLngsIHRoaXMueSAtIG90aGVyLnkpXHJcbiAgICB9XHJcblxyXG4gICAgc3F1YXJlZERpc3RhbmNlVG8ob3RoZXI6VmVjMkQpe1xyXG4gICAgICByZXR1cm4gKHRoaXMueCAtIG90aGVyLngpKioyICsgKHRoaXMueSAtIG90aGVyLnkpKioyO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBBdHRyYWN0b3IgZnJvbSBcIi4vQXR0cmFjdG9yXCI7XHJcbmltcG9ydCB7IGRyYXdBcnJvdywgZHJhd0xhc3NvLCBkcmF3UGFydGljbGVzLCBkcmF3RG90dGVkTGluZSwgc2V0R2VvbWV0cnksIGRyYXdDdXJzb3JGdW5jdGlvbiB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IGNsb3NlTWVudSwgdXBkYXRlUG9pbnRlckZ1bmN0aW9uIH0gZnJvbSBcIi4vTWVudU1hbmFnZXJcIjtcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gXCIuL1BhcnRpY2xlXCI7XHJcbmltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5pbXBvcnQgeyBmcHMsIGdldEF2ZXJhZ2VGcmFtZVRpbWUsIHVwZGF0ZVVJIH0gZnJvbSBcIi4vVUlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGJhY2tncm91bmRDYW52YXMsIGNsZWFyQ2FudmFzLCBmb3JlZ3JvdW5kQ2FudmFzIH0gZnJvbSBcIi4vQ2FudmFzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyB0aWNrIH0gZnJvbSBcIi4vUGh5c2ljc0VuZ2luZVwiO1xyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIi4vR3JpZFwiO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Db2xvciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcblxyXG5leHBvcnQgdmFyIHBhcnRpY2xlczogUGFydGljbGVbXSA9IFtdO1xyXG5leHBvcnQgdmFyIGF0dHJhY3RvcnM6IEF0dHJhY3RvcltdID0gW107XHJcblxyXG5sZXQgZnJhbWVDb3VudCA9IDA7XHJcbmV4cG9ydCBsZXQgZ3JpZCA9IG5ldyBHcmlkKGJhY2tncm91bmRDYW52YXMpO1xyXG5mdW5jdGlvbiBhbmltYXRlKCkge1xyXG4gIGxldCBmcmFtZVRpbWUgPSBnZXRBdmVyYWdlRnJhbWVUaW1lKClcclxuICB0aWNrKGZyYW1lVGltZS8yMCk7XHJcblxyXG4gIGNsZWFyQ2FudmFzKCk7XHJcbiAgZHJhd1BhcnRpY2xlcygpO1xyXG4gIGRyYXdDdXJzb3JGdW5jdGlvbigpO1xyXG4gIC8vIGRyYXdHcmlkKCk7XHJcbiAgLy8gZHJhd0F0dHJhY3RvcnMoKTtcclxuICB1cGRhdGVVSSgpO1xyXG5cclxuICBpZiAoZnJhbWVDb3VudCAlIDMgPT09IDAgJiYgcGFydGljbGVzLmxlbmd0aCA8IENvbmZpZy5nZXRQYXJ0aWNsZU51bWJlcigpICYmIGZyYW1lQ291bnQgPiAxMjApIHtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAyMDApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMjcgLCAtMTIpLCBnZXRSYW5kb21Db2xvcigpLCBncmlkKSk7XHJcbiAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUobmV3IFZlYzJEKDIwMCwgMjYwKSwgZ3JpZC5waXhlbFNpemUvMiwgbmV3IFZlYzJEKDI5ICwgLTEyKSwgZ2V0UmFuZG9tQ29sb3IoKSwgZ3JpZCkpO1xyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKG5ldyBWZWMyRCgyMDAsIDMyMCksIGdyaWQucGl4ZWxTaXplLzIsIG5ldyBWZWMyRCgyNCAsIC0xMiksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAzODApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMjUgLCAtMTIpLCBnZXRSYW5kb21Db2xvcigpLCBncmlkKSk7XHJcbiAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUobmV3IFZlYzJEKDIwMCwgNDQwKSwgZ3JpZC5waXhlbFNpemUvMiwgbmV3IFZlYzJEKDI0LCAtMTIgKSwgZ2V0UmFuZG9tQ29sb3IoKSwgZ3JpZCkpO1xyXG4gICAgc2V0R2VvbWV0cnkoKTtcclxuICB9XHJcbiAgZnJhbWVDb3VudCsrO1xyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxufVxyXG5cclxuZ3JpZC5kcmF3KCk7XHJcbnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9zY3JpcHQudHNcIik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9NZW51TWFuYWdlci50c1wiKTtcbiJdLCJuYW1lcyI6WyJmb3JlZ3JvdW5kQ2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImJhY2tncm91bmRDYW52YXMiLCJ3ZWJnbENhbnZhcyIsIndpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGVpZ2h0IiwiZm9yZWdyb3VuZENhbnZhc0N0eCIsImdldENvbnRleHQiLCJiYWNrZ3JvdW5kQ2FudmFzQ3R4IiwiY2xlYXJDYW52YXMiLCJjbGVhclJlY3QiLCJ1cGRhdGVDYW52YXNTaXplIiwiZ3JpZCIsImNhbnZhcyIsInVwZGF0ZVNpemUiLCJkcmF3Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImZpZWxkU3RyZW5ndGgiLCJwaHlzaWNzU3Vic3RlcHNBbW91bnQiLCJncmF2aXR5RGlyZWN0aW9uIiwiZmllbGRTaXplIiwicGFydGljbGVOdW1iZXIiLCJwb2ludGVyRnVuY3Rpb24iLCJncmlkU2l6ZSIsImd5cm9FbmFibGVkIiwiZ2V0R3Jhdml0eURpcmVjdGlvbiIsImdldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCIsImdldEZpZWxkU3RyZW5ndGgiLCJnZXRGaWVsZFNpemUiLCJnZXRQYXJ0aWNsZU51bWJlciIsImdldFBvaW50ZXJGdW5jdGlvbiIsImdldEdyaWRTaXplIiwiaXNHeXJvRW5hYmxlZCIsInNldEdyYXZpdHlEaXJlY3Rpb24iLCJuZXdHcmF2aXR5RGlyZWN0aW9uIiwic2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50IiwibmV3QW1vdW50Iiwic2V0RmllbGRTdHJlbmd0aCIsIm5ld2ZpZWxkU3RyZW5ndGgiLCJzZXRGaWVsZFNpemUiLCJuZXdmaWVsZFNpemUiLCJzZXRQYXJ0aWNsZU51bWJlciIsIm5ld1BhcnRpY2xlTnVtYmVyIiwic2V0UG9pbnRlckZ1bmN0aW9uIiwibmV3UG9pbnRlckZ1bmN0aW9uIiwic2V0SXNHeXJvRW5hYmxlZCIsIm5ld0lzR3lyb0VuYWJsZWQiLCJncmlkUGl4ZWxTaXplIiwidGhpcyIsInBpeGVsU2l6ZSIsImNvbHVtbnMiLCJNYXRoIiwiY2VpbCIsInJvd3MiLCJjZWxscyIsImluaXRpYWxpemUiLCJjYW52YXNDdHgiLCJpIiwiaiIsInJlbW92ZUFsbCIsInB1dCIsInBhcnRpY2xlIiwiY29sdW1uIiwiZmxvb3IiLCJwb3NpdGlvbiIsIngiLCJyb3ciLCJ5IiwibGVuZ3RoIiwicHVzaCIsInN0cm9rZVN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRvY3VtZW50RWxlbWVudCIsImdldFByb3BlcnR5VmFsdWUiLCJsaW5lV2lkdGgiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJjbGlja2VkIiwicG9pbnRlclBvc2l0aW9uIiwiY2xpY2tTdGFydFBvc2l0aW9uIiwiZ2V0SW5zdGFuY2UiLCJJbnB1dEhhbmRsZXIiLCJpbnN0YW5jZSIsImluaXRpYWxpemVFdmVudExpc3RlbmVycyIsIm1haW5fYm9keSIsImhhbmRsZU1vdXNlRG93biIsImJpbmQiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW92ZUV2ZW50IiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjbG9zZU1lbnUiLCJNb3VzZUV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJUb3VjaEV2ZW50IiwidG91Y2hlcyIsImxhdW5jaF9kaXIiLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJtdWx0aXBseSIsInBhcnRpY2xlcyIsImdldFJhbmRvbUNvbG9yIiwibWVudUJ1dHRvbiIsIm1lbnVFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvcGVuTWVudSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwiY3Vyc29yIiwicXVlcnlTZWxlY3RvciIsInRyYW5zZm9ybSIsImZvckVhY2giLCJlbGVtZW50Iiwic2V0VGltZW91dCIsImRpc3BsYXkiLCJuZXdUaGVtZSIsInJvb3RFbGVtIiwiZmllbGRTaXplU2xpZGVyIiwiZmllbGRTdHJlbmd0aFNsaWRlciIsImdyYXZpdHlTdHJlbmd0aFNsaWRlciIsInN1YnN0ZXBzQW1vdW50RW50cnlCb3giLCJwYXJ0aWNsZXNBbW91bnRFbnRyeUJveCIsImd5cm9FbmFibGVkQ2hlY2tCb3giLCJ0b2dnbGVHeXJvIiwiY2hlY2tlZCIsImhhbmRsZU1vdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5IiwidXBkYXRlUG9pbnRlckZ1bmN0aW9uIiwicmFkaW9CdXR0b25zIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJ2YWx1ZSIsInNldEdyYXZpdHlTdHJlbmd0aCIsInJhZGlvQnV0dG9uIiwib25pbnB1dCIsInBhcnNlSW50IiwiRGV2aWNlTW90aW9uRXZlbnQiLCJyZXF1ZXN0UGVybWlzc2lvbiIsInRoZW4iLCJyZXNwb25zZSIsImNhdGNoIiwiY29uc29sZSIsImVycm9yIiwiZGlmZiIsInBvcCIsInBvcyIsInJhZGl1cyIsInZlbG9jaXR5IiwiY29sb3IiLCJhY2NlbGVyYXRpb24iLCJjZWxsIiwidXBkYXRlUG9zaXRpb24iLCJkdCIsIm1vdmVEZWx0YSIsImFkZCIsInVwZGF0ZUNlbGwiLCJhY2NlbGVyYXRlIiwiYWNjIiwiZ2V0TmVpZ2hib3JpbmdQYXJ0aWNsZXMiLCJuZWlnaGJvcmluZ1BhcnRpY2xlcyIsImlucHV0SGFuZGxlciIsInByZXZpb3VzU2NyZWVuWCIsInByZXZpb3VzU2NyZWVuWSIsInVwZGF0ZVBvc2l0aW9ucyIsIm1vdmVBbGxQYXJ0aWNsZXMiLCJ2ZWMiLCJhcHBseUZpZWxkIiwiZmllbGRQb3MiLCJwdWxsRGlyZWN0aW9uIiwiZGlzdGFuY2UiLCJkaXZpZGUiLCJhcHBseUF0dHJhY3RvckZvcmNlc1RvQWxsIiwiYXBwbHlBdHRyYWN0b3JGb3JjZXMiLCJ0aWNrIiwic3ViX2R0IiwiZGVsdGFYIiwic2NyZWVuWCIsImRlbHRhWSIsInNjcmVlblkiLCJzY3JlZW5WZWxvY2l0eSIsImFwcGx5Q29uc3RyYWludCIsInNvbHZlQ29sbGlzaW9ucyIsImFicyIsImF0dHJhY3RvcnMiLCJhdHRyYWN0b3IiLCJmb3JjZSIsInRlbXBDb2xsaXNpb25EaXJlY3Rpb24iLCJzcXVhcmVkRGlzdGFuY2UiLCJyYWRpaVN1bSIsInBhcnRpY2xlMSIsInBhcnRpY2xlMiIsInNldCIsInN1YnRyYWN0Iiwic3F1YXJlZExlbmd0aCIsInNxcnQiLCJkZWx0YSIsInJhbmRvbSIsImdsIiwiZW5hYmxlIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImZyYWdtZW50U2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwicHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJwb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJyZXNvbHV0aW9uVW5pZm9ybUxvY2F0aW9uIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiY29sb3JVbmlmb3JtTG9jYXRpb24iLCJ0cmFuc2xhdGlvbkxvY2F0aW9uIiwicmFkaXVzVW5pZm9ybUxvY2F0aW9uIiwib3V0bGluZVVuaWZvcm1Mb2NhdGlvbiIsInBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwic2V0R2VvbWV0cnkiLCJ4MSIsIngyIiwieTEiLCJ5MiIsImJ1ZmZlckRhdGEiLCJBUlJBWV9CVUZGRVIiLCJGbG9hdDMyQXJyYXkiLCJTVEFUSUNfRFJBVyIsInNldFJlY3RhbmdsZSIsImRyYXdQYXJ0aWNsZXMiLCJyZXNpemVDYW52YXNUb0Rpc3BsYXlTaXplIiwidmlld3BvcnQiLCJjbGVhckNvbG9yIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwidXNlUHJvZ3JhbSIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYmluZEJ1ZmZlciIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsIm91dGxpbmVDb2xvciIsInBhcnNlRmxvYXQiLCJyZXNvbHV0aW9uIiwidW5pZm9ybTJmdiIsInVuaWZvcm0yZiIsInVuaWZvcm0zZiIsInIiLCJnIiwiYiIsInVuaWZvcm0xZiIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJkcmF3RG90dGVkTGluZSIsImZyb20iLCJ0byIsImRvdENvdW50IiwiZHJhd1ByZWRpY3RlZFBhdGgiLCJhbmdsZSIsImF0YW4yIiwibmV3X3RvIiwiY29zIiwic2luIiwiZHJhd0RvdCIsInN0YXJ0UG9zIiwiQWNjZWxlcmF0aW9uVmVjdG9yIiwicHJlZGljdGVkRG90IiwiZG90WCIsImRvdFkiLCJkb3RTaXplIiwib3BhY2l0eSIsImFyYyIsIlBJIiwiZmlsbFN0eWxlIiwiZmlsbCIsImNsb3NlUGF0aCIsImRyYXdMYXNzbyIsImRyYXdBcnJvdyIsImhlYWRsZW4iLCJkcmF3Q3Vyc29yRnVuY3Rpb24iLCJ0eXBlIiwic291cmNlIiwic2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwibG9nIiwiZ2V0U2hhZGVySW5mb0xvZyIsImRlbGV0ZVNoYWRlciIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJkZWxldGVQcm9ncmFtIiwiZGlzcGxheVdpZHRoIiwiY2xpZW50V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwibmVlZFJlc2l6ZSIsImZwc0NvdW50ZXIiLCJjcmVhdGVFbGVtZW50IiwidG9wIiwibGVmdCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImZwcyIsImZyYW1lVGltZXMiLCJtYXhGcmFtZXMiLCJsYXN0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwidXBkYXRlVUkiLCJhdmVyYWdlZEZQUyIsImN1cnJlbnRUaW1lIiwidGltZURpZmYiLCJzaGlmdCIsImF2ZXJhZ2VGUFMiLCJyZWR1Y2UiLCJhIiwiY2FsY3VsYXRlRlBTIiwiaW5uZXJUZXh0Iiwicm91bmQiLCJnZXRBdmVyYWdlRnJhbWVUaW1lIiwib3RoZXIiLCJzY2FsYXIiLCJkb3QiLCJWZWMyRCIsInNxdWFyZWREaXN0YW5jZVRvIiwiZnJhbWVDb3VudCIsIkdyaWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlIiwiZnJhbWVUaW1lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9