/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/Drawer.ts":(t,e,r)=>{r.r(e),r.d(e,{drawArrow:()=>k,drawDot:()=>E,drawGrid:()=>S,drawLasso:()=>M,drawParticles:()=>b,drawTail:()=>P,setGeometry:()=>w});var n=r("./src/Particle.ts"),o=r("./src/Vec2D.ts"),i=r("./src/shaders/particleFragmentShader.frag"),a=r("./src/shaders/particleVertexShader.vert"),c=r("./src/script.ts"),s=r("./src/ShaderHelper.ts"),u=r("./src/MenuManager.ts"),d=document.getElementById("webgl-canvas").getContext("webgl");d||console.error("Unable to initialize WebGL. Your browser may not support it."),d.enable(d.BLEND),d.blendFunc(d.SRC_ALPHA,d.ONE_MINUS_SRC_ALPHA);var l=(0,s.createShader)(d,d.VERTEX_SHADER,a),h=(0,s.createShader)(d,d.FRAGMENT_SHADER,i),f=(0,s.createProgram)(d,l,h),p=d.getAttribLocation(f,"a_position"),g=d.getUniformLocation(f,"u_resolution"),v=d.getUniformLocation(f,"u_color"),y=d.getUniformLocation(f,"u_translation"),m=d.getUniformLocation(f,"u_radius"),x=d.getUniformLocation(f,"u_outline_black");d.uniform2f(g,d.canvas.width,d.canvas.height);var _=d.createBuffer();function w(){c.particles.forEach((function(t){!function(t,e,r,n,o){var i=0-n/2,a=0+n/2,c=0-o/2,s=0+o/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([i,c,a,c,i,s,i,s,a,c,a,s]),t.STATIC_DRAW)}(d,0,0,c.gridSize,c.gridSize)}))}function b(){(0,s.resizeCanvasToDisplaySize)(d.canvas),d.viewport(0,0,d.canvas.width,d.canvas.height),d.clearColor(0,0,0,0),d.clear(d.COLOR_BUFFER_BIT),d.useProgram(f),d.enableVertexAttribArray(p),d.bindBuffer(d.ARRAY_BUFFER,_),d.vertexAttribPointer(p,2,d.FLOAT,!1,0,0),c.particles.forEach((function(t){d.uniform2f(g,d.canvas.width,d.canvas.height),d.uniform2f(y,t.pos_curr.x,t.pos_curr.y),d.uniform3f(v,t.color.r,t.color.g,t.color.b),d.uniform1f(m,c.gridSize/2),d.uniform1f(x,u.particle_outline),d.drawArrays(d.TRIANGLES,0,6)}))}function S(){c.back_ctx.clearRect(0,0,c.foreground_canvas.width,c.foreground_canvas.height),c.back_ctx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.back_ctx.lineWidth=1;for(var t=c.gridSize;t<c.foreground_canvas.width;t+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(t,0),c.back_ctx.lineTo(t,c.foreground_canvas.height),c.back_ctx.stroke();for(var e=c.gridSize;e<c.foreground_canvas.height;e+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(0,e),c.back_ctx.lineTo(c.foreground_canvas.width,e),c.back_ctx.stroke()}function P(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var r=t.difference(e);!function(t,e){for(var r=new n.default(t,15,e,{r:0,g:0,b:0}),o=1;o<=510;o++)r.accelerate(c.gravity),(0,c.applyConstraint)(r),(0,c.applyAttractorForces)(r),r.updatePosition(.125),o%15==0&&E(r.pos_curr.x,r.pos_curr.y,5,255-o/2)}(t.clone(),r.clone()),r.divide(8);var i=Math.atan2(e.y-t.y,e.x-t.x),a=new o.default(e.x,e.y);a.x-=Math.cos(i),a.y-=Math.sin(i);for(var s=0;s<=8;s++)E(t.x-r.x*s,t.y-r.y*s,5,255)}}function E(t,e,r,n){c.ctx.beginPath(),c.ctx.arc(t,e,r,0,2*Math.PI,!1),c.ctx.fillStyle="rgba(210, 210, 210, ".concat(n/255,")"),c.ctx.fill(),c.ctx.closePath()}function M(){c.clicked&&(c.ctx.beginPath(),c.ctx.arc(c.pointerPosition.x,c.pointerPosition.y,c.fieldSize,0,2*Math.PI),c.ctx.lineWidth=3,c.ctx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.ctx.stroke(),c.ctx.closePath())}function k(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var r=Math.atan2(e.y-t.y,e.x-t.x),n=10,i=new o.default(e.x,e.y);i.x-=11.5*Math.cos(r),i.y-=11.5*Math.sin(r),c.ctx.beginPath(),c.ctx.moveTo(t.x,t.y),c.ctx.lineTo(i.x,i.y),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.beginPath(),c.ctx.moveTo(i.x,i.y),c.ctx.lineTo(i.x-n*Math.cos(r-Math.PI/7),i.y-n*Math.sin(r-Math.PI/7)),c.ctx.lineTo(i.x-n*Math.cos(r+Math.PI/7),i.y-n*Math.sin(r+Math.PI/7)),c.ctx.lineTo(i.x,i.y),c.ctx.lineTo(i.x-n*Math.cos(r-Math.PI/7),i.y-n*Math.sin(r-Math.PI/7)),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.fillStyle="#bbbbbb",c.ctx.fill(),c.ctx.closePath()}}d.bindBuffer(d.ARRAY_BUFFER,_)},"./src/MenuManager.ts":(t,e,r)=>{r.r(e),r.d(e,{closeMenu:()=>u,getPointerFunction:()=>g,openMenu:()=>s,particle_outline:()=>c});var n=r("./src/Drawer.ts"),o=r("./src/script.ts"),i=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element"),c=1;function s(){"false"==i.getAttribute("open")&&(i.setAttribute("open","true"),i.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){i.setAttribute("open","false"),i.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}i.addEventListener("click",(function(t){t.stopPropagation(),s()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),(0,n.drawGrid)(),c=1==c?-1:1}));var d=document.getElementById("field-size-slider"),l=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),p=document.getElementById("particles-amount-entry");function g(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}d.oninput=function(){(0,o.setFieldSize)(parseInt(d.value))},l.oninput=function(){(0,o.setFieldStrength)(parseInt(l.value))},h.oninput=function(){(0,o.setGravityStrength)(parseInt(h.value))},f.addEventListener("change",(function(){(0,o.setSubsteps)(parseInt(f.value))})),p.addEventListener("change",(function(){(0,o.setParticlesNum)(parseInt(p.value))}))},"./src/Particle.ts":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});var n=r("./src/Vec2D.ts"),o=r("./src/script.ts");const i=function(){function t(t,e,r,i){this.pos_curr=t,this.pos_prev=this.pos_curr,this.radius=e,this.acceleration=r,this.color=i,this.updateCell(new n.default(Math.floor(this.pos_curr.x/o.gridSize),Math.floor(this.pos_curr.y/o.gridSize)))}return t.prototype.updatePosition=function(t){var e=new n.default(this.pos_curr.x-this.pos_prev.x,this.pos_curr.y-this.pos_prev.y);this.pos_prev=this.pos_curr.clone(),this.pos_curr.add(e),this.acceleration.multiply(t*t),this.pos_curr.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.updateCell=function(t){this.gridCell=t},t.canvas=document.getElementById("foreground-canvas"),t.gl=t.canvas.getContext("2d"),t}()},"./src/ShaderHelper.ts":(t,e,r)=>{function n(t,e,r){var n=t.createShader(e);if(t.shaderSource(n,r),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS))return n;console.log(t.getShaderInfoLog(n)),t.deleteShader(n)}function o(t,e,r){var n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,r),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;console.log(t.getProgramInfoLog(n)),t.deleteProgram(n)}function i(t){var e=t.clientWidth,r=t.clientHeight,n=t.width!==e||t.height!==r;return n&&(t.width=e,t.height=r),n}r.r(e),r.d(e,{createProgram:()=>o,createShader:()=>n,resizeCanvasToDisplaySize:()=>i})},"./src/Vec2D.ts":(t,e,r)=>{r.r(e),r.d(e,{default:()=>n});const n=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){this.x-=t.x,this.y-=t.y},t.prototype.multiply=function(t){this.x*=t,this.y*=t},t.prototype.divide=function(t){this.x/=t,this.y/=t},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,r)=>{r.r(e),r.d(e,{applyAttractorForces:()=>N,applyConstraint:()=>Y,back_ctx:()=>k,clicked:()=>A,ctx:()=>M,drawOutline:()=>w,fieldSize:()=>_,foreground_canvas:()=>y,fps:()=>T,gravity:()=>v,grid:()=>s,gridSize:()=>c,particles:()=>u,pointerPosition:()=>f,setDrawOutline:()=>O,setFieldSize:()=>R,setFieldStrength:()=>L,setGravityStrength:()=>F,setParticlesNum:()=>D,setSubsteps:()=>z});var n=r("./src/Drawer.ts"),o=r("./src/MenuManager.ts"),i=r("./src/Particle.ts"),a=r("./src/Vec2D.ts"),c=30,s=[],u=[],d=[],l=500,h=0,f=new a.default(0,0),p=new a.default(0,0),g="field",v=new a.default(0,1),y=document.getElementById("foreground-canvas"),m=document.getElementById("background-canvas"),x=document.getElementById("webgl-canvas"),_=100,w=!0,b=10,S=4,P=Math.ceil(y.width/c),E=Math.ceil(y.height/c);y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height,m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,x.width=x.getBoundingClientRect().width,x.height=x.getBoundingClientRect().height;var M=y.getContext("2d"),k=m.getContext("2d"),T=60,A=!1,C=document.createElement("div");C.style.position="absolute",C.style.top="10px",C.style.left="10px";var B=document.createElement("div");B.style.position="absolute",B.style.top="30px",B.style.left="10px";var I=document.createElement("div");function L(t){b=t}function R(t){_=t}function F(t){v=new a.default(0,.1*t)}function z(t){S=t}function D(t){l=t}function O(t){w=t}function U(){P=Math.ceil(y.width/c),E=Math.ceil(y.height/c),console.log(P),console.log(E);for(var t=0;t<P;t++){s[t]=[];for(var e=0;e<E;e++)s[t][e]=[]}}function G(t){!function(){for(var t=0;t<P;t++){s[t]=[];for(var e=0;e<E;e++)s[t][e]=[]}}(),u.forEach((function(e){e.updatePosition(t),function(t){var e=Math.floor(t.pos_curr.x/c),r=Math.floor(t.pos_curr.y/c);e>=0&&e<s.length&&r>=0&&r<s[e].length&&s[e][r].push(t)}(e)}))}function V(t){u.forEach((function(e){var r=t.difference(e.pos_curr),n=r.length();n<_&&n>10&&(r.multiply(100*b),r.divide(n*n),e.accelerate(r))}))}function N(t){d.forEach((function(e){var r=e.pos.difference(t.pos_curr),n=r.length();n<e.radius&&n>10&&(r.multiply(e.force),r.divide(n*n),t.accelerate(r))}))}function q(){h=0;var t=new a.default(0,0),e=0,r=0;u.forEach((function(n){(function(t){for(var e=Math.floor(t.pos_curr.x/c),r=Math.floor(t.pos_curr.y/c),n=[],o=e-1;o<=e+1;o++)for(var i=r-1;i<=r+1;i++)o>=0&&o<s.length&&i>=0&&i<s[o].length&&n.push.apply(n,s[o][i]);return n})(n).forEach((function(o){if(n!==o&&(t.set(n.pos_curr).subtract(o.pos_curr),e=t.squaredLength(),r=n.radius+o.radius,e<r*r&&0!=e)){h++;var i=Math.sqrt(e);t.divide(i);var a=r-i;t.multiply(.5*a),n.pos_curr.add(t),o.pos_curr.subtract(t)}}))}))}function Y(t){t.pos_curr.y+t.radius>y.height&&(t.pos_curr.y=y.height-t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.y-t.radius<0&&(t.pos_curr.y=t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.x-t.radius<0&&(t.pos_curr.x=t.radius,t.pos_prev.x=t.pos_curr.x+t.pos_curr.x-t.pos_prev.x),t.pos_curr.x+t.radius>y.width&&(t.pos_curr.x=y.width-t.radius)}I.style.position="absolute",I.style.top="50px",I.style.left="10px",document.body.appendChild(C),document.body.appendChild(B),document.body.appendChild(I);var H=0,W=.1*performance.now();function X(t){t.stopPropagation(),A=!0,g=(0,o.getPointerFunction)(),t instanceof MouseEvent?(f.x=t.clientX,f.y=t.clientY):t instanceof TouchEvent&&(f.x=t.touches[0].clientX,f.y=t.touches[0].clientY),p.x=f.x,p.y=f.y}function j(t){switch(t.stopPropagation(),A=!1,g){case"field":case"gravity":break;case"throw":var e=p.difference(f);e.multiply(T/60),u.push(new i.default(p.clone(),15,e,K()))}}function K(){return{r:Math.random(),g:Math.random(),b:Math.random()}}function J(t){t.stopPropagation(),A&&(t instanceof MouseEvent?(f.x=t.clientX,f.y=t.clientY):t instanceof TouchEvent&&(f.x=t.touches[0].clientX,f.y=t.touches[0].clientY))}var Q=0,Z=document.getElementById("main_container");window.addEventListener("resize",(function(){y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height,m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,x.width=x.getBoundingClientRect().width,x.height=x.getBoundingClientRect().height,U(),(0,n.drawGrid)()})),Z.addEventListener("mousedown",X),Z.addEventListener("mouseup",j),Z.addEventListener("mousemove",J),Z.addEventListener("touchstart",X),Z.addEventListener("touchend",j),Z.addEventListener("touchmove",J),Z.addEventListener("click",(function(t){t.stopPropagation(),(0,o.closeMenu)()})),U(),(0,n.drawGrid)(),requestAnimationFrame((function t(){switch(function(t){for(var e=S,r=t/e,n=0;n<e;n++){if(0!=v.y&&u.forEach((function(t){t.accelerate(v)})),A)switch(g){case"field":V(f);break;case"gravity":(v=f.difference(p)).divide(200)}u.forEach((function(t){Y(t)})),q(),G(r)}}(.5/T*60),M.clearRect(0,0,y.width,y.height),(0,n.drawParticles)(),g){case"field":(0,n.drawLasso)();break;case"gravity":(0,n.drawArrow)(p,f);break;case"throw":(0,n.drawTail)(p,f)}var e=.016666*T;Q%Math.floor(2*e)==0&&u.length<l&&Q>120&&(u.push(new i.default(new a.default(200,200),c/2,new a.default(200*e,-80*e),K())),u.push(new i.default(new a.default(200,260),c/2,new a.default(180*e,-80*e),K())),u.push(new i.default(new a.default(200,320),c/2,new a.default(170*e,-80*e),K())),u.push(new i.default(new a.default(200,380),c/2,new a.default(180*e,-80*e),K())),u.push(new i.default(new a.default(200,440),c/2,new a.default(170*e,-80*e),K())),(0,n.setGeometry)()),Q++,++H%10==0&&(T=function(){var t=.1*performance.now(),e=t-W,r=Math.round(1e3/e);return W=t,r}(),C.innerText="FPS: ".concat(T),B.innerText="Particles: ".concat(u.length),I.innerText="Collisions: ".concat(h)),requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r("./src/script.ts"),r("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,