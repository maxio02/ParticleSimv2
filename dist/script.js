/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/CanvasManager.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvasCtx:()=>u,clearCanvas:()=>d,foregroundCanvas:()=>o,foregroundCanvasCtx:()=>c,updateCanvasSize:()=>l});var r=n("./src/Renderer.ts"),i=n("./src/script.ts"),o=document.getElementById("foreground-canvas"),s=document.getElementById("background-canvas"),a=document.getElementById("webgl-canvas");o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height;var c=o.getContext("2d"),u=s.getContext("2d");function d(){c.clearRect(0,0,o.width,o.height)}function l(){o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height,a.width=a.getBoundingClientRect().width,a.height=a.getBoundingClientRect().height,i.grid.updateSize(),(0,r.drawGrid)()}window.addEventListener("resize",l)},"./src/Config.ts":(t,e,n)=>{n.r(e),n.d(e,{getFieldSize:()=>g,getFieldStrength:()=>f,getGravityDirection:()=>l,getGridSize:()=>y,getParticleNumber:()=>v,getPhysicsSubstepsAmount:()=>h,getPointerFunction:()=>p,setFieldSize:()=>x,setFieldStrength:()=>C,setGravityDirection:()=>m,setParticleNumber:()=>b,setPhysicsSubstepsAmount:()=>P,setPointerFunction:()=>S});var r=n("./src/Vec2D.ts"),i=10,o=4,s=new r.default(0,1),a=100,c=200,u="field",d=26;function l(){return s}function h(){return o}function f(){return i}function g(){return a}function v(){return c}function p(){return u}function y(){return d}function m(t){s=t}function P(t){o=t}function C(t){i=t}function x(t){a=t}function b(t){c=t}function S(t){u=t}},"./src/Grid.ts":(t,e,n)=>{n.r(e),n.d(e,{Grid:()=>r});var r=function(){function t(t,e){void 0===e&&(e=30),this.gridPixelSize=e,this.canvas=t,this.columns=Math.ceil(this.canvas.width/this.gridPixelSize),this.rows=Math.ceil(this.canvas.height/this.gridPixelSize),this.cells=this.initialize()}return t.prototype.initialize=function(){for(var t=[],e=0;e<this.columns;e++){t[e]=[];for(var n=0;n<this.rows;n++)t[e][n]=[]}return t},t.prototype.removeAll=function(){for(var t=0;t<this.columns;t++)for(var e=0;e<this.rows;e++)this.cells[t][e]=[]},t.prototype.put=function(t){var e=Math.floor(t.currentPosition.x/this.gridPixelSize),n=Math.floor(t.currentPosition.y/this.gridPixelSize);e>=0&&e<this.cells.length&&n>=0&&n<this.cells[e].length&&this.cells[e][n].push(t)},t.prototype.updateSize=function(){this.columns=Math.ceil(this.canvas.width/this.gridPixelSize),this.rows=Math.ceil(this.canvas.height/this.gridPixelSize),this.initialize()},t}()},"./src/InputHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{InputHandler:()=>i});var r=n("./src/Vec2D.ts"),i=function(){function t(){this.clicked=!1,this.pointerPosition=new r.default(0,0),this.clickStartPosition=new r.default(0,0),this.pointerFunction="field"}return t.getInstance=function(){return t.instance||(t.instance=new t,t.instance.initializeEventListeners()),t.instance},t.prototype.initializeEventListeners=function(){var t=document.getElementById("main_container");t&&(t.addEventListener("mousedown",this.handleMouseDown.bind(this)),t.addEventListener("mouseup",this.handleMouseUp.bind(this)),t.addEventListener("mousemove",this.handleMoveEvent.bind(this)),t.addEventListener("touchstart",this.handleMouseDown.bind(this)),t.addEventListener("touchend",this.handleMouseUp.bind(this)),t.addEventListener("touchmove",this.handleMoveEvent.bind(this)),t.addEventListener("click",(function(t){t.stopPropagation()})))},t.prototype.handleMouseDown=function(t){t.stopPropagation(),this.clicked=!0,t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY),this.clickStartPosition.x=this.pointerPosition.x,this.clickStartPosition.y=this.pointerPosition.y},t.prototype.handleMouseUp=function(t){t.stopPropagation(),this.clicked=!1},t.prototype.handleMoveEvent=function(t){t.stopPropagation(),this.clicked&&(t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY))},t}()},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>u,openMenu:()=>c,setGravityStrength:()=>p,updatePointerFunction:()=>v});var r=n("./src/Config.ts"),i=n("./src/Renderer.ts"),o=n("./src/Vec2D.ts"),s=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element");function c(){"false"==s.getAttribute("open")&&(s.setAttribute("open","true"),s.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){s.setAttribute("open","false"),s.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}s.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),(0,i.drawGrid)()}));var d=document.getElementById("field-size-slider"),l=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),g=document.getElementById("particles-amount-entry");function v(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}function p(t){r.setGravityDirection(new o.default(0,.1*t))}d.oninput=function(){r.setFieldSize(parseInt(d.value))},l.oninput=function(){r.setFieldStrength(parseInt(l.value))},h.oninput=function(){p(parseInt(h.value))},f.addEventListener("change",(function(){r.setPhysicsSubstepsAmount(parseInt(f.value))})),g.addEventListener("change",(function(){r.setParticleNumber(parseInt(g.value))}))},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});var r=n("./src/Vec2D.ts");const i=function(){function t(t,e,n,i,o){this.currentPosition=t,this.previousPosition=this.currentPosition,this.radius=e,this.acceleration=n,this.color=i,this.grid=o,this.cell=new r.default(Math.floor(this.currentPosition.x/o.gridPixelSize),Math.floor(this.currentPosition.y/o.gridPixelSize))}return t.prototype.updatePosition=function(t){var e=new r.default(this.currentPosition.x-this.previousPosition.x,this.currentPosition.y-this.previousPosition.y);this.previousPosition=this.currentPosition.clone(),this.currentPosition.add(e),this.acceleration.multiply(t*t),this.currentPosition.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.getNeighboringParticles=function(){for(var t=[],e=this.cell.x-1;e<=this.cell.x+1;e++)for(var n=this.cell.y-1;n<=this.cell.y+1;n++)e>=0&&e<this.grid.columns&&n>=0&&n<this.grid.rows&&t.push.apply(t,this.grid.cells[e][n]);return t},t.canvas=document.getElementById("foreground-canvas"),t}()},"./src/PhysicsEngine.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>g,applyAttractorForcesToAll:()=>l,applyConstraint:()=>f,tick:()=>h});var r=n("./src/CanvasManager.ts"),i=n("./src/Config.ts"),o=n("./src/InputHandler.ts"),s=n("./src/Vec2D.ts"),a=n("./src/script.ts"),c=o.InputHandler.getInstance();function u(t){a.grid.removeAll(),a.particles.forEach((function(e){e.updatePosition(t),a.grid.put(e)}))}function d(t){a.particles.forEach((function(e){var n=t.difference(e.currentPosition),r=n.length();r<i.getFieldSize()&&r>10&&(n.multiply(100*i.getFieldStrength()),n.divide(r*r),e.accelerate(n))}))}function l(){a.particles.forEach((function(t){g(t)}))}function h(t){for(var e=t/i.getPhysicsSubstepsAmount(),n=0;n<i.getPhysicsSubstepsAmount();n++){if(0!=i.getGravityDirection().y&&a.particles.forEach((function(t){t.accelerate(i.getGravityDirection())})),c.clicked)switch(i.getPointerFunction()){case"field":d(c.pointerPosition);break;case"gravity":i.setGravityDirection(c.pointerPosition.difference(c.clickStartPosition).divide(200))}a.particles.forEach((function(t){f(t)})),v(),u(e)}}function f(t){t.currentPosition.y+t.radius>r.foregroundCanvas.height&&(t.currentPosition.y=r.foregroundCanvas.height-t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.y-t.radius<0&&(t.currentPosition.y=t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.x-t.radius<0&&(t.currentPosition.x=t.radius,t.previousPosition.x=t.currentPosition.x+t.currentPosition.x-t.previousPosition.x),t.currentPosition.x+t.radius>r.foregroundCanvas.width&&(t.currentPosition.x=r.foregroundCanvas.width-t.radius)}function g(t){a.attractors.forEach((function(e){var n=e.position.difference(t.currentPosition),r=n.length();r<e.radius&&r>10&&(n.multiply(e.force),n.divide(r*r),t.accelerate(n))}))}function v(){var t=new s.default(0,0),e=0,n=0;a.particles.forEach((function(r){r.getNeighboringParticles().forEach((function(i){if(r!==i&&(t.set(r.currentPosition).subtract(i.currentPosition),e=t.squaredLength(),n=r.radius+i.radius,e<n*n&&0!=e)){var o=Math.sqrt(e);t.divide(o);var s=n-o;t.multiply(.5*s),r.currentPosition.add(t),i.currentPosition.subtract(t)}}))}))}},"./src/Renderer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>T,drawDot:()=>A,drawDottedLine:()=>I,drawGrid:()=>k,drawLasso:()=>R,drawParticles:()=>_,drawPredictedPath:()=>z,setGeometry:()=>M});var r=n("./src/Vec2D.ts"),i=n("./src/Config.ts"),o=n("./src/shaders/particleFragmentShader.frag"),s=n("./src/shaders/particleVertexShader.vert"),a=n("./src/ShaderHelper.ts"),c=n("./src/CanvasManager.ts"),u=n("./src/PhysicsEngine.ts"),d=n("./src/InputHandler.ts"),l=n("./src/script.ts"),h=n("./src/Particle.ts"),f=document.getElementById("webgl-canvas"),g=f.getContext("webgl");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height;var v=d.InputHandler.getInstance();g||console.error("Unable to initialize WebGL. Your browser may not support it."),g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);var p=(0,a.createShader)(g,g.VERTEX_SHADER,s),y=(0,a.createShader)(g,g.FRAGMENT_SHADER,o),m=(0,a.createProgram)(g,p,y),P=g.getAttribLocation(m,"a_position"),C=g.getUniformLocation(m,"u_resolution"),x=g.getUniformLocation(m,"u_color"),b=g.getUniformLocation(m,"u_translation"),S=g.getUniformLocation(m,"u_radius"),w=g.getUniformLocation(m,"u_outline_black");g.uniform2f(C,g.canvas.width,g.canvas.height);var E=g.createBuffer();function M(){l.particles.forEach((function(t){!function(t,e,n,r,i){var o=0-r/2,s=0+r/2,a=0-i/2,c=0+i/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([o,a,s,a,o,c,o,c,s,a,s,c]),t.STATIC_DRAW)}(g,0,0,i.getGridSize(),i.getGridSize())}))}function _(){(0,a.resizeCanvasToDisplaySize)(g.canvas),g.viewport(0,0,g.canvas.width,g.canvas.height),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT),g.useProgram(m),g.enableVertexAttribArray(P),g.bindBuffer(g.ARRAY_BUFFER,E),g.vertexAttribPointer(P,2,g.FLOAT,!1,0,0),l.particles.forEach((function(t){g.uniform2f(C,g.canvas.width,g.canvas.height),g.uniform2f(b,t.currentPosition.x,t.currentPosition.y),g.uniform3f(x,t.color.r,t.color.g,t.color.b),g.uniform1f(S,i.getGridSize()/2),g.uniform1f(w,parseInt(getComputedStyle(document.documentElement).getPropertyValue("--grid-color"))),g.drawArrays(g.TRIANGLES,0,6)}))}function k(){c.backgroundCanvasCtx.clearRect(0,0,c.foregroundCanvas.width,c.foregroundCanvas.height),c.backgroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.backgroundCanvasCtx.lineWidth=1;for(var t=i.getGridSize();t<c.foregroundCanvas.width;t+=i.getGridSize())c.backgroundCanvasCtx.beginPath(),c.backgroundCanvasCtx.moveTo(t,0),c.backgroundCanvasCtx.lineTo(t,c.foregroundCanvas.height),c.backgroundCanvasCtx.stroke();for(var e=i.getGridSize();e<c.foregroundCanvas.height;e+=i.getGridSize())c.backgroundCanvasCtx.beginPath(),c.backgroundCanvasCtx.moveTo(0,e),c.backgroundCanvasCtx.lineTo(c.foregroundCanvas.width,e),c.backgroundCanvasCtx.stroke()}function I(t,e,n,i){if(void 0===n&&(n=5),void 0===i&&(i=8),v.clicked&&t.x!=e.x&&t.y!=e.y){var o=t.difference(e);z(t.clone(),o.clone()),o.divide(i);var s=Math.atan2(e.y-t.y,e.x-t.x),a=new r.default(e.x,e.y);a.x-=Math.cos(s),a.y-=Math.sin(s);for(var c=0;c<=i;c++)A(t.x-o.x*c,t.y-o.y*c,n,255)}}function z(t,e){for(var n=new h.default(t,15,e,{r:0,g:0,b:0},l.grid),r=1;r<=510;r++)n.accelerate(i.getGravityDirection()),(0,u.applyConstraint)(n),(0,u.applyAttractorForces)(n),n.updatePosition(.125),r%15==0&&A(n.currentPosition.x,n.currentPosition.y,5,255-r/2)}function A(t,e,n,r){c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),c.foregroundCanvasCtx.fillStyle="rgba(210, 210, 210, ".concat(r/255,")"),c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}function R(t){void 0===t&&(t=3),v.clicked&&(c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(v.pointerPosition.x,v.pointerPosition.y,i.getFieldSize(),0,2*Math.PI),c.foregroundCanvasCtx.lineWidth=t,c.foregroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.closePath())}function T(t,e){if(v.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),i=10,o=new r.default(e.x,e.y);o.x-=11.5*Math.cos(n),o.y-=11.5*Math.sin(n),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(t.x,t.y),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-i*Math.cos(n-Math.PI/7),o.y-i*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x-i*Math.cos(n+Math.PI/7),o.y-i*Math.sin(n+Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-i*Math.cos(n-Math.PI/7),o.y-i*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.fillStyle="#bbbbbb",c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}}g.bindBuffer(g.ARRAY_BUFFER,E)},"./src/ShaderHelper.ts":(t,e,n)=>{function r(t,e,n){var r=t.createShader(e);if(t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;console.log(t.getShaderInfoLog(r)),t.deleteShader(r)}function i(t,e,n){var r=t.createProgram();if(t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS))return r;console.log(t.getProgramInfoLog(r)),t.deleteProgram(r)}function o(t){var e=t.clientWidth,n=t.clientHeight,r=t.width!==e||t.height!==n;return r&&(t.width=e,t.height=n),r}n.r(e),n.d(e,{createProgram:()=>i,createShader:()=>r,resizeCanvasToDisplaySize:()=>o})},"./src/UIManager.ts":(t,e,n)=>{n.r(e),n.d(e,{fps:()=>s,updateUI:()=>c});var r=n("./src/Config.ts"),i=document.createElement("div");i.style.position="absolute",i.style.top="10px",i.style.left="10px";var o=document.createElement("div");o.style.position="absolute",o.style.top="30px",o.style.left="10px",document.body.appendChild(i),document.body.appendChild(o);var s=0,a=performance.now();function c(){s=function(){var t=.1*performance.now(),e=t-a,n=Math.round(1e3/e);return a=t,n}(),i.innerText="FPS: ".concat(s),o.innerText="Particles: ".concat(r.getParticleNumber)}},"./src/Utils.ts":(t,e,n)=>{function r(){return{r:Math.random(),g:Math.random(),b:Math.random()}}n.r(e),n.d(e,{getRandomColor:()=>r})},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});const r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this},t.prototype.divide=function(t){return this.x/=t,this.y/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{attractors:()=>f,grid:()=>v,particles:()=>h});var r=n("./src/Renderer.ts"),i=n("./src/Particle.ts"),o=n("./src/Vec2D.ts"),s=n("./src/UIManager.ts"),a=n("./src/CanvasManager.ts"),c=n("./src/PhysicsEngine.ts"),u=n("./src/Config.ts"),d=n("./src/Grid.ts"),l=n("./src/Utils.ts"),h=[],f=[],g=0,v=(performance.now(),new d.Grid(a.foregroundCanvas));(0,r.drawGrid)(),requestAnimationFrame((function t(){(0,c.tick)(.5),(0,a.clearCanvas)(),(0,r.drawParticles)(),(0,s.updateUI)();g%Math.floor(1.99992)==0&&h.length<u.getParticleNumber()&&g>120&&(h.push(new i.default(new o.default(200,200),v.gridPixelSize/2,new o.default(199.992,-79.9968),(0,l.getRandomColor)(),v)),h.push(new i.default(new o.default(200,260),v.gridPixelSize/2,new o.default(179.9928,-79.9968),(0,l.getRandomColor)(),v)),h.push(new i.default(new o.default(200,320),v.gridPixelSize/2,new o.default(169.9932,-79.9968),(0,l.getRandomColor)(),v)),h.push(new i.default(new o.default(200,380),v.gridPixelSize/2,new o.default(179.9928,-79.9968),(0,l.getRandomColor)(),v)),h.push(new i.default(new o.default(200,440),v.gridPixelSize/2,new o.default(169.9932,-79.9968),(0,l.getRandomColor)(),v)),(0,r.setGeometry)()),g++,requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,