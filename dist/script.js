/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/CanvasManager.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>o,backgroundCanvasCtx:()=>c,clearCanvas:()=>u,foregroundCanvas:()=>r,foregroundCanvasCtx:()=>a,updateCanvasSize:()=>d});var i=n("./src/script.ts"),r=document.getElementById("foreground-canvas"),o=document.getElementById("background-canvas"),s=document.getElementById("webgl-canvas");r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height;var a=r.getContext("2d"),c=o.getContext("2d");function u(){a.clearRect(0,0,r.width,r.height)}function d(){r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height,i.grid.canvas=o,i.grid.updateSize(),i.grid.draw()}window.addEventListener("resize",d)},"./src/Config.ts":(t,e,n)=>{n.r(e),n.d(e,{getFieldSize:()=>p,getFieldStrength:()=>g,getGravityDirection:()=>h,getGridSize:()=>m,getParticleNumber:()=>v,getPhysicsSubstepsAmount:()=>f,getPointerFunction:()=>y,isGyroEnabled:()=>P,setFieldSize:()=>S,setFieldStrength:()=>w,setGravityDirection:()=>x,setIsGyroEnabled:()=>M,setParticleNumber:()=>b,setPhysicsSubstepsAmount:()=>C,setPointerFunction:()=>E});var i=n("./src/Vec2D.ts"),r=10,o=4,s=new i.default(0,1.3),a=100,c=200,u="field",d=26,l=!1;function h(){return s}function f(){return o}function g(){return r}function p(){return a}function v(){return c}function y(){return u}function m(){return d}function P(){return l}function x(t){s=t}function C(t){o=t}function w(t){r=t}function S(t){a=t}function b(t){c=t}function E(t){u=t}function M(t){l=t}},"./src/Grid.ts":(t,e,n)=>{n.r(e),n.d(e,{Grid:()=>r});var i=n("./src/Config.ts"),r=function(){function t(t,e){void 0===e&&(e=i.getGridSize()),this.pixelSize=e,this.canvas=t,this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.cells=this.initialize(),this.canvasCtx=this.canvas.getContext("2d")}return t.prototype.initialize=function(){for(var t=[],e=0;e<this.columns;e++){t[e]=[];for(var n=0;n<this.rows;n++)t[e][n]=[]}return t},t.prototype.removeAll=function(){for(var t=0;t<this.columns;t++)for(var e=0;e<this.rows&&null!=this.cells[t];e++)this.cells[t][e]=[]},t.prototype.put=function(t){var e=Math.floor(t.currentPosition.x/this.pixelSize),n=Math.floor(t.currentPosition.y/this.pixelSize);e>=0&&e<this.cells.length&&n>=0&&n<this.cells[e].length&&this.cells[e][n].push(t)},t.prototype.updateSize=function(){this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.initialize()},t.prototype.draw=function(){this.canvasCtx.clearRect(0,0,this.canvas.width,this.canvas.height),this.canvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),this.canvasCtx.lineWidth=1;for(var t=this.pixelSize;t<this.canvas.width;t+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(t,0),this.canvasCtx.lineTo(t,this.canvas.height),this.canvasCtx.stroke();for(var e=this.pixelSize;e<this.canvas.height;e+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(0,e),this.canvasCtx.lineTo(this.canvas.width,e),this.canvasCtx.stroke()},t}()},"./src/InputHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{InputHandler:()=>d});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/MenuManager.ts"),s=n("./src/UIManager.ts"),a=n("./src/script.ts"),c=n("./src/Utils.ts"),u=n("./src/Particle.ts"),d=function(){function t(){this.clicked=!1,this.pointerPosition=new i.default(0,0),this.clickStartPosition=new i.default(0,0),this.pointerFunction="field"}return t.getInstance=function(){return t.instance||(t.instance=new t,t.instance.initializeEventListeners()),t.instance},t.prototype.initializeEventListeners=function(){var t=document.getElementById("main_container");t&&(t.addEventListener("mousedown",this.handleMouseDown.bind(this)),t.addEventListener("mouseup",this.handleMouseUp.bind(this)),t.addEventListener("mousemove",this.handleMoveEvent.bind(this)),t.addEventListener("touchstart",this.handleMouseDown.bind(this)),t.addEventListener("touchend",this.handleMouseUp.bind(this)),t.addEventListener("touchmove",this.handleMoveEvent.bind(this)),t.addEventListener("click",(function(t){t.stopPropagation(),(0,o.closeMenu)()})),window.addEventListener("deviceorientation",this.handleOrientation))},t.prototype.handleMouseDown=function(t){t.stopPropagation(),this.clicked=!0,t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY),this.clickStartPosition.x=this.pointerPosition.x,this.clickStartPosition.y=this.pointerPosition.y},t.prototype.handleMouseUp=function(t){if(t.stopPropagation(),this.clicked=!1,"throw"==r.getPointerFunction()){var e=this.clickStartPosition.clone().difference(this.pointerPosition);e.multiply(s.fps/15),a.particles.push(new u.default(this.clickStartPosition.clone(),r.getGridSize()/2,e,(0,c.getRandomColor)(),a.grid))}},t.prototype.handleMoveEvent=function(t){t.stopPropagation(),this.clicked&&(t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY))},t.prototype.handleOrientation=function(t){var e=t.alpha,n=t.beta,o=t.gamma;console.log("".concat(e," ").concat(n," ").concat(o)),r.setGravityDirection(new i.default(o/100,n/100))},t}()},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>u,openMenu:()=>c,setGravityStrength:()=>m,updatePointerFunction:()=>y});var i=n("./src/Config.ts"),r=n("./src/Vec2D.ts"),o=n("./src/script.ts"),s=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element");function c(){"false"==s.getAttribute("open")&&(s.setAttribute("open","true"),s.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){s.setAttribute("open","false"),s.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}s.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),o.grid.draw()}));var d=document.getElementById("field-size-slider"),l=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),g=document.getElementById("particles-amount-entry"),p=document.getElementById("gyro-toggle");function v(){p.checked?i.setIsGyroEnabled(!0):i.setIsGyroEnabled(!1),console.log(i.isGyroEnabled())}function y(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}function m(t){i.setGravityDirection(new r.default(0,.1*t))}document.getElementsByName("cursor-function").forEach((function(t){t.addEventListener("change",(function(){t.checked&&i.setPointerFunction(t.value)}))})),d.oninput=function(){i.setFieldSize(parseInt(d.value))},l.oninput=function(){i.setFieldStrength(parseInt(l.value))},h.oninput=function(){m(parseInt(h.value))},f.addEventListener("change",(function(){i.setPhysicsSubstepsAmount(parseInt(f.value))})),p.oninput=function(){"undefined"!=typeof DeviceOrientationEvent&&"function"==typeof DeviceOrientationEvent.requestPermission?DeviceOrientationEvent.requestPermission().then((function(t){"granted"==t&&v()})).catch(console.error):v()},g.addEventListener("change",(function(){i.setParticleNumber(parseInt(g.value));for(var t=o.particles.length-i.getParticleNumber();t>0;)o.particles.pop(),t--}))},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./src/Vec2D.ts");const r=function(){function t(t,e,n,r,o){this.currentPosition=t,this.previousPosition=this.currentPosition,this.radius=e,this.acceleration=n,this.color=r,this.grid=o,this.cell=new i.default(Math.floor(this.currentPosition.x/o.pixelSize),Math.floor(this.currentPosition.y/o.pixelSize))}return t.prototype.updatePosition=function(t){var e=new i.default(this.currentPosition.x-this.previousPosition.x,this.currentPosition.y-this.previousPosition.y);this.previousPosition=this.currentPosition.clone(),this.currentPosition.add(e),this.acceleration.multiply(t*t),this.currentPosition.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0,this.updateCell()},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.getNeighboringParticles=function(){for(var t=[],e=this.cell.x-1;e<=this.cell.x+1;e++)for(var n=this.cell.y-1;n<=this.cell.y+1;n++)e>=0&&e<this.grid.columns&&n>=0&&n<this.grid.rows&&t.push.apply(t,this.grid.cells[e][n]);return t},t.prototype.updateCell=function(){this.cell=new i.default(Math.floor(this.currentPosition.x/this.grid.pixelSize),Math.floor(this.currentPosition.y/this.grid.pixelSize))},t.canvas=document.getElementById("foreground-canvas"),t}()},"./src/PhysicsEngine.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>g,applyAttractorForcesToAll:()=>l,applyConstraint:()=>f,tick:()=>h});var i=n("./src/CanvasManager.ts"),r=n("./src/Config.ts"),o=n("./src/InputHandler.ts"),s=n("./src/Vec2D.ts"),a=n("./src/script.ts"),c=o.InputHandler.getInstance();function u(t){a.grid.removeAll(),a.particles.forEach((function(e){e.updatePosition(t),a.grid.put(e)}))}function d(t){a.particles.forEach((function(e){var n=t.difference(e.currentPosition),i=n.length();i<r.getFieldSize()&&i>10&&(n.multiply(100*r.getFieldStrength()),n.divide(i*i),e.accelerate(n))}))}function l(){a.particles.forEach((function(t){g(t)}))}function h(t){for(var e=t/r.getPhysicsSubstepsAmount(),n=0;n<r.getPhysicsSubstepsAmount();n++){if(0!=r.getGravityDirection().y&&a.particles.forEach((function(t){t.accelerate(r.getGravityDirection())})),c.clicked)switch(r.getPointerFunction()){case"field":d(c.pointerPosition);break;case"gravity":r.setGravityDirection(c.pointerPosition.difference(c.clickStartPosition).divide(400))}a.particles.forEach((function(t){f(t)})),p(),u(e)}}function f(t){t.currentPosition.y+t.radius>i.foregroundCanvas.height&&(t.currentPosition.y=i.foregroundCanvas.height-t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.y-t.radius<0&&(t.currentPosition.y=t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.x-t.radius<0&&(t.currentPosition.x=t.radius,t.previousPosition.x=t.currentPosition.x+t.currentPosition.x-t.previousPosition.x),t.currentPosition.x+t.radius>i.foregroundCanvas.width&&(t.currentPosition.x=i.foregroundCanvas.width-t.radius)}function g(t){a.attractors.forEach((function(e){var n=e.position.difference(t.currentPosition),i=n.length();i<e.radius&&i>10&&(n.multiply(e.force),n.divide(i*i),t.accelerate(n))}))}function p(){var t=new s.default(0,0),e=0,n=0;a.particles.forEach((function(i){i.getNeighboringParticles().forEach((function(r){if(i!==r&&(t.set(i.currentPosition).subtract(r.currentPosition),e=t.squaredLength(),n=i.radius+r.radius,e<n*n&&0!=e)){var o=Math.sqrt(e);t.divide(o);var s=n-o;t.multiply(.5*s),i.currentPosition.add(t),r.currentPosition.subtract(t)}}))}))}},"./src/Renderer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>R,drawCursorFunction:()=>T,drawDot:()=>A,drawDottedLine:()=>k,drawLasso:()=>F,drawParticles:()=>I,drawPredictedPath:()=>z,setGeometry:()=>_});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/shaders/particleFragmentShader.frag"),s=n("./src/shaders/particleVertexShader.vert"),a=n("./src/ShaderHelper.ts"),c=n("./src/CanvasManager.ts"),u=n("./src/PhysicsEngine.ts"),d=n("./src/InputHandler.ts"),l=n("./src/script.ts"),h=n("./src/Particle.ts"),f=n("./src/UIManager.ts"),g=document.getElementById("webgl-canvas"),p=g.getContext("webgl");g.width=g.getBoundingClientRect().width,g.height=g.getBoundingClientRect().height;var v=d.InputHandler.getInstance();p||console.error("Unable to initialize WebGL. Your browser may not support it."),p.enable(p.BLEND),p.blendFunc(p.SRC_ALPHA,p.ONE_MINUS_SRC_ALPHA);var y=(0,a.createShader)(p,p.VERTEX_SHADER,s),m=(0,a.createShader)(p,p.FRAGMENT_SHADER,o),P=(0,a.createProgram)(p,y,m),x=p.getAttribLocation(P,"a_position"),C=p.getUniformLocation(P,"u_resolution"),w=p.getUniformLocation(P,"u_color"),S=p.getUniformLocation(P,"u_translation"),b=p.getUniformLocation(P,"u_radius"),E=p.getUniformLocation(P,"u_outline_black"),M=p.createBuffer();function _(){l.particles.forEach((function(t){!function(t,e,n,i,r){var o=0-i/2,s=0+i/2,a=0-r/2,c=0+r/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([o,a,s,a,o,c,o,c,s,a,s,c]),t.STATIC_DRAW)}(p,0,0,r.getGridSize(),r.getGridSize())}))}function I(){(0,a.resizeCanvasToDisplaySize)(p.canvas),p.viewport(0,0,p.canvas.width,p.canvas.height),p.clearColor(0,0,0,0),p.clear(p.COLOR_BUFFER_BIT),p.useProgram(P),p.enableVertexAttribArray(x),p.bindBuffer(p.ARRAY_BUFFER,M),p.vertexAttribPointer(x,2,p.FLOAT,!1,0,0);var t=parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--is-outline-dark")),e=[p.canvas.width,p.canvas.height];l.particles.forEach((function(n){p.uniform2fv(C,e),p.uniform2f(S,n.currentPosition.x,n.currentPosition.y),p.uniform3f(w,n.color.r,n.color.g,n.color.b),p.uniform1f(b,n.radius),p.uniform1f(E,t),p.drawArrays(p.TRIANGLES,0,6)}))}function k(t,e,n,r){if(void 0===n&&(n=5),void 0===r&&(r=8),v.clicked&&t.x!=e.x&&t.y!=e.y){var o=t.difference(e);z(t.clone(),o.clone()),o.divide(r);var s=Math.atan2(e.y-t.y,e.x-t.x),a=new i.default(e.x,e.y);a.x-=Math.cos(s),a.y-=Math.sin(s);for(var c=0;c<=r;c++)A(t.x-o.x*c,t.y-o.y*c,n,255)}}function z(t,e){for(var n=new h.default(t,r.getGridSize()/2,e,{r:0,g:0,b:0},l.grid),i=1;i<=127;i++)n.accelerate(r.getGravityDirection()),(0,u.applyConstraint)(n),(0,u.applyAttractorForces)(n),n.updatePosition((0,f.getAverageFrameTime)()/20),i%3==0&&A(n.currentPosition.x,n.currentPosition.y,5,255-2*i)}function A(t,e,n,i){c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),c.foregroundCanvasCtx.fillStyle="rgba(210, 210, 210, ".concat(i/255,")"),c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}function F(t){void 0===t&&(t=3),v.clicked&&(c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(v.pointerPosition.x,v.pointerPosition.y,r.getFieldSize(),0,2*Math.PI),c.foregroundCanvasCtx.lineWidth=t,c.foregroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.closePath())}function R(t,e){if(v.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),r=10,o=new i.default(e.x,e.y);o.x-=11.5*Math.cos(n),o.y-=11.5*Math.sin(n),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(t.x,t.y),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n+Math.PI/7),o.y-r*Math.sin(n+Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.fillStyle="#bbbbbb",c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}}function T(){if(v.clicked)switch(r.getPointerFunction()){case"field":F();break;case"gravity":R(v.clickStartPosition,v.pointerPosition);break;case"throw":k(v.clickStartPosition,v.pointerPosition)}}p.bindBuffer(p.ARRAY_BUFFER,M)},"./src/ShaderHelper.ts":(t,e,n)=>{function i(t,e,n){var i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;console.log(t.getShaderInfoLog(i)),t.deleteShader(i)}function r(t,e,n){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS))return i;console.log(t.getProgramInfoLog(i)),t.deleteProgram(i)}function o(t){var e=t.clientWidth,n=t.clientHeight,i=t.width!==e||t.height!==n;return i&&(t.width=e,t.height=n),i}n.r(e),n.d(e,{createProgram:()=>r,createShader:()=>i,resizeCanvasToDisplaySize:()=>o})},"./src/UIManager.ts":(t,e,n)=>{n.r(e),n.d(e,{fps:()=>r,frameTimes:()=>o,getAverageFrameTime:()=>u,updateUI:()=>c});var i=document.createElement("div");i.style.position="absolute",i.style.top="10px",i.style.left="10px",document.body.appendChild(i);var r=60,o=[],s=100,a=performance.now();function c(){var t=function(){var t=performance.now(),e=t-a;o.push(e),o.length>s&&o.shift();var n=o.reduce((function(t,e){return t+e}),0)/o.length;return a=t,1e3/n}();i.innerText="FPS: ".concat(Math.round(t))}function u(){return o.reduce((function(t,e){return t+e}),0)/o.length}},"./src/Utils.ts":(t,e,n)=>{function i(){return{r:Math.random(),g:Math.random(),b:Math.random()}}n.r(e),n.d(e,{getRandomColor:()=>i})},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this},t.prototype.divide=function(t){return this.x/=t,this.y/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{attractors:()=>f,grid:()=>p,particles:()=>h});var i=n("./src/Renderer.ts"),r=n("./src/Particle.ts"),o=n("./src/Vec2D.ts"),s=n("./src/UIManager.ts"),a=n("./src/CanvasManager.ts"),c=n("./src/PhysicsEngine.ts"),u=n("./src/Config.ts"),d=n("./src/Grid.ts"),l=n("./src/Utils.ts"),h=[],f=[],g=0,p=new d.Grid(a.backgroundCanvas);p.draw(),requestAnimationFrame((function t(){var e=(0,s.getAverageFrameTime)();(0,c.tick)(e/20),(0,a.clearCanvas)(),(0,i.drawParticles)(),(0,i.drawCursorFunction)(),(0,s.updateUI)();var n=10/e;g%3==0&&h.length<u.getParticleNumber()&&g>120&&(h.push(new r.default(new o.default(200,200),p.pixelSize/2,new o.default(200*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,260),p.pixelSize/2,new o.default(180*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,320),p.pixelSize/2,new o.default(170*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,380),p.pixelSize/2,new o.default(180*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,440),p.pixelSize/2,new o.default(170*n,-80*n),(0,l.getRandomColor)(),p)),(0,i.setGeometry)()),g++,requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBT0MsZUFBZVIsRUFBU0ssRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRULEVBQW9CVSxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQ2xGaEIsRUFBb0J6RixFQUFLNkYsSUFDSCxvQkFBWGdCLFFBQTBCQSxPQUFPQyxhQUMxQ1YsT0FBT0MsZUFBZVIsRUFBU2dCLE9BQU9DLFlBQWEsQ0FBRXZOLE1BQU8sV0FFN0Q2TSxPQUFPQyxlQUFlUixFQUFTLGFBQWMsQ0FBRXRNLE9BQU8sR0FBTyxFQ0Y5RGtNLEVBQW9CLG1CQUNNQSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvQ2FudmFzTWFuYWdlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL0NvbmZpZy50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL0dyaWQudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9JbnB1dEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9NZW51TWFuYWdlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1BhcnRpY2xlLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvUGh5c2ljc0VuZ2luZS50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1JlbmRlcmVyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvU2hhZGVySGVscGVyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvVUlNYW5hZ2VyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvVXRpbHMudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9WZWMyRC50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL3NjcmlwdC50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3JpZCB9IGZyb20gXCIuL3NjcmlwdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcmVncm91bmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9yZWdyb3VuZC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja2dyb3VuZC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuY29uc3Qgd2ViZ2xDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2ViZ2wtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG5mb3JlZ3JvdW5kQ2FudmFzIS53aWR0aCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbmZvcmVncm91bmRDYW52YXMhLmhlaWdodCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5iYWNrZ3JvdW5kQ2FudmFzIS53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbmJhY2tncm91bmRDYW52YXMhLmhlaWdodCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG53ZWJnbENhbnZhcy53aWR0aCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG53ZWJnbENhbnZhcy5oZWlnaHQgPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbmV4cG9ydCBjb25zdCBmb3JlZ3JvdW5kQ2FudmFzQ3R4ID0gZm9yZWdyb3VuZENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENhbnZhc0N0eCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB1cGRhdGVDYW52YXNTaXplKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhbnZhcygpIHtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguY2xlYXJSZWN0KDAsIDAsIGZvcmVncm91bmRDYW52YXMud2lkdGgsIGZvcmVncm91bmRDYW52YXMuaGVpZ2h0KTtcclxuICB9XHJcbiAgXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDYW52YXNTaXplKCkge1xyXG4gICAgZm9yZWdyb3VuZENhbnZhcy53aWR0aCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzLmhlaWdodCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgYmFja2dyb3VuZENhbnZhcy53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICBiYWNrZ3JvdW5kQ2FudmFzLmhlaWdodCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgd2ViZ2xDYW52YXMud2lkdGggPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgIHdlYmdsQ2FudmFzLmhlaWdodCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIGdyaWQuY2FudmFzID0gYmFja2dyb3VuZENhbnZhcztcclxuICAgIGdyaWQudXBkYXRlU2l6ZSgpO1xyXG4gICAgZ3JpZC5kcmF3KCk7XHJcbiAgfVxyXG4gICIsImltcG9ydCB7IFBvaW50ZXJGdW5jdGlvblR5cGUgfSBmcm9tIFwiLi9JbnB1dEhhbmRsZXJcIjtcclxuaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcblxyXG52YXIgZmllbGRTdHJlbmd0aCA9IDEwO1xyXG52YXIgcGh5c2ljc1N1YnN0ZXBzQW1vdW50ID0gNDtcclxudmFyIGdyYXZpdHlEaXJlY3Rpb24gPSBuZXcgVmVjMkQoMCwgMS4zKTtcclxudmFyIGZpZWxkU2l6ZSA9IDEwMDtcclxudmFyIHBhcnRpY2xlTnVtYmVyID0gMjAwO1xyXG52YXIgcG9pbnRlckZ1bmN0aW9uOiBQb2ludGVyRnVuY3Rpb25UeXBlID0gJ2ZpZWxkJztcclxudmFyIGdyaWRTaXplID0gMjY7XHJcbnZhciBneXJvRW5hYmxlZCA9IGZhbHNlO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jhdml0eURpcmVjdGlvbigpIHtcclxuICAgIHJldHVybiBncmF2aXR5RGlyZWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KCkge1xyXG4gICAgcmV0dXJuIHBoeXNpY3NTdWJzdGVwc0Ftb3VudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkU3RyZW5ndGgoKSB7XHJcbiAgICByZXR1cm4gZmllbGRTdHJlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkU2l6ZSgpIHtcclxuICAgIHJldHVybiBmaWVsZFNpemU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJ0aWNsZU51bWJlcigpIHtcclxuICAgIHJldHVybiBwYXJ0aWNsZU51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50ZXJGdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBwb2ludGVyRnVuY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkU2l6ZSgpIHtcclxuICAgIHJldHVybiBncmlkU2l6ZTsgICAgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0d5cm9FbmFibGVkKCkge1xyXG4gICAgcmV0dXJuIGd5cm9FbmFibGVkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0R3Jhdml0eURpcmVjdGlvbihuZXdHcmF2aXR5RGlyZWN0aW9uOiBWZWMyRCkge1xyXG4gICAgZ3Jhdml0eURpcmVjdGlvbiA9IG5ld0dyYXZpdHlEaXJlY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQaHlzaWNzU3Vic3RlcHNBbW91bnQobmV3QW1vdW50OiBudW1iZXIpIHtcclxuICAgIHBoeXNpY3NTdWJzdGVwc0Ftb3VudCA9IG5ld0Ftb3VudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkU3RyZW5ndGgobmV3ZmllbGRTdHJlbmd0aDogbnVtYmVyKSB7XHJcbiAgICBmaWVsZFN0cmVuZ3RoID0gbmV3ZmllbGRTdHJlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkU2l6ZShuZXdmaWVsZFNpemU6IG51bWJlcikge1xyXG4gICAgZmllbGRTaXplID0gbmV3ZmllbGRTaXplO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGFydGljbGVOdW1iZXIobmV3UGFydGljbGVOdW1iZXI6IG51bWJlcikge1xyXG4gICAgcGFydGljbGVOdW1iZXIgPSBuZXdQYXJ0aWNsZU51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFBvaW50ZXJGdW5jdGlvbihuZXdQb2ludGVyRnVuY3Rpb246IFBvaW50ZXJGdW5jdGlvblR5cGUpIHtcclxuICAgIHBvaW50ZXJGdW5jdGlvbiA9IG5ld1BvaW50ZXJGdW5jdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldElzR3lyb0VuYWJsZWQobmV3SXNHeXJvRW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgZ3lyb0VuYWJsZWQgPSBuZXdJc0d5cm9FbmFibGVkO1xyXG59IiwiaW1wb3J0IHsgYmFja2dyb3VuZENhbnZhc0N0eCB9IGZyb20gXCIuL0NhbnZhc01hbmFnZXJcIjtcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gXCIuL1BhcnRpY2xlXCI7XHJcbmltcG9ydCB7IGdyaWQgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuZXhwb3J0IGNsYXNzIEdyaWQge1xyXG4gICAgcHVibGljIGNlbGxzOiBQYXJ0aWNsZVtdW11bXTtcclxuICAgIHB1YmxpYyBjb2x1bW5zOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcm93czogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHBpeGVsU2l6ZTogbnVtYmVyO1xyXG4gICAgcHVibGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGNhbnZhc0N0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZ3JpZFBpeGVsU2l6ZTogbnVtYmVyID0gQ29uZmlnLmdldEdyaWRTaXplKCkpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU2l6ZSA9IGdyaWRQaXhlbFNpemU7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gTWF0aC5jZWlsKHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMucm93cyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnBpeGVsU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzQ3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZSgpOiBQYXJ0aWNsZVtdW11bXSB7XHJcbiAgICAgICAgY29uc3QgY2VsbHM6IFBhcnRpY2xlW11bXVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xyXG4gICAgICAgICAgICBjZWxsc1tpXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMucm93czsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsc1tpXVtqXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQWxsKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd3M7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jZWxsc1tpXT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1tpXVtqXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwdXQocGFydGljbGU6IFBhcnRpY2xlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29sdW1uID0gTWF0aC5mbG9vcihwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueCAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb2x1bW4gPj0gMCAmJiBjb2x1bW4gPCB0aGlzLmNlbGxzLmxlbmd0aCAmJiByb3cgPj0gMCAmJiByb3cgPCB0aGlzLmNlbGxzW2NvbHVtbl0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbHNbY29sdW1uXVtyb3ddLnB1c2gocGFydGljbGUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgJHtjb2x1bW59ICAgJHtyb3d9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVTaXplKCk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gTWF0aC5jZWlsKHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMucm93cyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnBpeGVsU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKXtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5zdHJva2VTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWdyaWQtY29sb3InKTtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubGluZVdpZHRoID0gMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IHRoaXMucGl4ZWxTaXplOyB4IDwgdGhpcy5jYW52YXMud2lkdGg7IHggKz0gdGhpcy5waXhlbFNpemUpIHtcclxuICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5tb3ZlVG8oeCwgMCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubGluZVRvKHgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IHRoaXMucGl4ZWxTaXplOyB5IDwgdGhpcy5jYW52YXMuaGVpZ2h0OyB5ICs9IHRoaXMucGl4ZWxTaXplKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubW92ZVRvKDAsIHkpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmxpbmVUbyh0aGlzLmNhbnZhcy53aWR0aCwgeSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gREVCVUdcclxuICAgICAgICAgICAgLy8gICBmb3IgKGxldCB4ID0gMDsgeCA8IGdyaWQuY29sdW1uczsgeCArPSAxKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICBmb3IgKGxldCB5ID0gMDsgeSA8IGdyaWQucm93czsgeSArPSAxKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmZvbnQgPSBcIjEycHggc2VyaWZcIjtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZENhbnZhc0N0eC5maWxsVGV4dChgJHtncmlkLmNlbGxzW3hdW3ldLmxlbmd0aH1gLCAoeCsxKSp0aGlzLnBpeGVsU2l6ZSAtIHRoaXMucGl4ZWxTaXplLzIgLSAyLCAoeSsxKSp0aGlzLnBpeGVsU2l6ZSAtdGhpcy5waXhlbFNpemUvMiArIDQpO1xyXG4gICAgICAgICAgICAgICAgLy8gYmFja19jdHguZmlsbFRleHQoYCR7eH0gJHt5fWAsICh4KzEpKnRoaXMucGl4ZWxTaXplIC0gdGhpcy5waXhlbFNpemUvMiAtIDIsICh5KzEpKnRoaXMucGl4ZWxTaXplIC10aGlzLnBpeGVsU2l6ZS8yICsgNCk7XHJcbiAgICAgICAgICAgIC8vICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICB9XHJcbiAgICB9IiwiaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XHJcbmltcG9ydCB7IGNsb3NlTWVudSwgdXBkYXRlUG9pbnRlckZ1bmN0aW9uIH0gZnJvbSBcIi4vTWVudU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgZnBzIH0gZnJvbSBcIi4vVUlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGdyaWQsIHBhcnRpY2xlcyB9IGZyb20gXCIuL3NjcmlwdFwiO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Db2xvciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbmltcG9ydCBQYXJ0aWNsZSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xyXG5leHBvcnQgdHlwZSBQb2ludGVyRnVuY3Rpb25UeXBlID0gJ2ZpZWxkJyB8ICdncmF2aXR5JyB8ICd0aHJvdyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRIYW5kbGVyIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogSW5wdXRIYW5kbGVyO1xyXG4gIHB1YmxpYyBjbGlja2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBwb2ludGVyRnVuY3Rpb246IFBvaW50ZXJGdW5jdGlvblR5cGU7XHJcbiAgcHVibGljIHBvaW50ZXJQb3NpdGlvbiA9IG5ldyBWZWMyRCgwLCAwKVxyXG4gIHB1YmxpYyBjbGlja1N0YXJ0UG9zaXRpb24gPSBuZXcgVmVjMkQoMCwgMClcclxuXHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnBvaW50ZXJGdW5jdGlvbiA9ICdmaWVsZCc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IElucHV0SGFuZGxlciB7XHJcbiAgICBpZiAoIUlucHV0SGFuZGxlci5pbnN0YW5jZSkge1xyXG4gICAgICBJbnB1dEhhbmRsZXIuaW5zdGFuY2UgPSBuZXcgSW5wdXRIYW5kbGVyKCk7XHJcbiAgICAgIElucHV0SGFuZGxlci5pbnN0YW5jZS5pbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBJbnB1dEhhbmRsZXIuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRpYWxpemVFdmVudExpc3RlbmVycygpOiB2b2lkIHtcclxuICAgIGNvbnN0IG1haW5fYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluX2NvbnRhaW5lcicpO1xyXG4gICAgaWYgKCFtYWluX2JvZHkpIHJldHVybjtcclxuXHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXAuYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdmVFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLmJpbmQodGhpcykpO1xyXG4gICAgbWFpbl9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVNb3ZlRXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgY2xvc2VNZW51KCk7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VvcmllbnRhdGlvbicsIHRoaXMuaGFuZGxlT3JpZW50YXRpb24pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVNb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuY2xpY2tlZCA9IHRydWU7XHJcbiAgICBcclxuXHJcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnggPSBldmVudC5jbGllbnRYO1xyXG4gICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi55ID0gZXZlbnQuY2xpZW50WTtcclxuICAgIH0gZWxzZSBpZiAoZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jbGlja1N0YXJ0UG9zaXRpb24ueCA9IHRoaXMucG9pbnRlclBvc2l0aW9uLng7XHJcbiAgICB0aGlzLmNsaWNrU3RhcnRQb3NpdGlvbi55ID0gdGhpcy5wb2ludGVyUG9zaXRpb24ueTtcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVNb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLmNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGlmKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSA9PSAndGhyb3cnKXtcclxuICAgICAgbGV0IGxhdW5jaF9kaXIgPSB0aGlzLmNsaWNrU3RhcnRQb3NpdGlvbi5jbG9uZSgpLmRpZmZlcmVuY2UodGhpcy5wb2ludGVyUG9zaXRpb24pXHJcbiAgICBsYXVuY2hfZGlyLm11bHRpcGx5KGZwcyAvIDE1KVxyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLmNsb25lKCksIENvbmZpZy5nZXRHcmlkU2l6ZSgpLzIsIGxhdW5jaF9kaXIsIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTW92ZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBpZiAodGhpcy5jbGlja2VkKSB7XHJcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi55ID0gZXZlbnQuY2xpZW50WTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlT3JpZW50YXRpb24oZXZlbnQ6IERldmljZU9yaWVudGF0aW9uRXZlbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGFscGhhID0gZXZlbnQuYWxwaGE7IC8vIFotYXhpcyByb3RhdGlvbiBbMCwzNjApXHJcbiAgICBjb25zdCBiZXRhID0gZXZlbnQuYmV0YTsgLy8gWC1heGlzIHJvdGF0aW9uIFstMTgwLDE4MClcclxuICAgIGNvbnN0IGdhbW1hID0gZXZlbnQuZ2FtbWE7IC8vIFktYXhpcyByb3RhdGlvbiBbLTkwLDkwKVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2FscGhhfSAke2JldGF9ICR7Z2FtbWF9YCk7XHJcbiAgICBDb25maWcuc2V0R3Jhdml0eURpcmVjdGlvbihuZXcgVmVjMkQoZ2FtbWEvMTAwLCBiZXRhLzEwMCkpO1xyXG4gIH1cclxuXHJcblxyXG59IiwiaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgUG9pbnRlckZ1bmN0aW9uVHlwZSB9IGZyb20gJy4vSW5wdXRIYW5kbGVyJztcclxuaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcbmltcG9ydCB7IGdyaWQsIHBhcnRpY2xlcyB9IGZyb20gJy4vc2NyaXB0JztcclxuXHJcbmNvbnN0IG1lbnVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lbnUtYnV0dG9uXCIpO1xyXG5jb25zdCBtZW51RWxlbWVudHM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tZW51LWVsZW1lbnRcIik7XHJcblxyXG5tZW51QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgb3Blbk1lbnUoKTtcclxufSk7XHJcblxyXG5jb25zdCBzd2l0Y2hUaGVtZSA9ICgpID0+IHtcclxuICBjb25zdCByb290RWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxyXG4gIGxldCB0aGVtZSA9IHJvb3RFbGVtLmdldEF0dHJpYnV0ZSgndGhlbWUnKSwgbmV3VGhlbWU7XHJcbiAgbmV3VGhlbWUgPSAodGhlbWUgPT09ICdsaWdodCcpID8gJ2RhcmsnIDogJ2xpZ2h0JztcclxuXHJcbiAgcm9vdEVsZW0uc2V0QXR0cmlidXRlKCd0aGVtZScsIG5ld1RoZW1lKTtcclxuICBncmlkLmRyYXcoKTtcclxufVxyXG5cclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0aGVtZS1zd2l0Y2gnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXRjaFRoZW1lKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvcGVuTWVudSgpIHtcclxuICBpZiAobWVudUJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJvcGVuXCIpID09IFwiZmFsc2VcIikge1xyXG4gICAgbWVudUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJvcGVuXCIsIFwidHJ1ZVwiKTtcclxuICAgIG1lbnVCdXR0b24uc3R5bGUuY3Vyc29yID0gXCJhdXRvXCI7XHJcblxyXG4gICAgbWVudUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgfSwgMzAwKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcbiAgZWxzZSB7XHJcblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcclxuICBtZW51QnV0dG9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJmYWxzZVwiKTtcclxuICBtZW51QnV0dG9uLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gIG1lbnVFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG52YXIgZmllbGRTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWVsZC1zaXplLXNsaWRlclwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG52YXIgZmllbGRTdHJlbmd0aFNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmllbGQtc3RyZW5ndGgtc2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbnZhciBncmF2aXR5U3RyZW5ndGhTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdyYXZpdHktc3RyZW5ndGgtc2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbnZhciBzdWJzdGVwc0Ftb3VudEVudHJ5Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJzdGVwcy1hbW91bnQtZW50cnlcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIHBhcnRpY2xlc0Ftb3VudEVudHJ5Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJ0aWNsZXMtYW1vdW50LWVudHJ5XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbnZhciBneXJvRW5hYmxlZENoZWNrQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJneXJvLXRvZ2dsZVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuY29uc3QgcmFkaW9CdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ2N1cnNvci1mdW5jdGlvbicpIGFzIE5vZGVMaXN0T2Y8SFRNTElucHV0RWxlbWVudD47XHJcblxyXG4gIHJhZGlvQnV0dG9ucy5mb3JFYWNoKHJhZGlvQnV0dG9uID0+IHtcclxuICAgIHJhZGlvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgaWYgKHJhZGlvQnV0dG9uLmNoZWNrZWQpIHtcclxuICAgICAgICBDb25maWcuc2V0UG9pbnRlckZ1bmN0aW9uKHJhZGlvQnV0dG9uLnZhbHVlIGFzIFBvaW50ZXJGdW5jdGlvblR5cGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbmZpZWxkU2l6ZVNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIENvbmZpZy5zZXRGaWVsZFNpemUocGFyc2VJbnQoZmllbGRTaXplU2xpZGVyLnZhbHVlKSk7XHJcbn1cclxuXHJcbmZpZWxkU3RyZW5ndGhTbGlkZXIub25pbnB1dCA9IGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0RmllbGRTdHJlbmd0aChwYXJzZUludChmaWVsZFN0cmVuZ3RoU2xpZGVyLnZhbHVlKSk7XHJcbn1cclxuXHJcbmdyYXZpdHlTdHJlbmd0aFNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHNldEdyYXZpdHlTdHJlbmd0aChwYXJzZUludChncmF2aXR5U3RyZW5ndGhTbGlkZXIudmFsdWUpKTtcclxufVxyXG5cclxuc3Vic3RlcHNBbW91bnRFbnRyeUJveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgQ29uZmlnLnNldFBoeXNpY3NTdWJzdGVwc0Ftb3VudChwYXJzZUludChzdWJzdGVwc0Ftb3VudEVudHJ5Qm94LnZhbHVlKSk7XHJcbn0pO1xyXG5cclxuZ3lyb0VuYWJsZWRDaGVja0JveC5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0eXBlb2YgRGV2aWNlT3JpZW50YXRpb25FdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIChEZXZpY2VPcmllbnRhdGlvbkV2ZW50IGFzIGFueSkucmVxdWVzdFBlcm1pc3Npb24gPT09ICdmdW5jdGlvbicpIHtcclxuICAgIChEZXZpY2VPcmllbnRhdGlvbkV2ZW50IGFzIGFueSkucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKChyZXNwb25zZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlID09ICdncmFudGVkJykge1xyXG4gICAgICAgICAgICB0b2dnbGVHeXJvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbn0gZWxzZSB7XHJcbiAgICB0b2dnbGVHeXJvKCk7XHJcbn1cclxuXHJcblxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlR3lybygpe1xyXG4gIGlmIChneXJvRW5hYmxlZENoZWNrQm94LmNoZWNrZWQpIHtcclxuICAgIENvbmZpZy5zZXRJc0d5cm9FbmFibGVkKHRydWUpO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIENvbmZpZy5zZXRJc0d5cm9FbmFibGVkKGZhbHNlKTtcclxuICB9XHJcbiAgY29uc29sZS5sb2coQ29uZmlnLmlzR3lyb0VuYWJsZWQoKSk7XHJcbn1cclxuXHJcbnBhcnRpY2xlc0Ftb3VudEVudHJ5Qm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0UGFydGljbGVOdW1iZXIocGFyc2VJbnQocGFydGljbGVzQW1vdW50RW50cnlCb3gudmFsdWUpKTtcclxuICBsZXQgZGlmZiA9IHBhcnRpY2xlcy5sZW5ndGggLSBDb25maWcuZ2V0UGFydGljbGVOdW1iZXIoKTtcclxuICB3aGlsZSggZGlmZiA+IDApe1xyXG4gICBwYXJ0aWNsZXMucG9wKCk7XHJcbiAgIGRpZmYtLTtcclxuICB9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBvaW50ZXJGdW5jdGlvbigpIHtcclxuICB2YXIgcmFkaW9CdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ2N1cnNvci1mdW5jdGlvbicpIGFzIE5vZGVMaXN0T2Y8SFRNTElucHV0RWxlbWVudD5cclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYWRpb0J1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChyYWRpb0J1dHRvbnNbaV0uY2hlY2tlZCkge1xyXG4gICAgICByZXR1cm4gcmFkaW9CdXR0b25zW2ldLnZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEdyYXZpdHlTdHJlbmd0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgQ29uZmlnLnNldEdyYXZpdHlEaXJlY3Rpb24obmV3IFZlYzJEKDAsIHZhbHVlICogMC4xKSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgR3JpZCB9IGZyb20gXCIuL0dyaWRcIjtcclxuaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcnRpY2xlIHtcclxuICBzdGF0aWMgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvcmVncm91bmQtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG4gIHB1YmxpYyBjdXJyZW50UG9zaXRpb246IFZlYzJEO1xyXG4gIHB1YmxpYyBwcmV2aW91c1Bvc2l0aW9uOiBWZWMyRDtcclxuICBwdWJsaWMgYWNjZWxlcmF0aW9uOiBWZWMyRDtcclxuICBwdWJsaWMgcmFkaXVzOiBudW1iZXI7XHJcbiAgcHVibGljIGNvbG9yOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfTtcclxuICBwcml2YXRlIGdyaWQ6IEdyaWQ7XHJcbiAgcHJpdmF0ZSBjZWxsOiBWZWMyRDtcclxuXHJcbiAgY29uc3RydWN0b3IocG9zOiBWZWMyRCwgcmFkaXVzOiBudW1iZXIsIGFjYzogVmVjMkQsIGNvbG9yOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSwgZ3JpZDogR3JpZCkge1xyXG4gICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSBwb3M7XHJcbiAgICB0aGlzLnByZXZpb3VzUG9zaXRpb24gPSB0aGlzLmN1cnJlbnRQb3NpdGlvbjtcclxuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24gPSBhY2M7XHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICB0aGlzLmdyaWQgPSBncmlkO1xyXG4gICAgdGhpcy5jZWxsID0gbmV3IFZlYzJEKE1hdGguZmxvb3IodGhpcy5jdXJyZW50UG9zaXRpb24ueCAvIGdyaWQucGl4ZWxTaXplKSwgTWF0aC5mbG9vcih0aGlzLmN1cnJlbnRQb3NpdGlvbi55IC8gZ3JpZC5waXhlbFNpemUpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBvc2l0aW9uKGR0OiBudW1iZXIpIHtcclxuICAgIGxldCB2ZWxvY2l0eTogVmVjMkQgPSBuZXcgVmVjMkQodGhpcy5jdXJyZW50UG9zaXRpb24ueCAtIHRoaXMucHJldmlvdXNQb3NpdGlvbi54LCB0aGlzLmN1cnJlbnRQb3NpdGlvbi55IC0gdGhpcy5wcmV2aW91c1Bvc2l0aW9uLnkpO1xyXG4gICAgdGhpcy5wcmV2aW91c1Bvc2l0aW9uID0gdGhpcy5jdXJyZW50UG9zaXRpb24uY2xvbmUoKTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbi5hZGQodmVsb2NpdHkpO1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24ubXVsdGlwbHkoZHQgKiBkdCk7XHJcbiAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbi5hZGQodGhpcy5hY2NlbGVyYXRpb24pO1xyXG5cclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uLnggPSAwO1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24ueSA9IDA7XHJcbiAgICB0aGlzLnVwZGF0ZUNlbGwoKTtcclxuICB9XHJcblxyXG4gIGFjY2VsZXJhdGUoYWNjOiBWZWMyRCkge1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24uYWRkKGFjYyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0TmVpZ2hib3JpbmdQYXJ0aWNsZXMoKTogUGFydGljbGVbXSB7XHJcbiAgICBjb25zdCBuZWlnaGJvcmluZ1BhcnRpY2xlczogUGFydGljbGVbXSA9IFtdO1xyXG4gIFxyXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY2VsbC54IC0gMTsgaSA8PSB0aGlzLmNlbGwueCArIDE7IGkrKykge1xyXG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5jZWxsLnkgLSAxOyBqIDw9IHRoaXMuY2VsbC55ICsgMTsgaisrKSB7XHJcbiAgICAgICAgaWYgKGkgPj0gMCAmJiBpIDwgdGhpcy5ncmlkLmNvbHVtbnMgJiYgaiA+PSAwICYmIGogPCB0aGlzLmdyaWQucm93cykge1xyXG4gICAgICAgICAgbmVpZ2hib3JpbmdQYXJ0aWNsZXMucHVzaCguLi50aGlzLmdyaWQuY2VsbHNbaV1bal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5laWdoYm9yaW5nUGFydGljbGVzO1xyXG4gIH1cclxuICBcclxuICB1cGRhdGVDZWxsKCl7XHJcbiAgICB0aGlzLmNlbGwgPSBuZXcgVmVjMkQoTWF0aC5mbG9vcih0aGlzLmN1cnJlbnRQb3NpdGlvbi54IC8gdGhpcy5ncmlkLnBpeGVsU2l6ZSksIE1hdGguZmxvb3IodGhpcy5jdXJyZW50UG9zaXRpb24ueSAvIHRoaXMuZ3JpZC5waXhlbFNpemUpKTtcclxuICB9XHJcblxyXG5cclxuXHJcbn0iLCJpbXBvcnQgeyBmb3JlZ3JvdW5kQ2FudmFzIH0gZnJvbSAnLi9DYW52YXNNYW5hZ2VyJztcclxuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgSW5wdXRIYW5kbGVyIH0gZnJvbSAnLi9JbnB1dEhhbmRsZXInO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi9QYXJ0aWNsZSc7XHJcbmltcG9ydCBWZWMyRCBmcm9tICcuL1ZlYzJEJztcclxuaW1wb3J0IHsgYXR0cmFjdG9ycywgZ3JpZCwgcGFydGljbGVzIH0gZnJvbSAnLi9zY3JpcHQnO1xyXG5cclxuY29uc3QgaW5wdXRIYW5kbGVyID0gSW5wdXRIYW5kbGVyLmdldEluc3RhbmNlKCk7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVQb3NpdGlvbnMoZHQ6IG51bWJlcikge1xyXG4gICAgZ3JpZC5yZW1vdmVBbGwoKTtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gIFxyXG4gICAgICBwYXJ0aWNsZS51cGRhdGVQb3NpdGlvbihkdCk7XHJcbiAgICAgIGdyaWQucHV0KHBhcnRpY2xlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBhcHBseUdyYXZpdHkoKSB7XHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShDb25maWcuZ2V0R3Jhdml0eURpcmVjdGlvbigpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBhcHBseUZpZWxkKGZpZWxkUG9zOiBWZWMyRCkge1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHB1bGxEaXJlY3Rpb24gPSBmaWVsZFBvcy5kaWZmZXJlbmNlKHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbilcclxuICAgICAgY29uc3QgZGlzdGFuY2UgPSBwdWxsRGlyZWN0aW9uLmxlbmd0aCgpO1xyXG4gIFxyXG4gICAgICBpZiAoZGlzdGFuY2UgPCBDb25maWcuZ2V0RmllbGRTaXplKCkgJiYgZGlzdGFuY2UgPiAxMCkge1xyXG4gICAgICAgIHB1bGxEaXJlY3Rpb24ubXVsdGlwbHkoQ29uZmlnLmdldEZpZWxkU3RyZW5ndGgoKSAqIDEwMCk7XHJcbiAgICAgICAgcHVsbERpcmVjdGlvbi5kaXZpZGUoZGlzdGFuY2UgKiBkaXN0YW5jZSk7XHJcbiAgICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShwdWxsRGlyZWN0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBhcHBseUF0dHJhY3RvckZvcmNlc1RvQWxsKCkge1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGFwcGx5QXR0cmFjdG9yRm9yY2VzKHBhcnRpY2xlKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHRpY2soZHQ6IG51bWJlcikge1xyXG4gICAgdmFyIHN1Yl9kdCA9IGR0IC8gQ29uZmlnLmdldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCgpO1xyXG4gIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDb25maWcuZ2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KCk7IGkrKykge1xyXG4gICAgICBpZiAoQ29uZmlnLmdldEdyYXZpdHlEaXJlY3Rpb24oKS55ICE9IDApIHtcclxuICAgICAgICBhcHBseUdyYXZpdHkoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaW5wdXRIYW5kbGVyLmNsaWNrZWQpIHtcclxuICAgICAgICBzd2l0Y2ggKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSkge1xyXG4gICAgICAgICAgY2FzZSAnZmllbGQnOlxyXG4gICAgICAgICAgICBhcHBseUZpZWxkKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2dyYXZpdHknOlxyXG4gICAgICAgICAgICBDb25maWcuc2V0R3Jhdml0eURpcmVjdGlvbihpbnB1dEhhbmRsZXIucG9pbnRlclBvc2l0aW9uLmRpZmZlcmVuY2UoaW5wdXRIYW5kbGVyLmNsaWNrU3RhcnRQb3NpdGlvbikuZGl2aWRlKDQwMCkpO1xyXG4gICAgICAgICAgY2FzZSAndGhyb3cnOlxyXG4gICAgICAgICAgICBicmVhaztcclxuICBcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgIH1cclxuICAgICAgLy8gYXBwbHlBdHRyYWN0b3JGb3JjZXNUb0FsbCgpO1xyXG4gICAgICBhcHBseUNvbnN0cmFpbnRUb0FsbEVkZ2VzKCk7XHJcbiAgICAgIHNvbHZlQ29sbGlzaW9ucygpO1xyXG4gICAgICB1cGRhdGVQb3NpdGlvbnMoc3ViX2R0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludFRvQWxsRWRnZXMoKSB7XHJcblxyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGdyaWQubGVuZ3RoOyBjb2wrKykge1xyXG4gICAgLy8gICBmb3IgKHZhciB0aGlja25lc3MgPSAwOyB0aGlja25lc3MgPCAyOyB0aGlja25lc3MrKykge1xyXG4gICAgLy8gICAgIGdyaWRbY29sXVt0aGlja25lc3NdLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gIFxyXG4gICAgLy8gICAgIGdyaWRbY29sXVtncmlkWzBdLmxlbmd0aCAtIHRoaWNrbmVzcyAtIDFdLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9XHJcbiAgXHJcbiAgICAvLyBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBncmlkWzBdLmxlbmd0aDsgcm93KyspIHtcclxuICAgIC8vICAgZm9yICh2YXIgdGhpY2tuZXNzID0gMDsgdGhpY2tuZXNzIDwgMjsgdGhpY2tuZXNzKyspIHtcclxuICAgIC8vICAgICBncmlkW3RoaWNrbmVzc11bcm93XS5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgLy8gICAgICAgYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlKTtcclxuICAgIC8vICAgICB9KTtcclxuICBcclxuICAgIC8vICAgICBncmlkW2dyaWQubGVuZ3RoIC0gdGhpY2tuZXNzIC0gMV1bcm93XS5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgLy8gICAgICAgYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZTogUGFydGljbGUpIHtcclxuICAgIC8vIEFwcGx5IGZsb29yIGNvbnN0cmFpbnRcclxuICAgIGlmIChwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueSArIHBhcnRpY2xlLnJhZGl1cyA+IGZvcmVncm91bmRDYW52YXMuaGVpZ2h0KSB7XHJcbiAgICAgIHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55ID0gZm9yZWdyb3VuZENhbnZhcy5oZWlnaHQgLSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICAgIHBhcnRpY2xlLnByZXZpb3VzUG9zaXRpb24ueSA9IHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55ICsgcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5wcmV2aW91c1Bvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyBBcHBseSBDZWlsaW5nIGNvbnN0cmFpbnRcclxuICAgIGlmIChwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueSAtIHBhcnRpY2xlLnJhZGl1cyA8IDApIHtcclxuICAgICAgcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnkgPSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICAgIHBhcnRpY2xlLnByZXZpb3VzUG9zaXRpb24ueSA9IHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55ICsgcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5wcmV2aW91c1Bvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgXHJcbiAgXHJcbiAgICAvLyBBcHBseSBsZWZ0IHdhbGwgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi54IC0gcGFydGljbGUucmFkaXVzIDwgMCkge1xyXG4gICAgICBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueCA9IHBhcnRpY2xlLnJhZGl1cztcclxuICAgICAgcGFydGljbGUucHJldmlvdXNQb3NpdGlvbi54ID0gcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnggKyBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueCAtIHBhcnRpY2xlLnByZXZpb3VzUG9zaXRpb24ueDtcclxuICAgIH1cclxuICBcclxuICAgIC8vIEFwcGx5IHJpZ2h0IHdhbGwgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi54ICsgcGFydGljbGUucmFkaXVzID4gZm9yZWdyb3VuZENhbnZhcy53aWR0aCkge1xyXG4gICAgICBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueCA9IGZvcmVncm91bmRDYW52YXMud2lkdGggLSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gYXBwbHlBdHRyYWN0b3JGb3JjZXMocGFydGljbGU6IFBhcnRpY2xlKSB7XHJcbiAgICBhdHRyYWN0b3JzLmZvckVhY2goKGF0dHJhY3RvcikgPT4ge1xyXG4gICAgICBjb25zdCBwdWxsRGlyZWN0aW9uID0gYXR0cmFjdG9yLnBvc2l0aW9uLmRpZmZlcmVuY2UocGFydGljbGUuY3VycmVudFBvc2l0aW9uKVxyXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHB1bGxEaXJlY3Rpb24ubGVuZ3RoKCk7XHJcbiAgXHJcbiAgICAgIGlmIChkaXN0YW5jZSA8IGF0dHJhY3Rvci5yYWRpdXMgJiYgZGlzdGFuY2UgPiAxMCkge1xyXG4gICAgICAgIHB1bGxEaXJlY3Rpb24ubXVsdGlwbHkoYXR0cmFjdG9yLmZvcmNlKTtcclxuICAgICAgICBwdWxsRGlyZWN0aW9uLmRpdmlkZShkaXN0YW5jZSAqIGRpc3RhbmNlKVxyXG4gICAgICAgIHBhcnRpY2xlLmFjY2VsZXJhdGUocHVsbERpcmVjdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzb2x2ZUNvbGxpc2lvbnMoKSB7XHJcbiAgICB2YXIgbnVtYmVyT2ZDb2xsaXNpb25zID0gMDtcclxuICBcclxuICBcclxuICAgIGxldCB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uID0gbmV3IFZlYzJEKDAsIDApO1xyXG4gICAgbGV0IHNxdWFyZWREaXN0YW5jZSA9IDA7XHJcbiAgICBsZXQgcmFkaWlTdW0gPSAwO1xyXG4gICAgbGV0IHNxdWFyZWRSYWRpaVN1bSA9IDA7XHJcbiAgXHJcbiAgICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUxKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5laWdoYm9yaW5nUGFydGljbGVzID0gcGFydGljbGUxLmdldE5laWdoYm9yaW5nUGFydGljbGVzKCk7XHJcbiAgICAgIG5laWdoYm9yaW5nUGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlMikgPT4ge1xyXG4gICAgICAgIGlmIChwYXJ0aWNsZTEgPT09IHBhcnRpY2xlMikgcmV0dXJuO1xyXG4gIFxyXG4gICAgICAgIHRlbXBDb2xsaXNpb25EaXJlY3Rpb24uc2V0KHBhcnRpY2xlMS5jdXJyZW50UG9zaXRpb24pLnN1YnRyYWN0KHBhcnRpY2xlMi5jdXJyZW50UG9zaXRpb24pO1xyXG4gICAgICAgIHNxdWFyZWREaXN0YW5jZSA9IHRlbXBDb2xsaXNpb25EaXJlY3Rpb24uc3F1YXJlZExlbmd0aCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJhZGlpU3VtID0gcGFydGljbGUxLnJhZGl1cyArIHBhcnRpY2xlMi5yYWRpdXM7XHJcbiAgICAgICAgc3F1YXJlZFJhZGlpU3VtID0gcmFkaWlTdW0gKiByYWRpaVN1bTtcclxuICBcclxuICAgICAgICBpZiAoc3F1YXJlZERpc3RhbmNlIDwgc3F1YXJlZFJhZGlpU3VtICYmIHNxdWFyZWREaXN0YW5jZSAhPSAwKSB7XHJcbiAgICAgICAgICBudW1iZXJPZkNvbGxpc2lvbnMrKztcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoc3F1YXJlZERpc3RhbmNlKTtcclxuICAgICAgICAgICAgdGVtcENvbGxpc2lvbkRpcmVjdGlvbi5kaXZpZGUoZGlzdGFuY2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgZGVsdGEgPSByYWRpaVN1bSAtIGRpc3RhbmNlO1xyXG4gICAgICAgICAgICB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLm11bHRpcGx5KGRlbHRhICogMC41KTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgcGFydGljbGUxLmN1cnJlbnRQb3NpdGlvbi5hZGQodGVtcENvbGxpc2lvbkRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlMi5jdXJyZW50UG9zaXRpb24uc3VidHJhY3QodGVtcENvbGxpc2lvbkRpcmVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2cobnVtYmVyT2ZDb2xsaXNpb25zKTtcclxuICB9XHJcbiAgIiwiaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XHJcbmltcG9ydCBwYXJ0aWNsZUZyYWdtZW50U2hhZGVyIGZyb20gXCIuL3NoYWRlcnMvcGFydGljbGVGcmFnbWVudFNoYWRlci5mcmFnXCI7XHJcbmltcG9ydCBwYXJ0aWNsZVZlcnRleFNoYWRlciBmcm9tIFwiLi9zaGFkZXJzL3BhcnRpY2xlVmVydGV4U2hhZGVyLnZlcnRcIjtcclxuaW1wb3J0IHsgY3JlYXRlUHJvZ3JhbSwgY3JlYXRlU2hhZGVyLCByZXNpemVDYW52YXNUb0Rpc3BsYXlTaXplIH0gZnJvbSBcIi4vU2hhZGVySGVscGVyXCI7XHJcbmltcG9ydCBBdHRyYWN0b3IgZnJvbSBcIi4vQXR0cmFjdG9yXCI7XHJcbmltcG9ydCB7IGJhY2tncm91bmRDYW52YXNDdHgsIGZvcmVncm91bmRDYW52YXMsIGZvcmVncm91bmRDYW52YXNDdHggfSBmcm9tIFwiLi9DYW52YXNNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGFwcGx5QXR0cmFjdG9yRm9yY2VzLCBhcHBseUNvbnN0cmFpbnQgfSBmcm9tIFwiLi9QaHlzaWNzRW5naW5lXCI7XHJcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuL0lucHV0SGFuZGxlclwiO1xyXG5pbXBvcnQgeyBncmlkLCBwYXJ0aWNsZXMgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gXCIuL1BhcnRpY2xlXCI7XHJcbmltcG9ydCB7IGdldEF2ZXJhZ2VGcmFtZVRpbWUgfSBmcm9tIFwiLi9VSU1hbmFnZXJcIjtcclxuXHJcblxyXG52YXIgd2ViZ2xDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2ViZ2wtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbnZhciBnbCA9IHdlYmdsQ2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKTtcclxud2ViZ2xDYW52YXMhLndpZHRoID0gd2ViZ2xDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbndlYmdsQ2FudmFzIS5oZWlnaHQgPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcblxyXG5jb25zdCBpbnB1dEhhbmRsZXIgPSBJbnB1dEhhbmRsZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbmlmICghZ2wpIHtcclxuICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGluaXRpYWxpemUgV2ViR0wuIFlvdXIgYnJvd3NlciBtYXkgbm90IHN1cHBvcnQgaXQuXCIpO1xyXG59XHJcblxyXG4vL2VuYWxiaW5nIGJsZW5kaW5nIGZvciBwcm9wZXIgYWxwaGEgb24gdGhlIHBhcnRpY2xlc1xyXG5nbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG5nbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbi8vY29tcGlsaW5nIHRoZSBzaGFkZXJzIHdpdGggYSBoZWxwZXIgZnVuY3Rpb25cclxudmFyIHZlcnRleFNoYWRlciA9IGNyZWF0ZVNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgcGFydGljbGVWZXJ0ZXhTaGFkZXIpO1xyXG52YXIgZnJhZ21lbnRTaGFkZXIgPSBjcmVhdGVTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgcGFydGljbGVGcmFnbWVudFNoYWRlcik7XHJcblxyXG4vL2NyZWF0aW5nIGEgV2ViR0wgcHJvZ3JhbSBhbmQgYXR0YWNoaW5nIHRoZSBzaGFkZXJzIHRvIGl0IHdpdGggYSBoZWxwZXIgZnVuY3Rpb25cclxudmFyIHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKTtcclxuXHJcbi8vbG9va2luZyB1cCB1bmlmb3JtIGxvY2F0aW9uIGFuZCB3aGVyZSB0aGUgdmVydGV4IGRhdGEgbmVlZHMgdG8gZ29cclxudmFyIHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XHJcbnZhciByZXNvbHV0aW9uVW5pZm9ybUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9yZXNvbHV0aW9uXCIpO1xyXG52YXIgY29sb3JVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJ1X2NvbG9yXCIpO1xyXG52YXIgdHJhbnNsYXRpb25Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfdHJhbnNsYXRpb25cIik7XHJcbnZhciByYWRpdXNVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJ1X3JhZGl1c1wiKTtcclxudmFyIG91dGxpbmVVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJ1X291dGxpbmVfYmxhY2tcIik7XHJcbnZhciBwb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG5nbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xyXG5cclxuZnVuY3Rpb24gc2V0UmVjdGFuZ2xlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHg6bnVtYmVyLCB5Om51bWJlciwgd2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKSB7XHJcbiAgdmFyIHgxID0geCAtIHdpZHRoIC8gMjtcclxuICB2YXIgeDIgPSB4ICsgd2lkdGggLyAyO1xyXG4gIHZhciB5MSA9IHkgLSBoZWlnaHQgLyAyO1xyXG4gIHZhciB5MiA9IHkgKyBoZWlnaHQgLyAyO1xyXG4gXHJcbiAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgIHgxLCB5MSxcclxuICAgICB4MiwgeTEsXHJcbiAgICAgeDEsIHkyLFxyXG4gICAgIHgxLCB5MixcclxuICAgICB4MiwgeTEsXHJcbiAgICAgeDIsIHkyXSksIGdsLlNUQVRJQ19EUkFXKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEdlb21ldHJ5KCl7XHJcbiAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICBzZXRSZWN0YW5nbGUoXHJcbiAgICAgIGdsLCAwLCAwLCBDb25maWcuZ2V0R3JpZFNpemUoKSwgQ29uZmlnLmdldEdyaWRTaXplKCkpO1xyXG4gIH0pO1xyXG5cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd1BhcnRpY2xlcygpIHtcclxuICByZXNpemVDYW52YXNUb0Rpc3BsYXlTaXplKGdsLmNhbnZhcyk7XHJcblxyXG4gIC8vIFRlbGwgV2ViR0wgaG93IHRvIGNvbnZlcnQgZnJvbSBjbGlwIHNwYWNlIHRvIHBpeGVsc1xyXG4gIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcblxyXG4gIC8vIENsZWFyIHRoZSBjYW52YXNcclxuICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApOyAvLyBDbGVhciB0byB0cmFuc3BhcmVudCBibGFja1xyXG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xyXG5cclxuICAvLyBUZWxsIGl0IHRvIHVzZSBwcm9ncmFtIChwYWlyIG9mIHNoYWRlcnMpXHJcbiAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbik7XHJcblxyXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkJ1ZmZlcik7XHJcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gIHZhciBvdXRsaW5lQ29sb3IgPSBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWlzLW91dGxpbmUtZGFyaycpKTtcclxuICB2YXIgcmVzb2x1dGlvbiA9IFtnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHRdXHJcbiAgLy8gRHJhdyB0aGUgcmVjdGFuZ2xlLlxyXG4gIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgICBnbC51bmlmb3JtMmZ2KHJlc29sdXRpb25Vbmlmb3JtTG9jYXRpb24sIHJlc29sdXRpb24pO1xyXG4gICAgICBnbC51bmlmb3JtMmYodHJhbnNsYXRpb25Mb2NhdGlvbiwgcGFydGljbGUuY3VycmVudFBvc2l0aW9uLngsIHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55KTtcclxuICAgICAgZ2wudW5pZm9ybTNmKGNvbG9yVW5pZm9ybUxvY2F0aW9uLCBwYXJ0aWNsZS5jb2xvci5yLHBhcnRpY2xlLmNvbG9yLmcsIHBhcnRpY2xlLmNvbG9yLmIpO1xyXG4gICAgICBnbC51bmlmb3JtMWYocmFkaXVzVW5pZm9ybUxvY2F0aW9uLCBwYXJ0aWNsZS5yYWRpdXMpXHJcbiAgICAgIGdsLnVuaWZvcm0xZihvdXRsaW5lVW5pZm9ybUxvY2F0aW9uLCBvdXRsaW5lQ29sb3IpO1xyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgNik7XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3QXR0cmFjdG9ycyhhdHRyYWN0b3JzOiBBdHRyYWN0b3JbXSkge1xyXG4gIGF0dHJhY3RvcnMuZm9yRWFjaCgoYXR0cmFjdG9yKSA9PiB7XHJcbiAgICBhdHRyYWN0b3IuYW5pbWF0ZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdEb3R0ZWRMaW5lKGZyb206IFZlYzJELCB0bzogVmVjMkQsIHJhZGl1czogbnVtYmVyID0gNSwgZG90Q291bnQ6IG51bWJlciA9IDgpIHtcclxuICBpZiAoaW5wdXRIYW5kbGVyLmNsaWNrZWQgJiYgZnJvbS54ICE9IHRvLnggJiYgZnJvbS55ICE9IHRvLnkpIHtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0gZnJvbS5kaWZmZXJlbmNlKHRvKTtcclxuICAgIGRyYXdQcmVkaWN0ZWRQYXRoKGZyb20uY2xvbmUoKSwgZGlzdGFuY2UuY2xvbmUoKSlcclxuICAgIGRpc3RhbmNlLmRpdmlkZShkb3RDb3VudCk7XHJcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHRvLnkgLSBmcm9tLnksIHRvLnggLSBmcm9tLngpO1xyXG4gICAgdmFyIG5ld190byA9IG5ldyBWZWMyRCh0by54LCB0by55KTtcclxuXHJcbiAgICBuZXdfdG8ueCAtPSBNYXRoLmNvcyhhbmdsZSk7XHJcbiAgICBuZXdfdG8ueSAtPSBNYXRoLnNpbihhbmdsZSk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZG90Q291bnQ7IGkrKykge1xyXG4gICAgICB2YXIgZG90WCA9IGZyb20ueCAtIGRpc3RhbmNlLnggKiBpO1xyXG4gICAgICB2YXIgZG90WSA9IGZyb20ueSAtIGRpc3RhbmNlLnkgKiBpO1xyXG4gICAgICBkcmF3RG90KGRvdFgsIGRvdFksIHJhZGl1cywgMjU1KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd1ByZWRpY3RlZFBhdGgoc3RhcnRQb3M6IFZlYzJELCBBY2NlbGVyYXRpb25WZWN0b3I6IFZlYzJEKSB7XHJcbiAgbGV0IGRvdENvdW50ID0gMTI3O1xyXG4gIGxldCBwcmVkaWN0ZWREb3QgPSBuZXcgUGFydGljbGUoc3RhcnRQb3MsIENvbmZpZy5nZXRHcmlkU2l6ZSgpLzIsIEFjY2VsZXJhdGlvblZlY3Rvciwge3I6MCwgZzowLCBiOjB9LGdyaWQpXHJcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZG90Q291bnQ7IGkrKykge1xyXG5cclxuICAgIHByZWRpY3RlZERvdC5hY2NlbGVyYXRlKENvbmZpZy5nZXRHcmF2aXR5RGlyZWN0aW9uKCkpO1xyXG4gICAgYXBwbHlDb25zdHJhaW50KHByZWRpY3RlZERvdCk7XHJcbiAgICBhcHBseUF0dHJhY3RvckZvcmNlcyhwcmVkaWN0ZWREb3QpO1xyXG4gICAgcHJlZGljdGVkRG90LnVwZGF0ZVBvc2l0aW9uKGdldEF2ZXJhZ2VGcmFtZVRpbWUoKS8yMCk7XHJcbiAgICBpZiAoaSAlIDMgPT0gMCkge1xyXG4gICAgICBkcmF3RG90KHByZWRpY3RlZERvdC5jdXJyZW50UG9zaXRpb24ueCwgcHJlZGljdGVkRG90LmN1cnJlbnRQb3NpdGlvbi55LCA1LCAyNTUgLSBpKjIpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RG90KGRvdFg6IG51bWJlciwgZG90WTogbnVtYmVyLCBkb3RTaXplOiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcikge1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgZm9yZWdyb3VuZENhbnZhc0N0eC5hcmMoXHJcbiAgICBkb3RYLFxyXG4gICAgZG90WSxcclxuICAgIGRvdFNpemUsXHJcbiAgICAwLFxyXG4gICAgMiAqIE1hdGguUEksXHJcbiAgICBmYWxzZVxyXG4gICk7XHJcblxyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gYHJnYmEoMjEwLCAyMTAsIDIxMCwgJHtvcGFjaXR5IC8gMjU1fSlgO1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbCgpO1xyXG5cclxuICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0xhc3NvKGxpbmVXaWR0aDogbnVtYmVyID0gMykge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYXJjKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24ueCwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbi55LCBDb25maWcuZ2V0RmllbGRTaXplKCksIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2VTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWdyaWQtY29sb3InKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdBcnJvdyhmcm9tOiBWZWMyRCwgdG86IFZlYzJEKSB7XHJcbiAgaWYgKGlucHV0SGFuZGxlci5jbGlja2VkICYmIGZyb20ueCAhPSB0by54ICYmIGZyb20ueSAhPSB0by55KSB7XHJcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHRvLnkgLSBmcm9tLnksIHRvLnggLSBmcm9tLngpO1xyXG4gICAgY29uc3Qgd2lkdGggPSAxMDtcclxuICAgIHZhciBoZWFkbGVuID0gMTA7XHJcbiAgICB2YXIgbmV3X3RvID0gbmV3IFZlYzJEKHRvLngsIHRvLnkpO1xyXG4gICAgLy8gVGhpcyBtYWtlcyBpdCBzbyB0aGUgZW5kIG9mIHRoZSBhcnJvdyBoZWFkIGlzIGxvY2F0ZWQgYXQgdG94LCB0b3ksIGRvbid0IGFzayB3aGVyZSAxLjE1IGNvbWVzIGZyb21cclxuICAgIG5ld190by54IC09IE1hdGguY29zKGFuZ2xlKSAqICgod2lkdGggKiAxLjE1KSk7XHJcbiAgICBuZXdfdG8ueSAtPSBNYXRoLnNpbihhbmdsZSkgKiAoKHdpZHRoICogMS4xNSkpO1xyXG5cclxuXHJcblxyXG4gICAgLy9zdGFydGluZyBwYXRoIG9mIHRoZSBhcnJvdyBmcm9tIHRoZSBzdGFydCBzcXVhcmUgdG8gdGhlIGVuZCBzcXVhcmUgYW5kIGRyYXdpbmcgdGhlIHN0cm9rZVxyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubW92ZVRvKGZyb20ueCwgZnJvbS55KTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVRvKG5ld190by54LCBuZXdfdG8ueSk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvL3N0YXJ0aW5nIGEgbmV3IHBhdGggZnJvbSB0aGUgaGVhZCBvZiB0aGUgYXJyb3cgdG8gb25lIG9mIHRoZSBzaWRlcyBvZiB0aGUgcG9pbnRcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4Lm1vdmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL3BhdGggZnJvbSB0aGUgc2lkZSBwb2ludCBvZiB0aGUgYXJyb3csIHRvIHRoZSBvdGhlciBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRsZW4gKiBNYXRoLmNvcyhhbmdsZSArIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkbGVuICogTWF0aC5zaW4oYW5nbGUgKyBNYXRoLlBJIC8gNykpO1xyXG5cclxuICAgIC8vcGF0aCBmcm9tIHRoZSBzaWRlIHBvaW50IGJhY2sgdG8gdGhlIHRpcCBvZiB0aGUgYXJyb3csIGFuZCB0aGVuIGFnYWluIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL2RyYXdzIHRoZSBwYXRocyBjcmVhdGVkIGFib3ZlXHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmZpbGwoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguY2xvc2VQYXRoKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0N1cnNvckZ1bmN0aW9uKCkge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG5zd2l0Y2ggKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSkge1xyXG4gIGNhc2UgJ2ZpZWxkJzpcclxuICAgIGRyYXdMYXNzbygpO1xyXG4gICAgYnJlYWs7XHJcbiAgY2FzZSAnZ3Jhdml0eSc6XHJcbiAgICBkcmF3QXJyb3coaW5wdXRIYW5kbGVyLmNsaWNrU3RhcnRQb3NpdGlvbiwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbilcclxuICAgIGJyZWFrO1xyXG4gIGNhc2UgJ3Rocm93JzpcclxuICAgIGRyYXdEb3R0ZWRMaW5lKGlucHV0SGFuZGxlci5jbGlja1N0YXJ0UG9zaXRpb24sIGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24pXHJcbiAgICBicmVhaztcclxufVxyXG4gIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFkZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdHlwZTogYW55LCBzb3VyY2U6IGFueSkge1xyXG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICB2YXIgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlciwgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyKSB7XHJcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdmFyIHN1Y2Nlc3MgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBwcm9ncmFtO1xyXG4gICAgfVxyXG4gICBcclxuICAgIGNvbnNvbGUubG9nKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcclxuICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZShjYW52YXM6YW55KSB7XHJcbiAgICAvLyBMb29rdXAgdGhlIHNpemUgdGhlIGJyb3dzZXIgaXMgZGlzcGxheWluZyB0aGUgY2FudmFzIGluIENTUyBwaXhlbHMuXHJcbiAgICBjb25zdCBkaXNwbGF5V2lkdGggID0gY2FudmFzLmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgZGlzcGxheUhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbnZhcyBpcyBub3QgdGhlIHNhbWUgc2l6ZS5cclxuICAgIGNvbnN0IG5lZWRSZXNpemUgPSBjYW52YXMud2lkdGggICE9PSBkaXNwbGF5V2lkdGggfHxcclxuICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ICE9PSBkaXNwbGF5SGVpZ2h0O1xyXG4gICBcclxuICAgIGlmIChuZWVkUmVzaXplKSB7XHJcbiAgICAgIC8vIE1ha2UgdGhlIGNhbnZhcyB0aGUgc2FtZSBzaXplXHJcbiAgICAgIGNhbnZhcy53aWR0aCAgPSBkaXNwbGF5V2lkdGg7XHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xyXG4gICAgfVxyXG4gICBcclxuICAgIHJldHVybiBuZWVkUmVzaXplO1xyXG5cclxuICB9IiwiaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuXHJcbmxldCBmcHNDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbmZwc0NvdW50ZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5mcHNDb3VudGVyLnN0eWxlLnRvcCA9ICcxMHB4JztcclxuZnBzQ291bnRlci5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xyXG5cclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmcHNDb3VudGVyKTtcclxuXHJcbmV4cG9ydCB2YXIgZnBzID0gNjA7XHJcbmV4cG9ydCB2YXIgZnJhbWVUaW1lczpudW1iZXJbXSA9IFtdO1xyXG5jb25zdCBtYXhGcmFtZXMgPSAxMDA7IFxyXG5cclxubGV0IGxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVUkoKSB7XHJcbiAgICBsZXQgYXZlcmFnZWRGUFMgPSBjYWxjdWxhdGVGUFMoKTtcclxuICAgIGZwc0NvdW50ZXIuaW5uZXJUZXh0ID0gYEZQUzogJHtNYXRoLnJvdW5kKGF2ZXJhZ2VkRlBTKX1gO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVGUFMoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgY29uc3QgdGltZURpZmYgPSBjdXJyZW50VGltZSAtIGxhc3RUaW1lO1xyXG4gICAgZnJhbWVUaW1lcy5wdXNoKHRpbWVEaWZmKTtcclxuXHJcbiAgICBpZiAoZnJhbWVUaW1lcy5sZW5ndGggPiBtYXhGcmFtZXMpIHtcclxuICAgICAgICBmcmFtZVRpbWVzLnNoaWZ0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0IGF2ZXJhZ2VGUFMgPSBmcmFtZVRpbWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gZnJhbWVUaW1lcy5sZW5ndGg7XHJcblxyXG4gICAgbGFzdFRpbWUgPSBjdXJyZW50VGltZTtcclxuXHJcbiAgICByZXR1cm4gMTAwMCAvIGF2ZXJhZ2VGUFM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmVyYWdlRnJhbWVUaW1lKCl7XHJcbiAgICByZXR1cm4gZnJhbWVUaW1lcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIGZyYW1lVGltZXMubGVuZ3RoO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBnOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBiOiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbiAgfVxyXG4gICIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlYzJEIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBhZGQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ICs9IG90aGVyLng7XHJcbiAgICAgIHRoaXMueSArPSBvdGhlci55O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ID0gb3RoZXIueDtcclxuICAgICAgdGhpcy55ID0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN1YnRyYWN0KG90aGVyOiBWZWMyRCl7XHJcbiAgICAgIHRoaXMueCAtPSBvdGhlci54O1xyXG4gICAgICB0aGlzLnkgLT0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBtdWx0aXBseShzY2FsYXI6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnggKj0gc2NhbGFyO1xyXG4gICAgICB0aGlzLnkgKj0gc2NhbGFyO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICBcclxuICAgIGRpdmlkZShzY2FsYXI6IG51bWJlcil7XHJcbiAgICAgIHRoaXMueCAvPSBzY2FsYXI7XHJcbiAgICAgIHRoaXMueSAvPSBzY2FsYXI7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZG90KHZlYzogVmVjMkQpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICogdmVjLnggKyB0aGlzLnkgKiB2ZWMueTtcclxuICAgIH1cclxuXHJcbiAgICBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNxdWFyZWRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBWZWMyRHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMyRCh0aGlzLngsIHRoaXMueSlcclxuICAgIH1cclxuXHJcbiAgICBkaWZmZXJlbmNlKG90aGVyOiBWZWMyRCk6IFZlYzJEe1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzJEKHRoaXMueCAtIG90aGVyLngsIHRoaXMueSAtIG90aGVyLnkpXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IEF0dHJhY3RvciBmcm9tIFwiLi9BdHRyYWN0b3JcIjtcclxuaW1wb3J0IHsgZHJhd0Fycm93LCBkcmF3TGFzc28sIGRyYXdQYXJ0aWNsZXMsIGRyYXdEb3R0ZWRMaW5lLCBzZXRHZW9tZXRyeSwgZHJhd0N1cnNvckZ1bmN0aW9uIH0gZnJvbSBcIi4vUmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgY2xvc2VNZW51LCB1cGRhdGVQb2ludGVyRnVuY3Rpb24gfSBmcm9tIFwiLi9NZW51TWFuYWdlclwiO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSBcIi4vUGFydGljbGVcIjtcclxuaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcbmltcG9ydCB7IGZwcywgZ2V0QXZlcmFnZUZyYW1lVGltZSwgdXBkYXRlVUkgfSBmcm9tIFwiLi9VSU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgYmFja2dyb3VuZENhbnZhcywgY2xlYXJDYW52YXMsIGZvcmVncm91bmRDYW52YXMgfSBmcm9tIFwiLi9DYW52YXNNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHRpY2sgfSBmcm9tIFwiLi9QaHlzaWNzRW5naW5lXCI7XHJcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9HcmlkXCI7XHJcbmltcG9ydCB7IGdldFJhbmRvbUNvbG9yIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuXHJcbmV4cG9ydCB2YXIgcGFydGljbGVzOiBQYXJ0aWNsZVtdID0gW107XHJcbmV4cG9ydCB2YXIgYXR0cmFjdG9yczogQXR0cmFjdG9yW10gPSBbXTtcclxuXHJcbmxldCBmcmFtZUNvdW50ID0gMDtcclxuZXhwb3J0IGxldCBncmlkID0gbmV3IEdyaWQoYmFja2dyb3VuZENhbnZhcyk7XHJcblxyXG5mdW5jdGlvbiBhbmltYXRlKCkge1xyXG4gIGxldCBmcmFtZVRpbWUgPSBnZXRBdmVyYWdlRnJhbWVUaW1lKClcclxuICB0aWNrKGZyYW1lVGltZS8yMCk7XHJcblxyXG4gIGNsZWFyQ2FudmFzKCk7XHJcbiAgZHJhd1BhcnRpY2xlcygpO1xyXG4gIGRyYXdDdXJzb3JGdW5jdGlvbigpO1xyXG4gIC8vIGRyYXdHcmlkKCk7XHJcbiAgLy8gZHJhd0F0dHJhY3RvcnMoKTtcclxuICB1cGRhdGVVSSgpO1xyXG5cclxuICBjb25zdCBtdWx0ID0gMTAgL2ZyYW1lVGltZTtcclxuICBpZiAoZnJhbWVDb3VudCAlIDMgPT09IDAgJiYgcGFydGljbGVzLmxlbmd0aCA8IENvbmZpZy5nZXRQYXJ0aWNsZU51bWJlcigpICYmIGZyYW1lQ291bnQgPiAxMjApIHtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAyMDApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMjAwICogbXVsdCwgLTgwICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAyNjApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMTgwICogbXVsdCwgLTgwICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAzMjApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMTcwICogbXVsdCwgLTgwICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAzODApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMTgwICogbXVsdCwgLTgwICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCA0NDApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMTcwICogbXVsdCwgLTgwICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHNldEdlb21ldHJ5KCk7XHJcbiAgfVxyXG4gIGZyYW1lQ291bnQrKztcclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbn1cclxuXHJcbmdyaWQuZHJhdygpO1xyXG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvc2NyaXB0LnRzXCIpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvTWVudU1hbmFnZXIudHNcIik7XG4iXSwibmFtZXMiOlsiZm9yZWdyb3VuZENhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJiYWNrZ3JvdW5kQ2FudmFzIiwid2ViZ2xDYW52YXMiLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsImZvcmVncm91bmRDYW52YXNDdHgiLCJnZXRDb250ZXh0IiwiYmFja2dyb3VuZENhbnZhc0N0eCIsImNsZWFyQ2FudmFzIiwiY2xlYXJSZWN0IiwidXBkYXRlQ2FudmFzU2l6ZSIsImdyaWQiLCJjYW52YXMiLCJ1cGRhdGVTaXplIiwiZHJhdyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaWVsZFN0cmVuZ3RoIiwicGh5c2ljc1N1YnN0ZXBzQW1vdW50IiwiZ3Jhdml0eURpcmVjdGlvbiIsImZpZWxkU2l6ZSIsInBhcnRpY2xlTnVtYmVyIiwicG9pbnRlckZ1bmN0aW9uIiwiZ3JpZFNpemUiLCJneXJvRW5hYmxlZCIsImdldEdyYXZpdHlEaXJlY3Rpb24iLCJnZXRQaHlzaWNzU3Vic3RlcHNBbW91bnQiLCJnZXRGaWVsZFN0cmVuZ3RoIiwiZ2V0RmllbGRTaXplIiwiZ2V0UGFydGljbGVOdW1iZXIiLCJnZXRQb2ludGVyRnVuY3Rpb24iLCJnZXRHcmlkU2l6ZSIsImlzR3lyb0VuYWJsZWQiLCJzZXRHcmF2aXR5RGlyZWN0aW9uIiwibmV3R3Jhdml0eURpcmVjdGlvbiIsInNldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCIsIm5ld0Ftb3VudCIsInNldEZpZWxkU3RyZW5ndGgiLCJuZXdmaWVsZFN0cmVuZ3RoIiwic2V0RmllbGRTaXplIiwibmV3ZmllbGRTaXplIiwic2V0UGFydGljbGVOdW1iZXIiLCJuZXdQYXJ0aWNsZU51bWJlciIsInNldFBvaW50ZXJGdW5jdGlvbiIsIm5ld1BvaW50ZXJGdW5jdGlvbiIsInNldElzR3lyb0VuYWJsZWQiLCJuZXdJc0d5cm9FbmFibGVkIiwiZ3JpZFBpeGVsU2l6ZSIsInRoaXMiLCJwaXhlbFNpemUiLCJjb2x1bW5zIiwiTWF0aCIsImNlaWwiLCJyb3dzIiwiY2VsbHMiLCJpbml0aWFsaXplIiwiY2FudmFzQ3R4IiwiaSIsImoiLCJyZW1vdmVBbGwiLCJwdXQiLCJwYXJ0aWNsZSIsImNvbHVtbiIsImZsb29yIiwiY3VycmVudFBvc2l0aW9uIiwieCIsInJvdyIsInkiLCJsZW5ndGgiLCJwdXNoIiwic3Ryb2tlU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImxpbmVXaWR0aCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNsaWNrZWQiLCJwb2ludGVyUG9zaXRpb24iLCJjbGlja1N0YXJ0UG9zaXRpb24iLCJnZXRJbnN0YW5jZSIsIklucHV0SGFuZGxlciIsImluc3RhbmNlIiwiaW5pdGlhbGl6ZUV2ZW50TGlzdGVuZXJzIiwibWFpbl9ib2R5IiwiaGFuZGxlTW91c2VEb3duIiwiYmluZCIsImhhbmRsZU1vdXNlVXAiLCJoYW5kbGVNb3ZlRXZlbnQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNsb3NlTWVudSIsImhhbmRsZU9yaWVudGF0aW9uIiwiTW91c2VFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiVG91Y2hFdmVudCIsInRvdWNoZXMiLCJsYXVuY2hfZGlyIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwibXVsdGlwbHkiLCJmcHMiLCJwYXJ0aWNsZXMiLCJnZXRSYW5kb21Db2xvciIsImFscGhhIiwiYmV0YSIsImdhbW1hIiwiY29uc29sZSIsImxvZyIsIm1lbnVCdXR0b24iLCJtZW51RWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3Blbk1lbnUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImN1cnNvciIsImZvckVhY2giLCJlbGVtZW50Iiwic2V0VGltZW91dCIsImRpc3BsYXkiLCJxdWVyeVNlbGVjdG9yIiwibmV3VGhlbWUiLCJyb290RWxlbSIsImZpZWxkU2l6ZVNsaWRlciIsImZpZWxkU3RyZW5ndGhTbGlkZXIiLCJncmF2aXR5U3RyZW5ndGhTbGlkZXIiLCJzdWJzdGVwc0Ftb3VudEVudHJ5Qm94IiwicGFydGljbGVzQW1vdW50RW50cnlCb3giLCJneXJvRW5hYmxlZENoZWNrQm94IiwidG9nZ2xlR3lybyIsImNoZWNrZWQiLCJ1cGRhdGVQb2ludGVyRnVuY3Rpb24iLCJyYWRpb0J1dHRvbnMiLCJnZXRFbGVtZW50c0J5TmFtZSIsInZhbHVlIiwic2V0R3Jhdml0eVN0cmVuZ3RoIiwicmFkaW9CdXR0b24iLCJvbmlucHV0IiwicGFyc2VJbnQiLCJEZXZpY2VPcmllbnRhdGlvbkV2ZW50IiwicmVxdWVzdFBlcm1pc3Npb24iLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImVycm9yIiwiZGlmZiIsInBvcCIsInBvcyIsInJhZGl1cyIsImFjYyIsImNvbG9yIiwicHJldmlvdXNQb3NpdGlvbiIsImFjY2VsZXJhdGlvbiIsImNlbGwiLCJ1cGRhdGVQb3NpdGlvbiIsImR0IiwidmVsb2NpdHkiLCJhZGQiLCJ1cGRhdGVDZWxsIiwiYWNjZWxlcmF0ZSIsImdldE5laWdoYm9yaW5nUGFydGljbGVzIiwibmVpZ2hib3JpbmdQYXJ0aWNsZXMiLCJpbnB1dEhhbmRsZXIiLCJ1cGRhdGVQb3NpdGlvbnMiLCJhcHBseUZpZWxkIiwiZmllbGRQb3MiLCJwdWxsRGlyZWN0aW9uIiwiZGlzdGFuY2UiLCJkaXZpZGUiLCJhcHBseUF0dHJhY3RvckZvcmNlc1RvQWxsIiwiYXBwbHlBdHRyYWN0b3JGb3JjZXMiLCJ0aWNrIiwic3ViX2R0IiwiYXBwbHlDb25zdHJhaW50Iiwic29sdmVDb2xsaXNpb25zIiwiYXR0cmFjdG9ycyIsImF0dHJhY3RvciIsInBvc2l0aW9uIiwiZm9yY2UiLCJ0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uIiwic3F1YXJlZERpc3RhbmNlIiwicmFkaWlTdW0iLCJwYXJ0aWNsZTEiLCJwYXJ0aWNsZTIiLCJzZXQiLCJzdWJ0cmFjdCIsInNxdWFyZWRMZW5ndGgiLCJzcXJ0IiwiZGVsdGEiLCJnbCIsImVuYWJsZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwicG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwicmVzb2x1dGlvblVuaWZvcm1Mb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImNvbG9yVW5pZm9ybUxvY2F0aW9uIiwidHJhbnNsYXRpb25Mb2NhdGlvbiIsInJhZGl1c1VuaWZvcm1Mb2NhdGlvbiIsIm91dGxpbmVVbmlmb3JtTG9jYXRpb24iLCJwb3NpdGlvbkJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInNldEdlb21ldHJ5IiwieDEiLCJ4MiIsInkxIiwieTIiLCJidWZmZXJEYXRhIiwiQVJSQVlfQlVGRkVSIiwiRmxvYXQzMkFycmF5IiwiU1RBVElDX0RSQVciLCJzZXRSZWN0YW5nbGUiLCJkcmF3UGFydGljbGVzIiwicmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZSIsInZpZXdwb3J0IiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsInVzZVByb2dyYW0iLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJpbmRCdWZmZXIiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJvdXRsaW5lQ29sb3IiLCJwYXJzZUZsb2F0IiwicmVzb2x1dGlvbiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtMmYiLCJ1bmlmb3JtM2YiLCJyIiwiZyIsImIiLCJ1bmlmb3JtMWYiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVTIiwiZHJhd0RvdHRlZExpbmUiLCJmcm9tIiwidG8iLCJkb3RDb3VudCIsImRyYXdQcmVkaWN0ZWRQYXRoIiwiYW5nbGUiLCJhdGFuMiIsIm5ld190byIsImNvcyIsInNpbiIsImRyYXdEb3QiLCJzdGFydFBvcyIsIkFjY2VsZXJhdGlvblZlY3RvciIsInByZWRpY3RlZERvdCIsImdldEF2ZXJhZ2VGcmFtZVRpbWUiLCJkb3RYIiwiZG90WSIsImRvdFNpemUiLCJvcGFjaXR5IiwiYXJjIiwiUEkiLCJmaWxsU3R5bGUiLCJmaWxsIiwiY2xvc2VQYXRoIiwiZHJhd0xhc3NvIiwiZHJhd0Fycm93IiwiaGVhZGxlbiIsImRyYXdDdXJzb3JGdW5jdGlvbiIsInR5cGUiLCJzb3VyY2UiLCJzaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImRlbGV0ZVByb2dyYW0iLCJkaXNwbGF5V2lkdGgiLCJjbGllbnRXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJuZWVkUmVzaXplIiwiZnBzQ291bnRlciIsImNyZWF0ZUVsZW1lbnQiLCJ0b3AiLCJsZWZ0IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZnJhbWVUaW1lcyIsIm1heEZyYW1lcyIsImxhc3RUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ1cGRhdGVVSSIsImF2ZXJhZ2VkRlBTIiwiY3VycmVudFRpbWUiLCJ0aW1lRGlmZiIsInNoaWZ0IiwiYXZlcmFnZUZQUyIsInJlZHVjZSIsImEiLCJjYWxjdWxhdGVGUFMiLCJpbm5lclRleHQiLCJyb3VuZCIsInJhbmRvbSIsIm90aGVyIiwic2NhbGFyIiwiZG90IiwidmVjIiwiVmVjMkQiLCJmcmFtZUNvdW50IiwiR3JpZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFuaW1hdGUiLCJmcmFtZVRpbWUiLCJtdWx0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9