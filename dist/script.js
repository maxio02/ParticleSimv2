/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/CanvasManager.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>r,backgroundCanvasCtx:()=>c,clearCanvas:()=>u,foregroundCanvas:()=>o,foregroundCanvasCtx:()=>a,updateCanvasSize:()=>l});var i=n("./src/script.ts"),o=document.getElementById("foreground-canvas"),r=document.getElementById("background-canvas"),s=document.getElementById("webgl-canvas");o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height;var a=o.getContext("2d"),c=r.getContext("2d");function u(){a.clearRect(0,0,o.width,o.height)}function l(){o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height,i.grid.canvas=r,i.grid.updateSize(),i.grid.draw()}window.addEventListener("resize",l)},"./src/Config.ts":(t,e,n)=>{n.r(e),n.d(e,{getFieldSize:()=>g,getFieldStrength:()=>p,getGravityDirection:()=>h,getGridSize:()=>m,getParticleNumber:()=>v,getPhysicsSubstepsAmount:()=>f,getPointerFunction:()=>y,isGyroEnabled:()=>x,setFieldSize:()=>b,setFieldStrength:()=>P,setGravityDirection:()=>C,setIsGyroEnabled:()=>M,setParticleNumber:()=>S,setPhysicsSubstepsAmount:()=>w,setPointerFunction:()=>E});var i=n("./src/Vec2D.ts"),o=10,r=4,s=new i.default(0,1.3),a=100,c=200,u="field",l=26,d=!1;function h(){return s}function f(){return r}function p(){return o}function g(){return a}function v(){return c}function y(){return u}function m(){return l}function x(){return d}function C(t){s=t}function w(t){r=t}function P(t){o=t}function b(t){a=t}function S(t){c=t}function E(t){u=t}function M(t){d=t}},"./src/Grid.ts":(t,e,n)=>{n.r(e),n.d(e,{Grid:()=>o});var i=n("./src/Config.ts"),o=function(){function t(t,e){void 0===e&&(e=i.getGridSize()),this.pixelSize=e,this.canvas=t,this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.cells=this.initialize(),this.canvasCtx=this.canvas.getContext("2d")}return t.prototype.initialize=function(){for(var t=[],e=0;e<this.columns;e++){t[e]=[];for(var n=0;n<this.rows;n++)t[e][n]=[]}return t},t.prototype.removeAll=function(){for(var t=0;t<this.columns;t++)for(var e=0;e<this.rows&&null!=this.cells[t];e++)this.cells[t][e]=[]},t.prototype.put=function(t){var e=Math.floor(t.position.x/this.pixelSize),n=Math.floor(t.position.y/this.pixelSize);e>=0&&e<this.cells.length&&n>=0&&n<this.cells[e].length&&this.cells[e][n].push(t)},t.prototype.updateSize=function(){this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.initialize()},t.prototype.draw=function(){this.canvasCtx.clearRect(0,0,this.canvas.width,this.canvas.height),this.canvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),this.canvasCtx.lineWidth=1;for(var t=this.pixelSize;t<this.canvas.width;t+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(t,0),this.canvasCtx.lineTo(t,this.canvas.height),this.canvasCtx.stroke();for(var e=this.pixelSize;e<this.canvas.height;e+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(0,e),this.canvasCtx.lineTo(this.canvas.width,e),this.canvasCtx.stroke()},t}()},"./src/InputHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{InputHandler:()=>l});var i=n("./src/Vec2D.ts"),o=n("./src/Config.ts"),r=n("./src/MenuManager.ts"),s=n("./src/UIManager.ts"),a=n("./src/script.ts"),c=n("./src/Utils.ts"),u=n("./src/Particle.ts"),l=function(){function t(){this.clicked=!1,this.pointerPosition=new i.default(0,0),this.clickStartPosition=new i.default(0,0),this.pointerFunction="field"}return t.getInstance=function(){return t.instance||(t.instance=new t,t.instance.initializeEventListeners()),t.instance},t.prototype.initializeEventListeners=function(){var t=document.getElementById("main_container");t&&(t.addEventListener("mousedown",this.handleMouseDown.bind(this)),t.addEventListener("mouseup",this.handleMouseUp.bind(this)),t.addEventListener("mousemove",this.handleMoveEvent.bind(this)),t.addEventListener("touchstart",this.handleMouseDown.bind(this)),t.addEventListener("touchend",this.handleMouseUp.bind(this)),t.addEventListener("touchmove",this.handleMoveEvent.bind(this)),t.addEventListener("click",(function(t){t.stopPropagation(),(0,r.closeMenu)()})))},t.prototype.handleMouseDown=function(t){t.stopPropagation(),this.clicked=!0,t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY),this.clickStartPosition.x=this.pointerPosition.x,this.clickStartPosition.y=this.pointerPosition.y},t.prototype.handleMouseUp=function(t){if(t.stopPropagation(),this.clicked=!1,"throw"==o.getPointerFunction()){var e=this.clickStartPosition.clone().difference(this.pointerPosition).multiply(.05);e.multiply(s.fps/15),a.particles.push(new u.default(this.clickStartPosition.clone(),o.getGridSize()/2,e,(0,c.getRandomColor)(),a.grid))}},t.prototype.handleMoveEvent=function(t){t.stopPropagation(),this.clicked&&(t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY))},t}()},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>u,openMenu:()=>c,setGravityStrength:()=>x,updatePointerFunction:()=>m});var i=n("./src/Config.ts"),o=n("./src/Vec2D.ts"),r=n("./src/script.ts"),s=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element");function c(){"false"==s.getAttribute("open")&&(s.setAttribute("open","true"),s.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){s.setAttribute("open","false"),s.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}s.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),r.grid.draw()}));var l=document.getElementById("field-size-slider"),d=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),p=document.getElementById("particles-amount-entry"),g=document.getElementById("gyro-toggle");function v(){g.checked?(i.setIsGyroEnabled(!0),window.addEventListener("devicemotion",y,!0)):(window.removeEventListener("devicemotion",y),i.setIsGyroEnabled(!1),i.setGravityDirection(new o.default(0,1.3)))}function y(t){i.isGyroEnabled()?i.setGravityDirection(new o.default(t.accelerationIncludingGravity.x/5,-t.accelerationIncludingGravity.y/5)):i.setGravityDirection(new o.default(0,1.3))}function m(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}function x(t){i.setGravityDirection(new o.default(0,.1*t))}document.getElementsByName("cursor-function").forEach((function(t){t.addEventListener("change",(function(){t.checked&&i.setPointerFunction(t.value)}))})),l.oninput=function(){i.setFieldSize(parseInt(l.value))},d.oninput=function(){i.setFieldStrength(parseInt(d.value))},h.oninput=function(){x(parseInt(h.value))},f.addEventListener("change",(function(){i.setPhysicsSubstepsAmount(parseInt(f.value))})),g.oninput=function(){"undefined"!=typeof DeviceMotionEvent&&"function"==typeof DeviceMotionEvent.requestPermission?DeviceMotionEvent.requestPermission().then((function(t){"granted"==t&&v()})).catch(console.error):v()},p.addEventListener("change",(function(){i.setParticleNumber(parseInt(p.value));for(var t=r.particles.length-i.getParticleNumber();t>0;)r.particles.pop(),t--}))},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});var i=n("./src/Vec2D.ts");const o=function(){function t(t,e,n,o,r){this.position=t,this.velocity=n,this.acceleration=new i.default(0,0),this.radius=e,this.color=o,this.grid=r,this.cell=new i.default(Math.floor(this.position.x/r.pixelSize),Math.floor(this.position.y/r.pixelSize))}return t.prototype.updatePosition=function(t){this.position.add(this.velocity.add(this.acceleration.multiply(t*t/2))),this.acceleration.x=0,this.acceleration.y=0,this.updateCell()},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.getNeighboringParticles=function(){for(var t=[],e=this.cell.x-1;e<=this.cell.x+1;e++)for(var n=this.cell.y-1;n<=this.cell.y+1;n++)e>=0&&e<this.grid.columns&&n>=0&&n<this.grid.rows&&t.push.apply(t,this.grid.cells[e][n]);return t},t.prototype.updateCell=function(){this.cell=new i.default(Math.floor(this.position.x/this.grid.pixelSize),Math.floor(this.position.y/this.grid.pixelSize))},t.canvas=document.getElementById("foreground-canvas"),t}()},"./src/PhysicsEngine.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>y,applyAttractorForcesToAll:()=>p,applyConstraint:()=>v,tick:()=>g});var i=n("./src/CanvasManager.ts"),o=n("./src/Config.ts"),r=n("./src/InputHandler.ts"),s=n("./src/Vec2D.ts"),a=n("./src/script.ts"),c=r.InputHandler.getInstance(),u=0,l=0;function d(t){a.grid.removeAll(),a.particles.forEach((function(e){e.updatePosition(t),a.grid.put(e)}))}function h(t){a.particles.forEach((function(e){e.velocity.add(t)}))}function f(t){a.particles.forEach((function(e){var n=t.difference(e.position),i=n.length();i<o.getFieldSize()&&i>10&&(n.multiply(100*o.getFieldStrength()),n.divide(i*i),e.accelerate(n))}))}function p(){a.particles.forEach((function(t){y(t)}))}function g(t){for(var e=t/o.getPhysicsSubstepsAmount(),n=0;n<o.getPhysicsSubstepsAmount();n++){if(0!=o.getGravityDirection().y&&a.particles.forEach((function(t){t.accelerate(o.getGravityDirection())})),c.clicked)switch(o.getPointerFunction()){case"field":f(c.pointerPosition);break;case"gravity":o.setGravityDirection(c.pointerPosition.difference(c.clickStartPosition).divide(400))}var i=window.screenX-u,r=window.screenY-l;h(new s.default(-i/60,-r/60)),u=window.screenX,l=window.screenY,a.particles.forEach((function(t){v(t)})),a.particles.forEach((function(t){t.getNeighboringParticles().forEach((function(e){if(t!==e){var n=t.position.squaredDistanceTo(e.position);if(!(n>Math.pow(t.radius+e.radius,2))){var i=Math.sqrt(n),o=new s.default((e.position.x-t.position.x)/i,(e.position.y-t.position.y)/i),r=t.velocity.x*o.x+t.velocity.y*o.y-e.velocity.x*o.x+e.velocity.y*o.y;t.velocity.set(new s.default(t.velocity.x-r*o.x,t.velocity.y-r*o.y)),e.velocity.set(new s.default(e.velocity.x+r*o.x,e.velocity.y+r*o.y));var a=t.radius+e.radius-i;o.multiply(.6*a),t.position.subtract(o),e.position.add(o)}}}))})),d(e)}}function v(t){t.position.y+t.radius>i.foregroundCanvas.height&&(t.velocity=new s.default(t.velocity.x,-Math.abs(t.velocity.y)).multiply(.5),t.position.y=i.foregroundCanvas.height-t.radius),t.position.y-t.radius<0&&(t.position.y=t.radius,t.velocity=new s.default(t.velocity.x,Math.abs(t.velocity.y)).multiply(.5)),t.position.x-t.radius<0&&(t.position.x=t.radius,t.velocity=new s.default(Math.abs(t.velocity.x),t.velocity.y).multiply(.5)),t.position.x+t.radius>i.foregroundCanvas.width&&(t.velocity=new s.default(-Math.abs(t.velocity.x),t.velocity.y).multiply(.5),t.position.x=i.foregroundCanvas.width-t.radius)}function y(t){a.attractors.forEach((function(e){var n=e.position.difference(t.position),i=n.length();i<e.radius&&i>10&&(n.multiply(e.force),n.divide(i*i),t.accelerate(n))}))}},"./src/Renderer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>R,drawCursorFunction:()=>T,drawDot:()=>A,drawDottedLine:()=>k,drawLasso:()=>F,drawParticles:()=>I,drawPredictedPath:()=>z,setGeometry:()=>_});var i=n("./src/Vec2D.ts"),o=n("./src/Config.ts"),r=n("./src/shaders/particleFragmentShader.frag"),s=n("./src/shaders/particleVertexShader.vert"),a=n("./src/ShaderHelper.ts"),c=n("./src/CanvasManager.ts"),u=n("./src/PhysicsEngine.ts"),l=n("./src/InputHandler.ts"),d=n("./src/script.ts"),h=n("./src/Particle.ts"),f=n("./src/UIManager.ts"),p=document.getElementById("webgl-canvas"),g=p.getContext("webgl");p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height;var v=l.InputHandler.getInstance();g||console.error("Unable to initialize WebGL. Your browser may not support it."),g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);var y=(0,a.createShader)(g,g.VERTEX_SHADER,s),m=(0,a.createShader)(g,g.FRAGMENT_SHADER,r),x=(0,a.createProgram)(g,y,m),C=g.getAttribLocation(x,"a_position"),w=g.getUniformLocation(x,"u_resolution"),P=g.getUniformLocation(x,"u_color"),b=g.getUniformLocation(x,"u_translation"),S=g.getUniformLocation(x,"u_radius"),E=g.getUniformLocation(x,"u_outline_black"),M=g.createBuffer();function _(){d.particles.forEach((function(t){!function(t,e,n,i,o){var r=0-i/2,s=0+i/2,a=0-o/2,c=0+o/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([r,a,s,a,r,c,r,c,s,a,s,c]),t.STATIC_DRAW)}(g,0,0,o.getGridSize(),o.getGridSize())}))}function I(){(0,a.resizeCanvasToDisplaySize)(g.canvas),g.viewport(0,0,g.canvas.width,g.canvas.height),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT),g.useProgram(x),g.enableVertexAttribArray(C),g.bindBuffer(g.ARRAY_BUFFER,M),g.vertexAttribPointer(C,2,g.FLOAT,!1,0,0);var t=parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--is-outline-dark")),e=[g.canvas.width,g.canvas.height];d.particles.forEach((function(n){g.uniform2fv(w,e),g.uniform2f(b,n.position.x,n.position.y),g.uniform3f(P,n.color.r,n.color.g,n.color.b),g.uniform1f(S,n.radius),g.uniform1f(E,t),g.drawArrays(g.TRIANGLES,0,6)}))}function k(t,e,n,o){if(void 0===n&&(n=5),void 0===o&&(o=8),v.clicked&&t.x!=e.x&&t.y!=e.y){var r=t.difference(e);z(t.clone(),r.clone().multiply(.05)),r.divide(o);var s=Math.atan2(e.y-t.y,e.x-t.x),a=new i.default(e.x,e.y);a.x-=Math.cos(s),a.y-=Math.sin(s);for(var c=0;c<=o;c++)A(t.x-r.x*c,t.y-r.y*c,n,255)}}function z(t,e){for(var n=new h.default(t,o.getGridSize()/2,e,{r:0,g:0,b:0},d.grid),i=1;i<=127;i++)n.accelerate(o.getGravityDirection()),(0,u.applyConstraint)(n),(0,u.applyAttractorForces)(n),n.updatePosition((0,f.getAverageFrameTime)()/20),i%3==0&&A(n.position.x,n.position.y,5,255-2*i)}function A(t,e,n,i){c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),c.foregroundCanvasCtx.fillStyle="rgba(210, 210, 210, ".concat(i/255,")"),c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}function F(t){void 0===t&&(t=3),v.clicked&&(c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(v.pointerPosition.x,v.pointerPosition.y,o.getFieldSize(),0,2*Math.PI),c.foregroundCanvasCtx.lineWidth=t,c.foregroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.closePath())}function R(t,e){if(v.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),o=10,r=new i.default(e.x,e.y);r.x-=11.5*Math.cos(n),r.y-=11.5*Math.sin(n),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(t.x,t.y),c.foregroundCanvasCtx.lineTo(r.x,r.y),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(r.x,r.y),c.foregroundCanvasCtx.lineTo(r.x-o*Math.cos(n-Math.PI/7),r.y-o*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.lineTo(r.x-o*Math.cos(n+Math.PI/7),r.y-o*Math.sin(n+Math.PI/7)),c.foregroundCanvasCtx.lineTo(r.x,r.y),c.foregroundCanvasCtx.lineTo(r.x-o*Math.cos(n-Math.PI/7),r.y-o*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.fillStyle="#bbbbbb",c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}}function T(){if(v.clicked)switch(o.getPointerFunction()){case"field":F();break;case"gravity":R(v.clickStartPosition,v.pointerPosition);break;case"throw":k(v.clickStartPosition,v.pointerPosition)}}g.bindBuffer(g.ARRAY_BUFFER,M)},"./src/ShaderHelper.ts":(t,e,n)=>{function i(t,e,n){var i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;console.log(t.getShaderInfoLog(i)),t.deleteShader(i)}function o(t,e,n){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS))return i;console.log(t.getProgramInfoLog(i)),t.deleteProgram(i)}function r(t){var e=t.clientWidth,n=t.clientHeight,i=t.width!==e||t.height!==n;return i&&(t.width=e,t.height=n),i}n.r(e),n.d(e,{createProgram:()=>o,createShader:()=>i,resizeCanvasToDisplaySize:()=>r})},"./src/UIManager.ts":(t,e,n)=>{n.r(e),n.d(e,{fps:()=>o,frameTimes:()=>r,getAverageFrameTime:()=>u,updateUI:()=>c});var i=document.createElement("div");i.style.position="absolute",i.style.top="10px",i.style.left="10px",document.body.appendChild(i);var o=60,r=[],s=100,a=performance.now();function c(){var t=function(){var t=performance.now(),e=t-a;r.push(e),r.length>s&&r.shift();var n=r.reduce((function(t,e){return t+e}),0)/r.length;return a=t,1e3/n}();i.innerText="FPS: ".concat(Math.round(t))}function u(){return r.reduce((function(t,e){return t+e}),0)/r.length}},"./src/Utils.ts":(t,e,n)=>{function i(){return{r:Math.random(),g:Math.random(),b:Math.random()}}n.r(e),n.d(e,{getRandomColor:()=>i})},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this},t.prototype.divide=function(t){return this.x/=t,this.y/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t.prototype.squaredDistanceTo=function(t){return Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{attractors:()=>f,grid:()=>g,particles:()=>h});var i=n("./src/Renderer.ts"),o=n("./src/Particle.ts"),r=n("./src/Vec2D.ts"),s=n("./src/UIManager.ts"),a=n("./src/CanvasManager.ts"),c=n("./src/PhysicsEngine.ts"),u=n("./src/Config.ts"),l=n("./src/Grid.ts"),d=n("./src/Utils.ts"),h=[],f=[],p=0,g=new l.Grid(a.backgroundCanvas);g.draw(),requestAnimationFrame((function t(){var e=(0,s.getAverageFrameTime)();(0,c.tick)(e/20),(0,a.clearCanvas)(),(0,i.drawParticles)(),(0,i.drawCursorFunction)(),(0,s.updateUI)();var n=10/e;p%3==0&&h.length<u.getParticleNumber()&&p>120&&(h.push(new o.default(new r.default(200,200),g.pixelSize/2,new r.default(2*n,-.8*n),(0,d.getRandomColor)(),g)),h.push(new o.default(new r.default(200,260),g.pixelSize/2,new r.default(1.8*n,-.8*n),(0,d.getRandomColor)(),g)),h.push(new o.default(new r.default(200,320),g.pixelSize/2,new r.default(1.7*n,-.8*n),(0,d.getRandomColor)(),g)),h.push(new o.default(new r.default(200,380),g.pixelSize/2,new r.default(1.8*n,-.8*n),(0,d.getRandomColor)(),g)),h.push(new o.default(new r.default(200,440),g.pixelSize/2,new r.default(1.7*n,-.8*n),(0,d.getRandomColor)(),g)),(0,i.setGeometry)()),p++,requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sV0FFN0RzTixPQUFPQyxlQUFlUixFQUFTLGFBQWMsQ0FBRS9NLE9BQU8sR0FBTyxFQ0Y5RDJNLEVBQW9CLG1CQUNNQSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvQ2FudmFzTWFuYWdlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL0NvbmZpZy50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL0dyaWQudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9JbnB1dEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9NZW51TWFuYWdlci50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1BhcnRpY2xlLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvUGh5c2ljc0VuZ2luZS50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL1JlbmRlcmVyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvU2hhZGVySGVscGVyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvVUlNYW5hZ2VyLnRzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvLi9zcmMvVXRpbHMudHMiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi8uL3NyYy9WZWMyRC50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyLy4vc3JjL3NjcmlwdC50cyIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BhcnRpY2xlc2ltdjIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wYXJ0aWNsZXNpbXYyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcGFydGljbGVzaW12Mi93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3JpZCB9IGZyb20gXCIuL3NjcmlwdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcmVncm91bmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9yZWdyb3VuZC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja2dyb3VuZC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuY29uc3Qgd2ViZ2xDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2ViZ2wtY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG5mb3JlZ3JvdW5kQ2FudmFzIS53aWR0aCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbmZvcmVncm91bmRDYW52YXMhLmhlaWdodCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5iYWNrZ3JvdW5kQ2FudmFzIS53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbmJhY2tncm91bmRDYW52YXMhLmhlaWdodCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG53ZWJnbENhbnZhcy53aWR0aCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG53ZWJnbENhbnZhcy5oZWlnaHQgPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbmV4cG9ydCBjb25zdCBmb3JlZ3JvdW5kQ2FudmFzQ3R4ID0gZm9yZWdyb3VuZENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENhbnZhc0N0eCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB1cGRhdGVDYW52YXNTaXplKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhbnZhcygpIHtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguY2xlYXJSZWN0KDAsIDAsIGZvcmVncm91bmRDYW52YXMud2lkdGgsIGZvcmVncm91bmRDYW52YXMuaGVpZ2h0KTtcclxuICB9XHJcbiAgXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDYW52YXNTaXplKCkge1xyXG4gICAgZm9yZWdyb3VuZENhbnZhcy53aWR0aCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzLmhlaWdodCA9IGZvcmVncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgYmFja2dyb3VuZENhbnZhcy53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICBiYWNrZ3JvdW5kQ2FudmFzLmhlaWdodCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgd2ViZ2xDYW52YXMud2lkdGggPSB3ZWJnbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgIHdlYmdsQ2FudmFzLmhlaWdodCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIGdyaWQuY2FudmFzID0gYmFja2dyb3VuZENhbnZhcztcclxuICAgIGdyaWQudXBkYXRlU2l6ZSgpO1xyXG4gICAgZ3JpZC5kcmF3KCk7XHJcbiAgfVxyXG4gICIsImltcG9ydCB7IFBvaW50ZXJGdW5jdGlvblR5cGUgfSBmcm9tIFwiLi9JbnB1dEhhbmRsZXJcIjtcclxuaW1wb3J0IFZlYzJEIGZyb20gXCIuL1ZlYzJEXCI7XHJcblxyXG52YXIgZmllbGRTdHJlbmd0aCA9IDEwO1xyXG52YXIgcGh5c2ljc1N1YnN0ZXBzQW1vdW50ID0gNDtcclxudmFyIGdyYXZpdHlEaXJlY3Rpb24gPSBuZXcgVmVjMkQoMCwgMS4zKTtcclxudmFyIGZpZWxkU2l6ZSA9IDEwMDtcclxudmFyIHBhcnRpY2xlTnVtYmVyID0gMjAwO1xyXG52YXIgcG9pbnRlckZ1bmN0aW9uOiBQb2ludGVyRnVuY3Rpb25UeXBlID0gJ2ZpZWxkJztcclxudmFyIGdyaWRTaXplID0gMjY7XHJcbnZhciBneXJvRW5hYmxlZCA9IGZhbHNlO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jhdml0eURpcmVjdGlvbigpIHtcclxuICAgIHJldHVybiBncmF2aXR5RGlyZWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KCkge1xyXG4gICAgcmV0dXJuIHBoeXNpY3NTdWJzdGVwc0Ftb3VudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkU3RyZW5ndGgoKSB7XHJcbiAgICByZXR1cm4gZmllbGRTdHJlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkU2l6ZSgpIHtcclxuICAgIHJldHVybiBmaWVsZFNpemU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJ0aWNsZU51bWJlcigpIHtcclxuICAgIHJldHVybiBwYXJ0aWNsZU51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50ZXJGdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBwb2ludGVyRnVuY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkU2l6ZSgpIHtcclxuICAgIHJldHVybiBncmlkU2l6ZTsgICAgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0d5cm9FbmFibGVkKCkge1xyXG4gICAgcmV0dXJuIGd5cm9FbmFibGVkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0R3Jhdml0eURpcmVjdGlvbihuZXdHcmF2aXR5RGlyZWN0aW9uOiBWZWMyRCkge1xyXG4gICAgZ3Jhdml0eURpcmVjdGlvbiA9IG5ld0dyYXZpdHlEaXJlY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQaHlzaWNzU3Vic3RlcHNBbW91bnQobmV3QW1vdW50OiBudW1iZXIpIHtcclxuICAgIHBoeXNpY3NTdWJzdGVwc0Ftb3VudCA9IG5ld0Ftb3VudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkU3RyZW5ndGgobmV3ZmllbGRTdHJlbmd0aDogbnVtYmVyKSB7XHJcbiAgICBmaWVsZFN0cmVuZ3RoID0gbmV3ZmllbGRTdHJlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkU2l6ZShuZXdmaWVsZFNpemU6IG51bWJlcikge1xyXG4gICAgZmllbGRTaXplID0gbmV3ZmllbGRTaXplO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGFydGljbGVOdW1iZXIobmV3UGFydGljbGVOdW1iZXI6IG51bWJlcikge1xyXG4gICAgcGFydGljbGVOdW1iZXIgPSBuZXdQYXJ0aWNsZU51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFBvaW50ZXJGdW5jdGlvbihuZXdQb2ludGVyRnVuY3Rpb246IFBvaW50ZXJGdW5jdGlvblR5cGUpIHtcclxuICAgIHBvaW50ZXJGdW5jdGlvbiA9IG5ld1BvaW50ZXJGdW5jdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldElzR3lyb0VuYWJsZWQobmV3SXNHeXJvRW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgZ3lyb0VuYWJsZWQgPSBuZXdJc0d5cm9FbmFibGVkO1xyXG59IiwiaW1wb3J0IHsgYmFja2dyb3VuZENhbnZhc0N0eCB9IGZyb20gXCIuL0NhbnZhc01hbmFnZXJcIjtcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gXCIuL1BhcnRpY2xlXCI7XHJcbmltcG9ydCB7IGdyaWQgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuZXhwb3J0IGNsYXNzIEdyaWQge1xyXG4gICAgcHVibGljIGNlbGxzOiBQYXJ0aWNsZVtdW11bXTtcclxuICAgIHB1YmxpYyBjb2x1bW5zOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcm93czogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHBpeGVsU2l6ZTogbnVtYmVyO1xyXG4gICAgcHVibGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGNhbnZhc0N0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZ3JpZFBpeGVsU2l6ZTogbnVtYmVyID0gQ29uZmlnLmdldEdyaWRTaXplKCkpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU2l6ZSA9IGdyaWRQaXhlbFNpemU7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gTWF0aC5jZWlsKHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMucm93cyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnBpeGVsU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzQ3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZSgpOiBQYXJ0aWNsZVtdW11bXSB7XHJcbiAgICAgICAgY29uc3QgY2VsbHM6IFBhcnRpY2xlW11bXVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xyXG4gICAgICAgICAgICBjZWxsc1tpXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMucm93czsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsc1tpXVtqXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQWxsKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd3M7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jZWxsc1tpXT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1tpXVtqXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwdXQocGFydGljbGU6IFBhcnRpY2xlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29sdW1uID0gTWF0aC5mbG9vcihwYXJ0aWNsZS5wb3NpdGlvbi54IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IocGFydGljbGUucG9zaXRpb24ueSAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY29sdW1uID49IDAgJiYgY29sdW1uIDwgdGhpcy5jZWxscy5sZW5ndGggJiYgcm93ID49IDAgJiYgcm93IDwgdGhpcy5jZWxsc1tjb2x1bW5dLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxzW2NvbHVtbl1bcm93XS5wdXNoKHBhcnRpY2xlKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCR7Y29sdW1ufSAgICR7cm93fWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlU2l6ZSgpOnZvaWQge1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgICAgICB0aGlzLnJvd3MgPSBNYXRoLmNlaWwodGhpcy5jYW52YXMuaGVpZ2h0IC8gdGhpcy5waXhlbFNpemUpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCl7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguc3Ryb2tlU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1ncmlkLWNvbG9yJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB0aGlzLnBpeGVsU2l6ZTsgeCA8IHRoaXMuY2FudmFzLndpZHRoOyB4ICs9IHRoaXMucGl4ZWxTaXplKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubW92ZVRvKHgsIDApO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmxpbmVUbyh4LCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSB0aGlzLnBpeGVsU2l6ZTsgeSA8IHRoaXMuY2FudmFzLmhlaWdodDsgeSArPSB0aGlzLnBpeGVsU2l6ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4Lm1vdmVUbygwLCB5KTtcclxuICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5saW5lVG8odGhpcy5jYW52YXMud2lkdGgsIHkpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERFQlVHXHJcbiAgICAgICAgICAgIC8vICAgZm9yIChsZXQgeCA9IDA7IHggPCBncmlkLmNvbHVtbnM7IHggKz0gMSkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vICAgZm9yIChsZXQgeSA9IDA7IHkgPCBncmlkLnJvd3M7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZENhbnZhc0N0eC5mb250ID0gXCIxMnB4IHNlcmlmXCI7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICAgIGJhY2tncm91bmRDYW52YXNDdHguZmlsbFRleHQoYCR7Z3JpZC5jZWxsc1t4XVt5XS5sZW5ndGh9YCwgKHgrMSkqdGhpcy5waXhlbFNpemUgLSB0aGlzLnBpeGVsU2l6ZS8yIC0gMiwgKHkrMSkqdGhpcy5waXhlbFNpemUgLXRoaXMucGl4ZWxTaXplLzIgKyA0KTtcclxuICAgICAgICAgICAgICAgIC8vIGJhY2tfY3R4LmZpbGxUZXh0KGAke3h9ICR7eX1gLCAoeCsxKSp0aGlzLnBpeGVsU2l6ZSAtIHRoaXMucGl4ZWxTaXplLzIgLSAyLCAoeSsxKSp0aGlzLnBpeGVsU2l6ZSAtdGhpcy5waXhlbFNpemUvMiArIDQpO1xyXG4gICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgfVxyXG4gICAgfSIsImltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBjbG9zZU1lbnUsIHVwZGF0ZVBvaW50ZXJGdW5jdGlvbiB9IGZyb20gXCIuL01lbnVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGZwcyB9IGZyb20gXCIuL1VJTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBncmlkLCBwYXJ0aWNsZXMgfSBmcm9tIFwiLi9zY3JpcHRcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tQ29sb3IgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSBcIi4vUGFydGljbGVcIjtcclxuZXhwb3J0IHR5cGUgUG9pbnRlckZ1bmN0aW9uVHlwZSA9ICdmaWVsZCcgfCAnZ3Jhdml0eScgfCAndGhyb3cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0SGFuZGxlciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IElucHV0SGFuZGxlcjtcclxuICBwdWJsaWMgY2xpY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgcG9pbnRlckZ1bmN0aW9uOiBQb2ludGVyRnVuY3Rpb25UeXBlO1xyXG4gIHB1YmxpYyBwb2ludGVyUG9zaXRpb24gPSBuZXcgVmVjMkQoMCwgMClcclxuICBwdWJsaWMgY2xpY2tTdGFydFBvc2l0aW9uID0gbmV3IFZlYzJEKDAsIDApXHJcblxyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5wb2ludGVyRnVuY3Rpb24gPSAnZmllbGQnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBJbnB1dEhhbmRsZXIge1xyXG4gICAgaWYgKCFJbnB1dEhhbmRsZXIuaW5zdGFuY2UpIHtcclxuICAgICAgSW5wdXRIYW5kbGVyLmluc3RhbmNlID0gbmV3IElucHV0SGFuZGxlcigpO1xyXG4gICAgICBJbnB1dEhhbmRsZXIuaW5zdGFuY2UuaW5pdGlhbGl6ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSW5wdXRIYW5kbGVyLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBtYWluX2JvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbl9jb250YWluZXInKTtcclxuICAgIGlmICghbWFpbl9ib2R5KSByZXR1cm47XHJcblxyXG4gICAgbWFpbl9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5oYW5kbGVNb3VzZURvd24uYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLmJpbmQodGhpcykpO1xyXG4gICAgbWFpbl9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3ZlRXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5oYW5kbGVNb3VzZURvd24uYmluZCh0aGlzKSk7XHJcbiAgICBtYWluX2JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMuaGFuZGxlTW91c2VVcC5iaW5kKHRoaXMpKTtcclxuICAgIG1haW5fYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlTW92ZUV2ZW50LmJpbmQodGhpcykpO1xyXG4gICAgbWFpbl9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIGNsb3NlTWVudSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZU1vdXNlRG93bihldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgdGhpcy5jbGlja2VkID0gdHJ1ZTtcclxuICAgIFxyXG5cclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24ueCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24ueCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24ueSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNsaWNrU3RhcnRQb3NpdGlvbi54ID0gdGhpcy5wb2ludGVyUG9zaXRpb24ueDtcclxuICAgIHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLnkgPSB0aGlzLnBvaW50ZXJQb3NpdGlvbi55O1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZU1vdXNlVXAoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuY2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgaWYoQ29uZmlnLmdldFBvaW50ZXJGdW5jdGlvbigpID09ICd0aHJvdycpe1xyXG4gICAgICBsZXQgbGF1bmNoX2RpciA9IHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLmNsb25lKCkuZGlmZmVyZW5jZSh0aGlzLnBvaW50ZXJQb3NpdGlvbikubXVsdGlwbHkoMC4wNSk7XHJcbiAgICBsYXVuY2hfZGlyLm11bHRpcGx5KGZwcyAvIDE1KVxyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKHRoaXMuY2xpY2tTdGFydFBvc2l0aW9uLmNsb25lKCksIENvbmZpZy5nZXRHcmlkU2l6ZSgpLzIsIGxhdW5jaF9kaXIsIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTW92ZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBpZiAodGhpcy5jbGlja2VkKSB7XHJcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi55ID0gZXZlbnQuY2xpZW50WTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbi54ID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uLnkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuXHJcbn0iLCJpbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBQb2ludGVyRnVuY3Rpb25UeXBlIH0gZnJvbSAnLi9JbnB1dEhhbmRsZXInO1xyXG5pbXBvcnQgVmVjMkQgZnJvbSBcIi4vVmVjMkRcIjtcclxuaW1wb3J0IHsgZ3JpZCwgcGFydGljbGVzIH0gZnJvbSAnLi9zY3JpcHQnO1xyXG5cclxuY29uc3QgbWVudUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudS1idXR0b25cIik7XHJcbmNvbnN0IG1lbnVFbGVtZW50czogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lbnUtZWxlbWVudFwiKTtcclxuXHJcbm1lbnVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBvcGVuTWVudSgpO1xyXG59KTtcclxuXHJcbmNvbnN0IHN3aXRjaFRoZW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvb3RFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XHJcbiAgbGV0IHRoZW1lID0gcm9vdEVsZW0uZ2V0QXR0cmlidXRlKCd0aGVtZScpLCBuZXdUaGVtZTtcclxuICBuZXdUaGVtZSA9ICh0aGVtZSA9PT0gJ2xpZ2h0JykgPyAnZGFyaycgOiAnbGlnaHQnO1xyXG5cclxuICByb290RWxlbS5zZXRBdHRyaWJ1dGUoJ3RoZW1lJywgbmV3VGhlbWUpO1xyXG4gIGdyaWQuZHJhdygpO1xyXG59XHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RoZW1lLXN3aXRjaCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpdGNoVGhlbWUpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5NZW51KCkge1xyXG4gIGlmIChtZW51QnV0dG9uLmdldEF0dHJpYnV0ZShcIm9wZW5cIikgPT0gXCJmYWxzZVwiKSB7XHJcbiAgICBtZW51QnV0dG9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJ0cnVlXCIpO1xyXG4gICAgbWVudUJ1dHRvbi5zdHlsZS5jdXJzb3IgPSBcImF1dG9cIjtcclxuXHJcbiAgICBtZW51RWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICB9LCAzMDApO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuICBlbHNlIHtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VNZW51KCkge1xyXG4gIG1lbnVCdXR0b24uc2V0QXR0cmlidXRlKFwib3BlblwiLCBcImZhbHNlXCIpO1xyXG4gIG1lbnVCdXR0b24uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgbWVudUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICB9KTtcclxuXHJcbn1cclxuXHJcbnZhciBmaWVsZFNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpZWxkLXNpemUtc2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbnZhciBmaWVsZFN0cmVuZ3RoU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWVsZC1zdHJlbmd0aC1zbGlkZXJcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIGdyYXZpdHlTdHJlbmd0aFNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3Jhdml0eS1zdHJlbmd0aC1zbGlkZXJcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIHN1YnN0ZXBzQW1vdW50RW50cnlCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1YnN0ZXBzLWFtb3VudC1lbnRyeVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG52YXIgcGFydGljbGVzQW1vdW50RW50cnlCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcnRpY2xlcy1hbW91bnQtZW50cnlcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxudmFyIGd5cm9FbmFibGVkQ2hlY2tCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImd5cm8tdG9nZ2xlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG5jb25zdCByYWRpb0J1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnY3Vyc29yLWZ1bmN0aW9uJykgYXMgTm9kZUxpc3RPZjxIVE1MSW5wdXRFbGVtZW50PjtcclxuXHJcbiAgcmFkaW9CdXR0b25zLmZvckVhY2gocmFkaW9CdXR0b24gPT4ge1xyXG4gICAgcmFkaW9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICBpZiAocmFkaW9CdXR0b24uY2hlY2tlZCkge1xyXG4gICAgICAgIENvbmZpZy5zZXRQb2ludGVyRnVuY3Rpb24ocmFkaW9CdXR0b24udmFsdWUgYXMgUG9pbnRlckZ1bmN0aW9uVHlwZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuZmllbGRTaXplU2xpZGVyLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgQ29uZmlnLnNldEZpZWxkU2l6ZShwYXJzZUludChmaWVsZFNpemVTbGlkZXIudmFsdWUpKTtcclxufVxyXG5cclxuZmllbGRTdHJlbmd0aFNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIENvbmZpZy5zZXRGaWVsZFN0cmVuZ3RoKHBhcnNlSW50KGZpZWxkU3RyZW5ndGhTbGlkZXIudmFsdWUpKTtcclxufVxyXG5cclxuZ3Jhdml0eVN0cmVuZ3RoU2xpZGVyLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgc2V0R3Jhdml0eVN0cmVuZ3RoKHBhcnNlSW50KGdyYXZpdHlTdHJlbmd0aFNsaWRlci52YWx1ZSkpO1xyXG59XHJcblxyXG5zdWJzdGVwc0Ftb3VudEVudHJ5Qm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0UGh5c2ljc1N1YnN0ZXBzQW1vdW50KHBhcnNlSW50KHN1YnN0ZXBzQW1vdW50RW50cnlCb3gudmFsdWUpKTtcclxufSk7XHJcblxyXG5neXJvRW5hYmxlZENoZWNrQm94Lm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHR5cGVvZiBEZXZpY2VNb3Rpb25FdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIChEZXZpY2VNb3Rpb25FdmVudCBhcyBhbnkpLnJlcXVlc3RQZXJtaXNzaW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAoRGV2aWNlTW90aW9uRXZlbnQgYXMgYW55KS5yZXF1ZXN0UGVybWlzc2lvbigpLnRoZW4oKHJlc3BvbnNlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gJ2dyYW50ZWQnKSB7XHJcbiAgICAgICAgICAgIHRvZ2dsZUd5cm8oKTtcclxuICAgICAgICB9XHJcbiAgICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxufSBlbHNlIHtcclxuICAgIHRvZ2dsZUd5cm8oKTtcclxufVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVHeXJvKCl7XHJcbiAgaWYgKGd5cm9FbmFibGVkQ2hlY2tCb3guY2hlY2tlZCkge1xyXG4gICAgQ29uZmlnLnNldElzR3lyb0VuYWJsZWQodHJ1ZSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgaGFuZGxlTW90aW9uLCB0cnVlKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgaGFuZGxlTW90aW9uKTtcclxuICAgIENvbmZpZy5zZXRJc0d5cm9FbmFibGVkKGZhbHNlKTtcclxuICAgIENvbmZpZy5zZXRHcmF2aXR5RGlyZWN0aW9uKG5ldyBWZWMyRCgwLCAxLjMpKTtcclxuICB9XHJcbn1cclxuXHJcbnBhcnRpY2xlc0Ftb3VudEVudHJ5Qm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICBDb25maWcuc2V0UGFydGljbGVOdW1iZXIocGFyc2VJbnQocGFydGljbGVzQW1vdW50RW50cnlCb3gudmFsdWUpKTtcclxuICBsZXQgZGlmZiA9IHBhcnRpY2xlcy5sZW5ndGggLSBDb25maWcuZ2V0UGFydGljbGVOdW1iZXIoKTtcclxuICB3aGlsZSggZGlmZiA+IDApe1xyXG4gICBwYXJ0aWNsZXMucG9wKCk7XHJcbiAgIGRpZmYtLTtcclxuICB9XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU1vdGlvbihldmVudDogRGV2aWNlTW90aW9uRXZlbnQpOiB2b2lkIHtcclxuICBpZihDb25maWcuaXNHeXJvRW5hYmxlZCgpKXtcclxuICBDb25maWcuc2V0R3Jhdml0eURpcmVjdGlvbihuZXcgVmVjMkQoZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54LzUsLWV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueS81KSk7XHJcbiAgfSBlbHNle1xyXG4gICAgQ29uZmlnLnNldEdyYXZpdHlEaXJlY3Rpb24obmV3IFZlYzJEKDAsIDEuMykpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQb2ludGVyRnVuY3Rpb24oKSB7XHJcbiAgdmFyIHJhZGlvQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdjdXJzb3ItZnVuY3Rpb24nKSBhcyBOb2RlTGlzdE9mPEhUTUxJbnB1dEVsZW1lbnQ+XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaW9CdXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAocmFkaW9CdXR0b25zW2ldLmNoZWNrZWQpIHtcclxuICAgICAgcmV0dXJuIHJhZGlvQnV0dG9uc1tpXS52YWx1ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRHcmF2aXR5U3RyZW5ndGgodmFsdWU6IG51bWJlcikge1xyXG4gIENvbmZpZy5zZXRHcmF2aXR5RGlyZWN0aW9uKG5ldyBWZWMyRCgwLCB2YWx1ZSAqIDAuMSkpO1xyXG59XHJcbiIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9HcmlkXCI7XHJcbmltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZSB7XHJcbiAgc3RhdGljIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JlZ3JvdW5kLWNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuICBwdWJsaWMgcG9zaXRpb246IFZlYzJEO1xyXG4gIHB1YmxpYyBhY2NlbGVyYXRpb246IFZlYzJEO1xyXG4gIHB1YmxpYyB2ZWxvY2l0eTogVmVjMkQ7XHJcbiAgcHVibGljIHJhZGl1czogbnVtYmVyO1xyXG4gIHB1YmxpYyBjb2xvcjogeyByOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyIH07XHJcbiAgcHJpdmF0ZSBncmlkOiBHcmlkO1xyXG4gIHByaXZhdGUgY2VsbDogVmVjMkQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBvczogVmVjMkQsIHJhZGl1czogbnVtYmVyLCB2ZWxvY2l0eTogVmVjMkQsIGNvbG9yOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSwgZ3JpZDogR3JpZCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvcztcclxuICAgIHRoaXMudmVsb2NpdHkgPSB2ZWxvY2l0eTtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gbmV3IFZlYzJEKDAsMCk7XHJcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuZ3JpZCA9IGdyaWQ7XHJcbiAgICB0aGlzLmNlbGwgPSBuZXcgVmVjMkQoTWF0aC5mbG9vcih0aGlzLnBvc2l0aW9uLnggLyBncmlkLnBpeGVsU2l6ZSksIE1hdGguZmxvb3IodGhpcy5wb3NpdGlvbi55IC8gZ3JpZC5waXhlbFNpemUpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBvc2l0aW9uKGR0OiBudW1iZXIpIHtcclxuICAgIC8vIGxldCB2ZWxvY2l0eTogVmVjMkQgPSBuZXcgVmVjMkQodGhpcy5jdXJyZW50UG9zaXRpb24ueCAtIHRoaXMucHJldmlvdXNQb3NpdGlvbi54LCB0aGlzLmN1cnJlbnRQb3NpdGlvbi55IC0gdGhpcy5wcmV2aW91c1Bvc2l0aW9uLnkpO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb24uYWRkKHRoaXMudmVsb2NpdHkuYWRkKHRoaXMuYWNjZWxlcmF0aW9uLm11bHRpcGx5KChkdCAqIGR0KSAvIDIpKSk7XHJcblxyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24ueCA9IDA7XHJcbiAgICB0aGlzLmFjY2VsZXJhdGlvbi55ID0gMDtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZUNlbGwoKTtcclxuICB9XHJcblxyXG4gIGFjY2VsZXJhdGUoYWNjOiBWZWMyRCkge1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb24uYWRkKGFjYyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0TmVpZ2hib3JpbmdQYXJ0aWNsZXMoKTogUGFydGljbGVbXSB7XHJcbiAgICBjb25zdCBuZWlnaGJvcmluZ1BhcnRpY2xlczogUGFydGljbGVbXSA9IFtdO1xyXG4gIFxyXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY2VsbC54IC0gMTsgaSA8PSB0aGlzLmNlbGwueCArIDE7IGkrKykge1xyXG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5jZWxsLnkgLSAxOyBqIDw9IHRoaXMuY2VsbC55ICsgMTsgaisrKSB7XHJcbiAgICAgICAgaWYgKGkgPj0gMCAmJiBpIDwgdGhpcy5ncmlkLmNvbHVtbnMgJiYgaiA+PSAwICYmIGogPCB0aGlzLmdyaWQucm93cykge1xyXG4gICAgICAgICAgbmVpZ2hib3JpbmdQYXJ0aWNsZXMucHVzaCguLi50aGlzLmdyaWQuY2VsbHNbaV1bal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5laWdoYm9yaW5nUGFydGljbGVzO1xyXG4gIH1cclxuICBcclxuICB1cGRhdGVDZWxsKCl7XHJcbiAgICB0aGlzLmNlbGwgPSBuZXcgVmVjMkQoTWF0aC5mbG9vcih0aGlzLnBvc2l0aW9uLnggLyB0aGlzLmdyaWQucGl4ZWxTaXplKSwgTWF0aC5mbG9vcih0aGlzLnBvc2l0aW9uLnkgLyB0aGlzLmdyaWQucGl4ZWxTaXplKSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG59IiwiaW1wb3J0IHsgZm9yZWdyb3VuZENhbnZhcyB9IGZyb20gJy4vQ2FudmFzTWFuYWdlcic7XHJcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XHJcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gJy4vSW5wdXRIYW5kbGVyJztcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gJy4vUGFydGljbGUnO1xyXG5pbXBvcnQgVmVjMkQgZnJvbSAnLi9WZWMyRCc7XHJcbmltcG9ydCB7IGF0dHJhY3RvcnMsIGdyaWQsIHBhcnRpY2xlcyB9IGZyb20gJy4vc2NyaXB0JztcclxuXHJcbmNvbnN0IGlucHV0SGFuZGxlciA9IElucHV0SGFuZGxlci5nZXRJbnN0YW5jZSgpO1xyXG5sZXQgcHJldmlvdXNTY3JlZW5YPSAwLCBwcmV2aW91c1NjcmVlblkgPSAwXHJcbmZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9ucyhkdDogbnVtYmVyKSB7XHJcbiAgICBncmlkLnJlbW92ZUFsbCgpO1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgXHJcbiAgICAgIHBhcnRpY2xlLnVwZGF0ZVBvc2l0aW9uKGR0KTtcclxuICAgICAgZ3JpZC5wdXQocGFydGljbGUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGFwcGx5R3Jhdml0eSgpIHtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgICBwYXJ0aWNsZS5hY2NlbGVyYXRlKENvbmZpZy5nZXRHcmF2aXR5RGlyZWN0aW9uKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcHBseVZlbG9jaXR5KHZlbDogVmVjMkQpe1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LmFkZCh2ZWwpXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gYXBwbHlGaWVsZChmaWVsZFBvczogVmVjMkQpIHtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgICBjb25zdCBwdWxsRGlyZWN0aW9uID0gZmllbGRQb3MuZGlmZmVyZW5jZShwYXJ0aWNsZS5wb3NpdGlvbilcclxuICAgICAgY29uc3QgZGlzdGFuY2UgPSBwdWxsRGlyZWN0aW9uLmxlbmd0aCgpO1xyXG4gIFxyXG4gICAgICBpZiAoZGlzdGFuY2UgPCBDb25maWcuZ2V0RmllbGRTaXplKCkgJiYgZGlzdGFuY2UgPiAxMCkge1xyXG4gICAgICAgIHB1bGxEaXJlY3Rpb24ubXVsdGlwbHkoQ29uZmlnLmdldEZpZWxkU3RyZW5ndGgoKSAqIDEwMCk7XHJcbiAgICAgICAgcHVsbERpcmVjdGlvbi5kaXZpZGUoZGlzdGFuY2UgKiBkaXN0YW5jZSk7XHJcbiAgICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShwdWxsRGlyZWN0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBhcHBseUF0dHJhY3RvckZvcmNlc1RvQWxsKCkge1xyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGFwcGx5QXR0cmFjdG9yRm9yY2VzKHBhcnRpY2xlKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHRpY2soZHQ6IG51bWJlcikge1xyXG4gICAgdmFyIHN1Yl9kdCA9IGR0IC8gQ29uZmlnLmdldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCgpO1xyXG4gICAgXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IENvbmZpZy5nZXRQaHlzaWNzU3Vic3RlcHNBbW91bnQoKTsgaSsrKSB7XHJcbiAgICAgIGlmIChDb25maWcuZ2V0R3Jhdml0eURpcmVjdGlvbigpLnkgIT0gMCkge1xyXG4gICAgICAgIGFwcGx5R3Jhdml0eSgpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaW5wdXRIYW5kbGVyLmNsaWNrZWQpIHtcclxuICAgICAgICBzd2l0Y2ggKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSkge1xyXG4gICAgICAgICAgY2FzZSAnZmllbGQnOlxyXG4gICAgICAgICAgICBhcHBseUZpZWxkKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2dyYXZpdHknOlxyXG4gICAgICAgICAgICBDb25maWcuc2V0R3Jhdml0eURpcmVjdGlvbihpbnB1dEhhbmRsZXIucG9pbnRlclBvc2l0aW9uLmRpZmZlcmVuY2UoaW5wdXRIYW5kbGVyLmNsaWNrU3RhcnRQb3NpdGlvbikuZGl2aWRlKDQwMCkpO1xyXG4gICAgICAgICAgY2FzZSAndGhyb3cnOlxyXG4gICAgICAgICAgICBicmVhaztcclxuICBcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRlbHRhWCA9IHdpbmRvdy5zY3JlZW5YIC0gcHJldmlvdXNTY3JlZW5YO1xyXG4gICAgICBjb25zdCBkZWx0YVkgPSB3aW5kb3cuc2NyZWVuWSAtIHByZXZpb3VzU2NyZWVuWTtcclxuICAgICAgY29uc3Qgc2NyZWVuVmVsb2NpdHkgPSBuZXcgVmVjMkQoLWRlbHRhWCAvIDYwLCAtZGVsdGFZIC8gNjApO1xyXG5cclxuICAgICAgYXBwbHlWZWxvY2l0eShzY3JlZW5WZWxvY2l0eSk7XHJcblxyXG4gICAgICBwcmV2aW91c1NjcmVlblggPSB3aW5kb3cuc2NyZWVuWDtcclxuICAgICAgcHJldmlvdXNTY3JlZW5ZID0gd2luZG93LnNjcmVlblk7XHJcblxyXG5cclxuICAgICAgLy8gYXBwbHlBdHRyYWN0b3JGb3JjZXNUb0FsbCgpO1xyXG4gICAgICBhcHBseUNvbnN0cmFpbnRUb0FsbEVkZ2VzKCk7XHJcbiAgICAgIHNvbHZlQ29sbGlzaW9ucygpO1xyXG4gICAgICB1cGRhdGVQb3NpdGlvbnMoc3ViX2R0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludFRvQWxsRWRnZXMoKSB7XHJcblxyXG4gICAgcGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAgIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGdyaWQubGVuZ3RoOyBjb2wrKykge1xyXG4gICAgLy8gICBmb3IgKHZhciB0aGlja25lc3MgPSAwOyB0aGlja25lc3MgPCAyOyB0aGlja25lc3MrKykge1xyXG4gICAgLy8gICAgIGdyaWRbY29sXVt0aGlja25lc3NdLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gIFxyXG4gICAgLy8gICAgIGdyaWRbY29sXVtncmlkWzBdLmxlbmd0aCAtIHRoaWNrbmVzcyAtIDFdLmZvckVhY2goKHBhcnRpY2xlKSA9PiB7XHJcbiAgICAvLyAgICAgICBhcHBseUNvbnN0cmFpbnQocGFydGljbGUpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9XHJcbiAgXHJcbiAgICAvLyBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBncmlkWzBdLmxlbmd0aDsgcm93KyspIHtcclxuICAgIC8vICAgZm9yICh2YXIgdGhpY2tuZXNzID0gMDsgdGhpY2tuZXNzIDwgMjsgdGhpY2tuZXNzKyspIHtcclxuICAgIC8vICAgICBncmlkW3RoaWNrbmVzc11bcm93XS5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgLy8gICAgICAgYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlKTtcclxuICAgIC8vICAgICB9KTtcclxuICBcclxuICAgIC8vICAgICBncmlkW2dyaWQubGVuZ3RoIC0gdGhpY2tuZXNzIC0gMV1bcm93XS5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgLy8gICAgICAgYXBwbHlDb25zdHJhaW50KHBhcnRpY2xlKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludChwYXJ0aWNsZTogUGFydGljbGUpIHtcclxuICAgIC8vIEFwcGx5IGZsb29yIGNvbnN0cmFpbnRcclxuICAgIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi55ICsgcGFydGljbGUucmFkaXVzID4gZm9yZWdyb3VuZENhbnZhcy5oZWlnaHQpIHtcclxuICAgICAgcGFydGljbGUudmVsb2NpdHkgPSBuZXcgVmVjMkQocGFydGljbGUudmVsb2NpdHkueCwgLU1hdGguYWJzKHBhcnRpY2xlLnZlbG9jaXR5LnkpKS5tdWx0aXBseSgwLjUpXHJcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSBmb3JlZ3JvdW5kQ2FudmFzLmhlaWdodCAtIHBhcnRpY2xlLnJhZGl1cztcclxuICAgICAgLy8gcGFydGljbGUucHJldmlvdXNQb3NpdGlvbi55ID0gcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnkgKyBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueSAtIHBhcnRpY2xlLnByZXZpb3VzUG9zaXRpb24ueTtcclxuICAgICAgLy8gcGFydGljbGUuYWNjZWxlcmF0ZShuZXcgVmVjMkQoMCwgLShmb3JlZ3JvdW5kQ2FudmFzLmhlaWdodCAtIHBhcnRpY2xlLnJhZGl1cykvMTApKVxyXG5cclxuICAgIH1cclxuICBcclxuICAgIC8vIEFwcGx5IENlaWxpbmcgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5yYWRpdXMgPCAwKSB7XHJcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5ID0gbmV3IFZlYzJEKHBhcnRpY2xlLnZlbG9jaXR5LngsIE1hdGguYWJzKHBhcnRpY2xlLnZlbG9jaXR5LnkpKS5tdWx0aXBseSgwLjUpO1xyXG4gICAgICAvLyBwYXJ0aWNsZS5wcmV2aW91c1Bvc2l0aW9uLnkgPSBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueSArIHBhcnRpY2xlLmN1cnJlbnRQb3NpdGlvbi55IC0gcGFydGljbGUucHJldmlvdXNQb3NpdGlvbi55O1xyXG4gICAgfVxyXG4gIFxyXG4gIFxyXG4gICAgLy8gQXBwbHkgbGVmdCB3YWxsIGNvbnN0cmFpbnRcclxuICAgIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi54IC0gcGFydGljbGUucmFkaXVzIDwgMCkge1xyXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gcGFydGljbGUucmFkaXVzO1xyXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eSA9IG5ldyBWZWMyRChNYXRoLmFicyhwYXJ0aWNsZS52ZWxvY2l0eS54KSwgcGFydGljbGUudmVsb2NpdHkueSkubXVsdGlwbHkoMC41KTtcclxuICAgICAgLy8gcGFydGljbGUucHJldmlvdXNQb3NpdGlvbi54ID0gcGFydGljbGUuY3VycmVudFBvc2l0aW9uLnggKyBwYXJ0aWNsZS5jdXJyZW50UG9zaXRpb24ueCAtIHBhcnRpY2xlLnByZXZpb3VzUG9zaXRpb24ueDtcclxuICAgIH1cclxuICBcclxuICAgIC8vIEFwcGx5IHJpZ2h0IHdhbGwgY29uc3RyYWludFxyXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnggKyBwYXJ0aWNsZS5yYWRpdXMgPiBmb3JlZ3JvdW5kQ2FudmFzLndpZHRoKSB7XHJcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5ID0gbmV3IFZlYzJEKC1NYXRoLmFicyhwYXJ0aWNsZS52ZWxvY2l0eS54KSwgcGFydGljbGUudmVsb2NpdHkueSkubXVsdGlwbHkoMC41KTtcclxuICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IGZvcmVncm91bmRDYW52YXMud2lkdGggLSBwYXJ0aWNsZS5yYWRpdXM7XHJcbiAgICAgIC8vIHBhcnRpY2xlLmFjY2VsZXJhdGUobmV3IFZlYzJEKC0oZm9yZWdyb3VuZENhbnZhcy53aWR0aCAtIHBhcnRpY2xlLnJhZGl1cykvMTAsMCkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gYXBwbHlBdHRyYWN0b3JGb3JjZXMocGFydGljbGU6IFBhcnRpY2xlKSB7XHJcbiAgICBhdHRyYWN0b3JzLmZvckVhY2goKGF0dHJhY3RvcikgPT4ge1xyXG4gICAgICBjb25zdCBwdWxsRGlyZWN0aW9uID0gYXR0cmFjdG9yLnBvc2l0aW9uLmRpZmZlcmVuY2UocGFydGljbGUucG9zaXRpb24pXHJcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gcHVsbERpcmVjdGlvbi5sZW5ndGgoKTtcclxuICBcclxuICAgICAgaWYgKGRpc3RhbmNlIDwgYXR0cmFjdG9yLnJhZGl1cyAmJiBkaXN0YW5jZSA+IDEwKSB7XHJcbiAgICAgICAgcHVsbERpcmVjdGlvbi5tdWx0aXBseShhdHRyYWN0b3IuZm9yY2UpO1xyXG4gICAgICAgIHB1bGxEaXJlY3Rpb24uZGl2aWRlKGRpc3RhbmNlICogZGlzdGFuY2UpXHJcbiAgICAgICAgcGFydGljbGUuYWNjZWxlcmF0ZShwdWxsRGlyZWN0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNvbHZlQ29sbGlzaW9ucygpIHtcclxuICAgIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZTEpID0+IHtcclxuICAgICAgICBjb25zdCBuZWlnaGJvcmluZ1BhcnRpY2xlcyA9IHBhcnRpY2xlMS5nZXROZWlnaGJvcmluZ1BhcnRpY2xlcygpO1xyXG4gICAgICAgIG5laWdoYm9yaW5nUGFydGljbGVzLmZvckVhY2goKHBhcnRpY2xlMikgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFydGljbGUxID09PSBwYXJ0aWNsZTIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGxldCBzcXVhcmVkRGlzdGFuY2UgPSBwYXJ0aWNsZTEucG9zaXRpb24uc3F1YXJlZERpc3RhbmNlVG8ocGFydGljbGUyLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhlIGNvbGxpc2lvbiBvY2N1cnJlZCwgaWYgbm8sIHJldHVyblxyXG4gICAgICAgICAgICBpZiAoc3F1YXJlZERpc3RhbmNlID4gKHBhcnRpY2xlMS5yYWRpdXMgKyBwYXJ0aWNsZTIucmFkaXVzKSoqMikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KHNxdWFyZWREaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIGxldCBjb2xsaXNpb25Ob3JtYWwgPSBuZXcgVmVjMkQoKHBhcnRpY2xlMi5wb3NpdGlvbi54IC0gcGFydGljbGUxLnBvc2l0aW9uLngpLyBkaXN0YW5jZSwgKHBhcnRpY2xlMi5wb3NpdGlvbi55IC0gcGFydGljbGUxLnBvc2l0aW9uLnkpIC8gZGlzdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgLy9ubyBuZWVkIHRvIG11bHRpcGx5IGJ5IDIsIGJlY2F1c2UgbTErIG0yIGlzIDJcclxuICAgICAgICAgICAgbGV0IHAgPSAocGFydGljbGUxLnZlbG9jaXR5LnggKiBjb2xsaXNpb25Ob3JtYWwueCArIHBhcnRpY2xlMS52ZWxvY2l0eS55ICogY29sbGlzaW9uTm9ybWFsLnkgLSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljbGUyLnZlbG9jaXR5LnggKiBjb2xsaXNpb25Ob3JtYWwueCArIHBhcnRpY2xlMi52ZWxvY2l0eS55ICogY29sbGlzaW9uTm9ybWFsLnkpO1xyXG4gICAgICAgICAgICBwYXJ0aWNsZTEudmVsb2NpdHkuc2V0KG5ldyBWZWMyRChwYXJ0aWNsZTEudmVsb2NpdHkueCAtIHAgKiBjb2xsaXNpb25Ob3JtYWwueCwgcGFydGljbGUxLnZlbG9jaXR5LnkgLSBwICogY29sbGlzaW9uTm9ybWFsLnkpKVxyXG4gICAgICAgICAgICBwYXJ0aWNsZTIudmVsb2NpdHkuc2V0KG5ldyBWZWMyRChwYXJ0aWNsZTIudmVsb2NpdHkueCArIHAgKiBjb2xsaXNpb25Ob3JtYWwueCwgcGFydGljbGUyLnZlbG9jaXR5LnkgKyBwICogY29sbGlzaW9uTm9ybWFsLnkpKVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIHRlbXBDb2xsaXNpb25EaXJlY3Rpb24uc2V0KHBhcnRpY2xlMS5jdXJyZW50UG9zaXRpb24pLnN1YnRyYWN0KHBhcnRpY2xlMi5jdXJyZW50UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAvLyBzcXVhcmVkRGlzdGFuY2UgPSB0ZW1wQ29sbGlzaW9uRGlyZWN0aW9uLnNxdWFyZWRMZW5ndGgoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIHJhZGlpU3VtID0gcGFydGljbGUxLnJhZGl1cyArIHBhcnRpY2xlMi5yYWRpdXM7XHJcbiAgICAgICAgICAgIC8vIHNxdWFyZWRSYWRpaVN1bSA9IHJhZGlpU3VtICogcmFkaWlTdW07XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAoc3F1YXJlZERpc3RhbmNlIDwgc3F1YXJlZFJhZGlpU3VtICYmIHNxdWFyZWREaXN0YW5jZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyAgICAgbnVtYmVyT2ZDb2xsaXNpb25zKys7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChzcXVhcmVkRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICAvLyAgICAgbGV0IG5vcm1hbCA9IHRlbXBDb2xsaXNpb25EaXJlY3Rpb24uZGl2aWRlKGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgLy8gICAgIGxldCBkZWx0YSA9IHJhZGlpU3VtIC0gZGlzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTW92ZSBwYXJ0aWNsZXMgYXBhcnQgYmFzZWQgb24gdGhlaXIgb3ZlcmxhcFxyXG4gICAgICAgICAgICAvLyBsZXQgZGlzcGxhY2VtZW50ID0gbm9ybWFsLm11bHRpcGx5KGRlbHRhICogMC41KTtcclxuICAgICAgICAgICAgLy8gcGFydGljbGUxLmN1cnJlbnRQb3NpdGlvbi5hZGQoZGlzcGxhY2VtZW50KTtcclxuICAgICAgICAgICAgLy8gcGFydGljbGUyLmN1cnJlbnRQb3NpdGlvbi5zdWJ0cmFjdChkaXNwbGFjZW1lbnQpO1xyXG4gICAgICAgICAgICBsZXQgZGVsdGEgPSAocGFydGljbGUxLnJhZGl1cyArIHBhcnRpY2xlMi5yYWRpdXMpIC0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIGNvbGxpc2lvbk5vcm1hbC5tdWx0aXBseShkZWx0YSAqIDAuNilcclxuXHJcbiAgICAgICAgICAgIHBhcnRpY2xlMS5wb3NpdGlvbi5zdWJ0cmFjdChjb2xsaXNpb25Ob3JtYWwpO1xyXG4gICAgICAgICAgICBwYXJ0aWNsZTIucG9zaXRpb24uYWRkKGNvbGxpc2lvbk5vcm1hbCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhudW1iZXJPZkNvbGxpc2lvbnMpO1xyXG59XHJcblxyXG4gICIsImltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgcGFydGljbGVGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9zaGFkZXJzL3BhcnRpY2xlRnJhZ21lbnRTaGFkZXIuZnJhZ1wiO1xyXG5pbXBvcnQgcGFydGljbGVWZXJ0ZXhTaGFkZXIgZnJvbSBcIi4vc2hhZGVycy9wYXJ0aWNsZVZlcnRleFNoYWRlci52ZXJ0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVByb2dyYW0sIGNyZWF0ZVNoYWRlciwgcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZSB9IGZyb20gXCIuL1NoYWRlckhlbHBlclwiO1xyXG5pbXBvcnQgQXR0cmFjdG9yIGZyb20gXCIuL0F0dHJhY3RvclwiO1xyXG5pbXBvcnQgeyBiYWNrZ3JvdW5kQ2FudmFzQ3R4LCBmb3JlZ3JvdW5kQ2FudmFzLCBmb3JlZ3JvdW5kQ2FudmFzQ3R4IH0gZnJvbSBcIi4vQ2FudmFzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBhcHBseUF0dHJhY3RvckZvcmNlcywgYXBwbHlDb25zdHJhaW50IH0gZnJvbSBcIi4vUGh5c2ljc0VuZ2luZVwiO1xyXG5pbXBvcnQgeyBJbnB1dEhhbmRsZXIgfSBmcm9tIFwiLi9JbnB1dEhhbmRsZXJcIjtcclxuaW1wb3J0IHsgZ3JpZCwgcGFydGljbGVzIH0gZnJvbSBcIi4vc2NyaXB0XCI7XHJcbmltcG9ydCBQYXJ0aWNsZSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xyXG5pbXBvcnQgeyBnZXRBdmVyYWdlRnJhbWVUaW1lIH0gZnJvbSBcIi4vVUlNYW5hZ2VyXCI7XHJcblxyXG5cclxudmFyIHdlYmdsQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dlYmdsLWNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG52YXIgZ2wgPSB3ZWJnbENhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcbndlYmdsQ2FudmFzIS53aWR0aCA9IHdlYmdsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG53ZWJnbENhbnZhcyEuaGVpZ2h0ID0gd2ViZ2xDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cclxuY29uc3QgaW5wdXRIYW5kbGVyID0gSW5wdXRIYW5kbGVyLmdldEluc3RhbmNlKCk7XHJcblxyXG5pZiAoIWdsKSB7XHJcbiAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbml0aWFsaXplIFdlYkdMLiBZb3VyIGJyb3dzZXIgbWF5IG5vdCBzdXBwb3J0IGl0LlwiKTtcclxufVxyXG5cclxuLy9lbmFsYmluZyBibGVuZGluZyBmb3IgcHJvcGVyIGFscGhhIG9uIHRoZSBwYXJ0aWNsZXNcclxuZ2wuZW5hYmxlKGdsLkJMRU5EKTtcclxuZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XHJcblxyXG4vL2NvbXBpbGluZyB0aGUgc2hhZGVycyB3aXRoIGEgaGVscGVyIGZ1bmN0aW9uXHJcbnZhciB2ZXJ0ZXhTaGFkZXIgPSBjcmVhdGVTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHBhcnRpY2xlVmVydGV4U2hhZGVyKTtcclxudmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHBhcnRpY2xlRnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuLy9jcmVhdGluZyBhIFdlYkdMIHByb2dyYW0gYW5kIGF0dGFjaGluZyB0aGUgc2hhZGVycyB0byBpdCB3aXRoIGEgaGVscGVyIGZ1bmN0aW9uXHJcbnZhciBwcm9ncmFtID0gY3JlYXRlUHJvZ3JhbShnbCwgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcik7XHJcblxyXG4vL2xvb2tpbmcgdXAgdW5pZm9ybSBsb2NhdGlvbiBhbmQgd2hlcmUgdGhlIHZlcnRleCBkYXRhIG5lZWRzIHRvIGdvXHJcbnZhciBwb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xyXG52YXIgcmVzb2x1dGlvblVuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfcmVzb2x1dGlvblwiKTtcclxudmFyIGNvbG9yVW5pZm9ybUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9jb2xvclwiKTtcclxudmFyIHRyYW5zbGF0aW9uTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJ1X3RyYW5zbGF0aW9uXCIpO1xyXG52YXIgcmFkaXVzVW5pZm9ybUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9yYWRpdXNcIik7XHJcbnZhciBvdXRsaW5lVW5pZm9ybUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9vdXRsaW5lX2JsYWNrXCIpO1xyXG52YXIgcG9zaXRpb25CdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHBvc2l0aW9uQnVmZmVyKTtcclxuXHJcbmZ1bmN0aW9uIHNldFJlY3RhbmdsZShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB4Om51bWJlciwgeTpudW1iZXIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcikge1xyXG4gIHZhciB4MSA9IHggLSB3aWR0aCAvIDI7XHJcbiAgdmFyIHgyID0geCArIHdpZHRoIC8gMjtcclxuICB2YXIgeTEgPSB5IC0gaGVpZ2h0IC8gMjtcclxuICB2YXIgeTIgPSB5ICsgaGVpZ2h0IC8gMjtcclxuIFxyXG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICB4MSwgeTEsXHJcbiAgICAgeDIsIHkxLFxyXG4gICAgIHgxLCB5MixcclxuICAgICB4MSwgeTIsXHJcbiAgICAgeDIsIHkxLFxyXG4gICAgIHgyLCB5Ml0pLCBnbC5TVEFUSUNfRFJBVyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRHZW9tZXRyeSgpe1xyXG4gIHBhcnRpY2xlcy5mb3JFYWNoKChwYXJ0aWNsZSkgPT4ge1xyXG4gICAgc2V0UmVjdGFuZ2xlKFxyXG4gICAgICBnbCwgMCwgMCwgQ29uZmlnLmdldEdyaWRTaXplKCksIENvbmZpZy5nZXRHcmlkU2l6ZSgpKTtcclxuICB9KTtcclxuXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdQYXJ0aWNsZXMoKSB7XHJcbiAgcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZShnbC5jYW52YXMpO1xyXG5cclxuICAvLyBUZWxsIFdlYkdMIGhvdyB0byBjb252ZXJ0IGZyb20gY2xpcCBzcGFjZSB0byBwaXhlbHNcclxuICBnbC52aWV3cG9ydCgwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAvLyBDbGVhciB0aGUgY2FudmFzXHJcbiAgZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTsgLy8gQ2xlYXIgdG8gdHJhbnNwYXJlbnQgYmxhY2tcclxuICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgLy8gVGVsbCBpdCB0byB1c2UgcHJvZ3JhbSAocGFpciBvZiBzaGFkZXJzKVxyXG4gIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG4gIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24pO1xyXG5cclxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xyXG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICB2YXIgb3V0bGluZUNvbG9yID0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1pcy1vdXRsaW5lLWRhcmsnKSk7XHJcbiAgdmFyIHJlc29sdXRpb24gPSBbZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0XVxyXG4gIC8vIERyYXcgdGhlIHJlY3RhbmdsZS5cclxuICBwYXJ0aWNsZXMuZm9yRWFjaCgocGFydGljbGUpID0+IHtcclxuICAgICAgZ2wudW5pZm9ybTJmdihyZXNvbHV0aW9uVW5pZm9ybUxvY2F0aW9uLCByZXNvbHV0aW9uKTtcclxuICAgICAgZ2wudW5pZm9ybTJmKHRyYW5zbGF0aW9uTG9jYXRpb24sIHBhcnRpY2xlLnBvc2l0aW9uLngsIHBhcnRpY2xlLnBvc2l0aW9uLnkpO1xyXG4gICAgICBnbC51bmlmb3JtM2YoY29sb3JVbmlmb3JtTG9jYXRpb24sIHBhcnRpY2xlLmNvbG9yLnIscGFydGljbGUuY29sb3IuZywgcGFydGljbGUuY29sb3IuYik7XHJcbiAgICAgIGdsLnVuaWZvcm0xZihyYWRpdXNVbmlmb3JtTG9jYXRpb24sIHBhcnRpY2xlLnJhZGl1cylcclxuICAgICAgZ2wudW5pZm9ybTFmKG91dGxpbmVVbmlmb3JtTG9jYXRpb24sIG91dGxpbmVDb2xvcik7XHJcbiAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCA2KTtcclxuICB9KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdBdHRyYWN0b3JzKGF0dHJhY3RvcnM6IEF0dHJhY3RvcltdKSB7XHJcbiAgYXR0cmFjdG9ycy5mb3JFYWNoKChhdHRyYWN0b3IpID0+IHtcclxuICAgIGF0dHJhY3Rvci5hbmltYXRlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0RvdHRlZExpbmUoZnJvbTogVmVjMkQsIHRvOiBWZWMyRCwgcmFkaXVzOiBudW1iZXIgPSA1LCBkb3RDb3VudDogbnVtYmVyID0gOCkge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCAmJiBmcm9tLnggIT0gdG8ueCAmJiBmcm9tLnkgIT0gdG8ueSkge1xyXG4gICAgY29uc3QgZGlzdGFuY2UgPSBmcm9tLmRpZmZlcmVuY2UodG8pO1xyXG4gICAgZHJhd1ByZWRpY3RlZFBhdGgoZnJvbS5jbG9uZSgpLCBkaXN0YW5jZS5jbG9uZSgpLm11bHRpcGx5KDAuMDUpKVxyXG4gICAgZGlzdGFuY2UuZGl2aWRlKGRvdENvdW50KTtcclxuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIodG8ueSAtIGZyb20ueSwgdG8ueCAtIGZyb20ueCk7XHJcbiAgICB2YXIgbmV3X3RvID0gbmV3IFZlYzJEKHRvLngsIHRvLnkpO1xyXG5cclxuICAgIG5ld190by54IC09IE1hdGguY29zKGFuZ2xlKTtcclxuICAgIG5ld190by55IC09IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBkb3RDb3VudDsgaSsrKSB7XHJcbiAgICAgIHZhciBkb3RYID0gZnJvbS54IC0gZGlzdGFuY2UueCAqIGk7XHJcbiAgICAgIHZhciBkb3RZID0gZnJvbS55IC0gZGlzdGFuY2UueSAqIGk7XHJcbiAgICAgIGRyYXdEb3QoZG90WCwgZG90WSwgcmFkaXVzLCAyNTUpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3UHJlZGljdGVkUGF0aChzdGFydFBvczogVmVjMkQsIEFjY2VsZXJhdGlvblZlY3RvcjogVmVjMkQpIHtcclxuICBsZXQgZG90Q291bnQgPSAxMjc7XHJcbiAgbGV0IHByZWRpY3RlZERvdCA9IG5ldyBQYXJ0aWNsZShzdGFydFBvcywgQ29uZmlnLmdldEdyaWRTaXplKCkvMiwgQWNjZWxlcmF0aW9uVmVjdG9yLCB7cjowLCBnOjAsIGI6MH0sZ3JpZClcclxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBkb3RDb3VudDsgaSsrKSB7XHJcblxyXG4gICAgcHJlZGljdGVkRG90LmFjY2VsZXJhdGUoQ29uZmlnLmdldEdyYXZpdHlEaXJlY3Rpb24oKSk7XHJcbiAgICBhcHBseUNvbnN0cmFpbnQocHJlZGljdGVkRG90KTtcclxuICAgIGFwcGx5QXR0cmFjdG9yRm9yY2VzKHByZWRpY3RlZERvdCk7XHJcbiAgICBwcmVkaWN0ZWREb3QudXBkYXRlUG9zaXRpb24oZ2V0QXZlcmFnZUZyYW1lVGltZSgpLzIwKTtcclxuICAgIGlmIChpICUgMyA9PSAwKSB7XHJcbiAgICAgIGRyYXdEb3QocHJlZGljdGVkRG90LnBvc2l0aW9uLngsIHByZWRpY3RlZERvdC5wb3NpdGlvbi55LCA1LCAyNTUgLSBpKjIpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RG90KGRvdFg6IG51bWJlciwgZG90WTogbnVtYmVyLCBkb3RTaXplOiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcikge1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgZm9yZWdyb3VuZENhbnZhc0N0eC5hcmMoXHJcbiAgICBkb3RYLFxyXG4gICAgZG90WSxcclxuICAgIGRvdFNpemUsXHJcbiAgICAwLFxyXG4gICAgMiAqIE1hdGguUEksXHJcbiAgICBmYWxzZVxyXG4gICk7XHJcblxyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gYHJnYmEoMjEwLCAyMTAsIDIxMCwgJHtvcGFjaXR5IC8gMjU1fSlgO1xyXG4gIGZvcmVncm91bmRDYW52YXNDdHguZmlsbCgpO1xyXG5cclxuICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0xhc3NvKGxpbmVXaWR0aDogbnVtYmVyID0gMykge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYXJjKGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24ueCwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbi55LCBDb25maWcuZ2V0RmllbGRTaXplKCksIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2VTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWdyaWQtY29sb3InKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdBcnJvdyhmcm9tOiBWZWMyRCwgdG86IFZlYzJEKSB7XHJcbiAgaWYgKGlucHV0SGFuZGxlci5jbGlja2VkICYmIGZyb20ueCAhPSB0by54ICYmIGZyb20ueSAhPSB0by55KSB7XHJcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHRvLnkgLSBmcm9tLnksIHRvLnggLSBmcm9tLngpO1xyXG4gICAgY29uc3Qgd2lkdGggPSAxMDtcclxuICAgIHZhciBoZWFkbGVuID0gMTA7XHJcbiAgICB2YXIgbmV3X3RvID0gbmV3IFZlYzJEKHRvLngsIHRvLnkpO1xyXG4gICAgLy8gVGhpcyBtYWtlcyBpdCBzbyB0aGUgZW5kIG9mIHRoZSBhcnJvdyBoZWFkIGlzIGxvY2F0ZWQgYXQgdG94LCB0b3ksIGRvbid0IGFzayB3aGVyZSAxLjE1IGNvbWVzIGZyb21cclxuICAgIG5ld190by54IC09IE1hdGguY29zKGFuZ2xlKSAqICgod2lkdGggKiAxLjE1KSk7XHJcbiAgICBuZXdfdG8ueSAtPSBNYXRoLnNpbihhbmdsZSkgKiAoKHdpZHRoICogMS4xNSkpO1xyXG5cclxuXHJcblxyXG4gICAgLy9zdGFydGluZyBwYXRoIG9mIHRoZSBhcnJvdyBmcm9tIHRoZSBzdGFydCBzcXVhcmUgdG8gdGhlIGVuZCBzcXVhcmUgYW5kIGRyYXdpbmcgdGhlIHN0cm9rZVxyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubW92ZVRvKGZyb20ueCwgZnJvbS55KTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHgubGluZVRvKG5ld190by54LCBuZXdfdG8ueSk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvL3N0YXJ0aW5nIGEgbmV3IHBhdGggZnJvbSB0aGUgaGVhZCBvZiB0aGUgYXJyb3cgdG8gb25lIG9mIHRoZSBzaWRlcyBvZiB0aGUgcG9pbnRcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4Lm1vdmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL3BhdGggZnJvbSB0aGUgc2lkZSBwb2ludCBvZiB0aGUgYXJyb3csIHRvIHRoZSBvdGhlciBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRsZW4gKiBNYXRoLmNvcyhhbmdsZSArIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkbGVuICogTWF0aC5zaW4oYW5nbGUgKyBNYXRoLlBJIC8gNykpO1xyXG5cclxuICAgIC8vcGF0aCBmcm9tIHRoZSBzaWRlIHBvaW50IGJhY2sgdG8gdGhlIHRpcCBvZiB0aGUgYXJyb3csIGFuZCB0aGVuIGFnYWluIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIHBvaW50XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVUbyhuZXdfdG8ueCwgbmV3X3RvLnkpO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5saW5lVG8obmV3X3RvLnggLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgLSBNYXRoLlBJIC8gNyksIG5ld190by55IC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSSAvIDcpKTtcclxuXHJcbiAgICAvL2RyYXdzIHRoZSBwYXRocyBjcmVhdGVkIGFib3ZlXHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgZm9yZWdyb3VuZENhbnZhc0N0eC5zdHJva2UoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gXCIjYmJiYmJiXCI7XHJcbiAgICBmb3JlZ3JvdW5kQ2FudmFzQ3R4LmZpbGwoKTtcclxuICAgIGZvcmVncm91bmRDYW52YXNDdHguY2xvc2VQYXRoKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0N1cnNvckZ1bmN0aW9uKCkge1xyXG4gIGlmIChpbnB1dEhhbmRsZXIuY2xpY2tlZCkge1xyXG5zd2l0Y2ggKENvbmZpZy5nZXRQb2ludGVyRnVuY3Rpb24oKSkge1xyXG4gIGNhc2UgJ2ZpZWxkJzpcclxuICAgIGRyYXdMYXNzbygpO1xyXG4gICAgYnJlYWs7XHJcbiAgY2FzZSAnZ3Jhdml0eSc6XHJcbiAgICBkcmF3QXJyb3coaW5wdXRIYW5kbGVyLmNsaWNrU3RhcnRQb3NpdGlvbiwgaW5wdXRIYW5kbGVyLnBvaW50ZXJQb3NpdGlvbilcclxuICAgIGJyZWFrO1xyXG4gIGNhc2UgJ3Rocm93JzpcclxuICAgIGRyYXdEb3R0ZWRMaW5lKGlucHV0SGFuZGxlci5jbGlja1N0YXJ0UG9zaXRpb24sIGlucHV0SGFuZGxlci5wb2ludGVyUG9zaXRpb24pXHJcbiAgICBicmVhaztcclxufVxyXG4gIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFkZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdHlwZTogYW55LCBzb3VyY2U6IGFueSkge1xyXG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICB2YXIgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlciwgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyKSB7XHJcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdmFyIHN1Y2Nlc3MgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBwcm9ncmFtO1xyXG4gICAgfVxyXG4gICBcclxuICAgIGNvbnNvbGUubG9nKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcclxuICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZShjYW52YXM6YW55KSB7XHJcbiAgICAvLyBMb29rdXAgdGhlIHNpemUgdGhlIGJyb3dzZXIgaXMgZGlzcGxheWluZyB0aGUgY2FudmFzIGluIENTUyBwaXhlbHMuXHJcbiAgICBjb25zdCBkaXNwbGF5V2lkdGggID0gY2FudmFzLmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgZGlzcGxheUhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbnZhcyBpcyBub3QgdGhlIHNhbWUgc2l6ZS5cclxuICAgIGNvbnN0IG5lZWRSZXNpemUgPSBjYW52YXMud2lkdGggICE9PSBkaXNwbGF5V2lkdGggfHxcclxuICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ICE9PSBkaXNwbGF5SGVpZ2h0O1xyXG4gICBcclxuICAgIGlmIChuZWVkUmVzaXplKSB7XHJcbiAgICAgIC8vIE1ha2UgdGhlIGNhbnZhcyB0aGUgc2FtZSBzaXplXHJcbiAgICAgIGNhbnZhcy53aWR0aCAgPSBkaXNwbGF5V2lkdGg7XHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xyXG4gICAgfVxyXG4gICBcclxuICAgIHJldHVybiBuZWVkUmVzaXplO1xyXG5cclxuICB9IiwiaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vQ29uZmlnJztcclxuXHJcbmxldCBmcHNDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbmZwc0NvdW50ZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5mcHNDb3VudGVyLnN0eWxlLnRvcCA9ICcxMHB4JztcclxuZnBzQ291bnRlci5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xyXG5cclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmcHNDb3VudGVyKTtcclxuXHJcbmV4cG9ydCB2YXIgZnBzID0gNjA7XHJcbmV4cG9ydCB2YXIgZnJhbWVUaW1lczpudW1iZXJbXSA9IFtdO1xyXG5jb25zdCBtYXhGcmFtZXMgPSAxMDA7IFxyXG5cclxubGV0IGxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVUkoKSB7XHJcbiAgICBsZXQgYXZlcmFnZWRGUFMgPSBjYWxjdWxhdGVGUFMoKTtcclxuICAgIGZwc0NvdW50ZXIuaW5uZXJUZXh0ID0gYEZQUzogJHtNYXRoLnJvdW5kKGF2ZXJhZ2VkRlBTKX1gO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVGUFMoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgY29uc3QgdGltZURpZmYgPSBjdXJyZW50VGltZSAtIGxhc3RUaW1lO1xyXG4gICAgZnJhbWVUaW1lcy5wdXNoKHRpbWVEaWZmKTtcclxuXHJcbiAgICBpZiAoZnJhbWVUaW1lcy5sZW5ndGggPiBtYXhGcmFtZXMpIHtcclxuICAgICAgICBmcmFtZVRpbWVzLnNoaWZ0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0IGF2ZXJhZ2VGUFMgPSBmcmFtZVRpbWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gZnJhbWVUaW1lcy5sZW5ndGg7XHJcblxyXG4gICAgbGFzdFRpbWUgPSBjdXJyZW50VGltZTtcclxuXHJcbiAgICByZXR1cm4gMTAwMCAvIGF2ZXJhZ2VGUFM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmVyYWdlRnJhbWVUaW1lKCl7XHJcbiAgICByZXR1cm4gZnJhbWVUaW1lcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIGZyYW1lVGltZXMubGVuZ3RoO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIgfSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBnOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICBiOiBNYXRoLnJhbmRvbSgpXHJcbiAgICB9XHJcbiAgfVxyXG4gICIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlYzJEIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBhZGQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ICs9IG90aGVyLng7XHJcbiAgICAgIHRoaXMueSArPSBvdGhlci55O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQob3RoZXI6IFZlYzJEKXtcclxuICAgICAgdGhpcy54ID0gb3RoZXIueDtcclxuICAgICAgdGhpcy55ID0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN1YnRyYWN0KG90aGVyOiBWZWMyRCl7XHJcbiAgICAgIHRoaXMueCAtPSBvdGhlci54O1xyXG4gICAgICB0aGlzLnkgLT0gb3RoZXIueTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBtdWx0aXBseShzY2FsYXI6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnggKj0gc2NhbGFyO1xyXG4gICAgICB0aGlzLnkgKj0gc2NhbGFyO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICBcclxuICAgIGRpdmlkZShzY2FsYXI6IG51bWJlcil7XHJcbiAgICAgIHRoaXMueCAvPSBzY2FsYXI7XHJcbiAgICAgIHRoaXMueSAvPSBzY2FsYXI7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZG90KHZlYzogVmVjMkQpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICogdmVjLnggKyB0aGlzLnkgKiB2ZWMueTtcclxuICAgIH1cclxuXHJcbiAgICBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNxdWFyZWRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBWZWMyRHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMyRCh0aGlzLngsIHRoaXMueSlcclxuICAgIH1cclxuXHJcbiAgICBkaWZmZXJlbmNlKG90aGVyOiBWZWMyRCk6IFZlYzJEe1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzJEKHRoaXMueCAtIG90aGVyLngsIHRoaXMueSAtIG90aGVyLnkpXHJcbiAgICB9XHJcblxyXG4gICAgc3F1YXJlZERpc3RhbmNlVG8ob3RoZXI6VmVjMkQpe1xyXG4gICAgICByZXR1cm4gKHRoaXMueCAtIG90aGVyLngpKioyICsgKHRoaXMueSAtIG90aGVyLnkpKioyO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBBdHRyYWN0b3IgZnJvbSBcIi4vQXR0cmFjdG9yXCI7XHJcbmltcG9ydCB7IGRyYXdBcnJvdywgZHJhd0xhc3NvLCBkcmF3UGFydGljbGVzLCBkcmF3RG90dGVkTGluZSwgc2V0R2VvbWV0cnksIGRyYXdDdXJzb3JGdW5jdGlvbiB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IGNsb3NlTWVudSwgdXBkYXRlUG9pbnRlckZ1bmN0aW9uIH0gZnJvbSBcIi4vTWVudU1hbmFnZXJcIjtcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gXCIuL1BhcnRpY2xlXCI7XHJcbmltcG9ydCBWZWMyRCBmcm9tIFwiLi9WZWMyRFwiO1xyXG5pbXBvcnQgeyBmcHMsIGdldEF2ZXJhZ2VGcmFtZVRpbWUsIHVwZGF0ZVVJIH0gZnJvbSBcIi4vVUlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGJhY2tncm91bmRDYW52YXMsIGNsZWFyQ2FudmFzLCBmb3JlZ3JvdW5kQ2FudmFzIH0gZnJvbSBcIi4vQ2FudmFzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyB0aWNrIH0gZnJvbSBcIi4vUGh5c2ljc0VuZ2luZVwiO1xyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9Db25maWcnO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIi4vR3JpZFwiO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Db2xvciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcblxyXG5leHBvcnQgdmFyIHBhcnRpY2xlczogUGFydGljbGVbXSA9IFtdO1xyXG5leHBvcnQgdmFyIGF0dHJhY3RvcnM6IEF0dHJhY3RvcltdID0gW107XHJcblxyXG5sZXQgZnJhbWVDb3VudCA9IDA7XHJcbmV4cG9ydCBsZXQgZ3JpZCA9IG5ldyBHcmlkKGJhY2tncm91bmRDYW52YXMpO1xyXG5mdW5jdGlvbiBhbmltYXRlKCkge1xyXG4gIGxldCBmcmFtZVRpbWUgPSBnZXRBdmVyYWdlRnJhbWVUaW1lKClcclxuICB0aWNrKGZyYW1lVGltZS8yMCk7XHJcblxyXG4gIGNsZWFyQ2FudmFzKCk7XHJcbiAgZHJhd1BhcnRpY2xlcygpO1xyXG4gIGRyYXdDdXJzb3JGdW5jdGlvbigpO1xyXG4gIC8vIGRyYXdHcmlkKCk7XHJcbiAgLy8gZHJhd0F0dHJhY3RvcnMoKTtcclxuICB1cGRhdGVVSSgpO1xyXG5cclxuICBjb25zdCBtdWx0ID0gMTAgL2ZyYW1lVGltZTtcclxuICBpZiAoZnJhbWVDb3VudCAlIDMgPT09IDAgJiYgcGFydGljbGVzLmxlbmd0aCA8IENvbmZpZy5nZXRQYXJ0aWNsZU51bWJlcigpICYmIGZyYW1lQ291bnQgPiAxMjApIHtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAyMDApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMiAqIG11bHQsIC0wLjggKiBtdWx0KSwgZ2V0UmFuZG9tQ29sb3IoKSwgZ3JpZCkpO1xyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKG5ldyBWZWMyRCgyMDAsIDI2MCksIGdyaWQucGl4ZWxTaXplLzIsIG5ldyBWZWMyRCgxLjggKiBtdWx0LCAtMC44ICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZShuZXcgVmVjMkQoMjAwLCAzMjApLCBncmlkLnBpeGVsU2l6ZS8yLCBuZXcgVmVjMkQoMS43ICogbXVsdCwgLTAuOCAqIG11bHQpLCBnZXRSYW5kb21Db2xvcigpLCBncmlkKSk7XHJcbiAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUobmV3IFZlYzJEKDIwMCwgMzgwKSwgZ3JpZC5waXhlbFNpemUvMiwgbmV3IFZlYzJEKDEuOCAqIG11bHQsIC0wLjggKiBtdWx0KSwgZ2V0UmFuZG9tQ29sb3IoKSwgZ3JpZCkpO1xyXG4gICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKG5ldyBWZWMyRCgyMDAsIDQ0MCksIGdyaWQucGl4ZWxTaXplLzIsIG5ldyBWZWMyRCgxLjcgKiBtdWx0LCAtMC44ICogbXVsdCksIGdldFJhbmRvbUNvbG9yKCksIGdyaWQpKTtcclxuICAgIHNldEdlb21ldHJ5KCk7XHJcbiAgfVxyXG4gIGZyYW1lQ291bnQrKztcclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbn1cclxuXHJcbmdyaWQuZHJhdygpO1xyXG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvc2NyaXB0LnRzXCIpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvTWVudU1hbmFnZXIudHNcIik7XG4iXSwibmFtZXMiOlsiZm9yZWdyb3VuZENhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJiYWNrZ3JvdW5kQ2FudmFzIiwid2ViZ2xDYW52YXMiLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsImZvcmVncm91bmRDYW52YXNDdHgiLCJnZXRDb250ZXh0IiwiYmFja2dyb3VuZENhbnZhc0N0eCIsImNsZWFyQ2FudmFzIiwiY2xlYXJSZWN0IiwidXBkYXRlQ2FudmFzU2l6ZSIsImdyaWQiLCJjYW52YXMiLCJ1cGRhdGVTaXplIiwiZHJhdyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaWVsZFN0cmVuZ3RoIiwicGh5c2ljc1N1YnN0ZXBzQW1vdW50IiwiZ3Jhdml0eURpcmVjdGlvbiIsImZpZWxkU2l6ZSIsInBhcnRpY2xlTnVtYmVyIiwicG9pbnRlckZ1bmN0aW9uIiwiZ3JpZFNpemUiLCJneXJvRW5hYmxlZCIsImdldEdyYXZpdHlEaXJlY3Rpb24iLCJnZXRQaHlzaWNzU3Vic3RlcHNBbW91bnQiLCJnZXRGaWVsZFN0cmVuZ3RoIiwiZ2V0RmllbGRTaXplIiwiZ2V0UGFydGljbGVOdW1iZXIiLCJnZXRQb2ludGVyRnVuY3Rpb24iLCJnZXRHcmlkU2l6ZSIsImlzR3lyb0VuYWJsZWQiLCJzZXRHcmF2aXR5RGlyZWN0aW9uIiwibmV3R3Jhdml0eURpcmVjdGlvbiIsInNldFBoeXNpY3NTdWJzdGVwc0Ftb3VudCIsIm5ld0Ftb3VudCIsInNldEZpZWxkU3RyZW5ndGgiLCJuZXdmaWVsZFN0cmVuZ3RoIiwic2V0RmllbGRTaXplIiwibmV3ZmllbGRTaXplIiwic2V0UGFydGljbGVOdW1iZXIiLCJuZXdQYXJ0aWNsZU51bWJlciIsInNldFBvaW50ZXJGdW5jdGlvbiIsIm5ld1BvaW50ZXJGdW5jdGlvbiIsInNldElzR3lyb0VuYWJsZWQiLCJuZXdJc0d5cm9FbmFibGVkIiwiZ3JpZFBpeGVsU2l6ZSIsInRoaXMiLCJwaXhlbFNpemUiLCJjb2x1bW5zIiwiTWF0aCIsImNlaWwiLCJyb3dzIiwiY2VsbHMiLCJpbml0aWFsaXplIiwiY2FudmFzQ3R4IiwiaSIsImoiLCJyZW1vdmVBbGwiLCJwdXQiLCJwYXJ0aWNsZSIsImNvbHVtbiIsImZsb29yIiwicG9zaXRpb24iLCJ4Iiwicm93IiwieSIsImxlbmd0aCIsInB1c2giLCJzdHJva2VTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibGluZVdpZHRoIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY2xpY2tlZCIsInBvaW50ZXJQb3NpdGlvbiIsImNsaWNrU3RhcnRQb3NpdGlvbiIsImdldEluc3RhbmNlIiwiSW5wdXRIYW5kbGVyIiwiaW5zdGFuY2UiLCJpbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMiLCJtYWluX2JvZHkiLCJoYW5kbGVNb3VzZURvd24iLCJiaW5kIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdmVFdmVudCIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2xvc2VNZW51IiwiTW91c2VFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiVG91Y2hFdmVudCIsInRvdWNoZXMiLCJsYXVuY2hfZGlyIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwibXVsdGlwbHkiLCJmcHMiLCJwYXJ0aWNsZXMiLCJnZXRSYW5kb21Db2xvciIsIm1lbnVCdXR0b24iLCJtZW51RWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3Blbk1lbnUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImN1cnNvciIsImZvckVhY2giLCJlbGVtZW50Iiwic2V0VGltZW91dCIsImRpc3BsYXkiLCJxdWVyeVNlbGVjdG9yIiwibmV3VGhlbWUiLCJyb290RWxlbSIsImZpZWxkU2l6ZVNsaWRlciIsImZpZWxkU3RyZW5ndGhTbGlkZXIiLCJncmF2aXR5U3RyZW5ndGhTbGlkZXIiLCJzdWJzdGVwc0Ftb3VudEVudHJ5Qm94IiwicGFydGljbGVzQW1vdW50RW50cnlCb3giLCJneXJvRW5hYmxlZENoZWNrQm94IiwidG9nZ2xlR3lybyIsImNoZWNrZWQiLCJoYW5kbGVNb3Rpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSIsInVwZGF0ZVBvaW50ZXJGdW5jdGlvbiIsInJhZGlvQnV0dG9ucyIsImdldEVsZW1lbnRzQnlOYW1lIiwidmFsdWUiLCJzZXRHcmF2aXR5U3RyZW5ndGgiLCJyYWRpb0J1dHRvbiIsIm9uaW5wdXQiLCJwYXJzZUludCIsIkRldmljZU1vdGlvbkV2ZW50IiwicmVxdWVzdFBlcm1pc3Npb24iLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsImRpZmYiLCJwb3AiLCJwb3MiLCJyYWRpdXMiLCJ2ZWxvY2l0eSIsImNvbG9yIiwiYWNjZWxlcmF0aW9uIiwiY2VsbCIsInVwZGF0ZVBvc2l0aW9uIiwiZHQiLCJhZGQiLCJ1cGRhdGVDZWxsIiwiYWNjZWxlcmF0ZSIsImFjYyIsImdldE5laWdoYm9yaW5nUGFydGljbGVzIiwibmVpZ2hib3JpbmdQYXJ0aWNsZXMiLCJpbnB1dEhhbmRsZXIiLCJwcmV2aW91c1NjcmVlblgiLCJwcmV2aW91c1NjcmVlblkiLCJ1cGRhdGVQb3NpdGlvbnMiLCJhcHBseVZlbG9jaXR5IiwidmVsIiwiYXBwbHlGaWVsZCIsImZpZWxkUG9zIiwicHVsbERpcmVjdGlvbiIsImRpc3RhbmNlIiwiZGl2aWRlIiwiYXBwbHlBdHRyYWN0b3JGb3JjZXNUb0FsbCIsImFwcGx5QXR0cmFjdG9yRm9yY2VzIiwidGljayIsInN1Yl9kdCIsImRlbHRhWCIsInNjcmVlblgiLCJkZWx0YVkiLCJzY3JlZW5ZIiwiYXBwbHlDb25zdHJhaW50IiwicGFydGljbGUxIiwicGFydGljbGUyIiwic3F1YXJlZERpc3RhbmNlIiwic3F1YXJlZERpc3RhbmNlVG8iLCJzcXJ0IiwiY29sbGlzaW9uTm9ybWFsIiwicCIsInNldCIsImRlbHRhIiwic3VidHJhY3QiLCJhYnMiLCJhdHRyYWN0b3JzIiwiYXR0cmFjdG9yIiwiZm9yY2UiLCJnbCIsImVuYWJsZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwicG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwicmVzb2x1dGlvblVuaWZvcm1Mb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImNvbG9yVW5pZm9ybUxvY2F0aW9uIiwidHJhbnNsYXRpb25Mb2NhdGlvbiIsInJhZGl1c1VuaWZvcm1Mb2NhdGlvbiIsIm91dGxpbmVVbmlmb3JtTG9jYXRpb24iLCJwb3NpdGlvbkJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInNldEdlb21ldHJ5IiwieDEiLCJ4MiIsInkxIiwieTIiLCJidWZmZXJEYXRhIiwiQVJSQVlfQlVGRkVSIiwiRmxvYXQzMkFycmF5IiwiU1RBVElDX0RSQVciLCJzZXRSZWN0YW5nbGUiLCJkcmF3UGFydGljbGVzIiwicmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZSIsInZpZXdwb3J0IiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsInVzZVByb2dyYW0iLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJpbmRCdWZmZXIiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJvdXRsaW5lQ29sb3IiLCJwYXJzZUZsb2F0IiwicmVzb2x1dGlvbiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtMmYiLCJ1bmlmb3JtM2YiLCJyIiwiZyIsImIiLCJ1bmlmb3JtMWYiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVTIiwiZHJhd0RvdHRlZExpbmUiLCJmcm9tIiwidG8iLCJkb3RDb3VudCIsImRyYXdQcmVkaWN0ZWRQYXRoIiwiYW5nbGUiLCJhdGFuMiIsIm5ld190byIsImNvcyIsInNpbiIsImRyYXdEb3QiLCJzdGFydFBvcyIsIkFjY2VsZXJhdGlvblZlY3RvciIsInByZWRpY3RlZERvdCIsImdldEF2ZXJhZ2VGcmFtZVRpbWUiLCJkb3RYIiwiZG90WSIsImRvdFNpemUiLCJvcGFjaXR5IiwiYXJjIiwiUEkiLCJmaWxsU3R5bGUiLCJmaWxsIiwiY2xvc2VQYXRoIiwiZHJhd0xhc3NvIiwiZHJhd0Fycm93IiwiaGVhZGxlbiIsImRyYXdDdXJzb3JGdW5jdGlvbiIsInR5cGUiLCJzb3VyY2UiLCJzaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJsb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImRlbGV0ZVByb2dyYW0iLCJkaXNwbGF5V2lkdGgiLCJjbGllbnRXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJuZWVkUmVzaXplIiwiZnBzQ291bnRlciIsImNyZWF0ZUVsZW1lbnQiLCJ0b3AiLCJsZWZ0IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZnJhbWVUaW1lcyIsIm1heEZyYW1lcyIsImxhc3RUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ1cGRhdGVVSSIsImF2ZXJhZ2VkRlBTIiwiY3VycmVudFRpbWUiLCJ0aW1lRGlmZiIsInNoaWZ0IiwiYXZlcmFnZUZQUyIsInJlZHVjZSIsImEiLCJjYWxjdWxhdGVGUFMiLCJpbm5lclRleHQiLCJyb3VuZCIsInJhbmRvbSIsIm90aGVyIiwic2NhbGFyIiwiZG90IiwidmVjIiwic3F1YXJlZExlbmd0aCIsIlZlYzJEIiwiZnJhbWVDb3VudCIsIkdyaWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlIiwiZnJhbWVUaW1lIiwibXVsdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==