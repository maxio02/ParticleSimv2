/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/CanvasManager.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>o,backgroundCanvasCtx:()=>c,clearCanvas:()=>u,foregroundCanvas:()=>r,foregroundCanvasCtx:()=>a,updateCanvasSize:()=>d});var i=n("./src/script.ts"),r=document.getElementById("foreground-canvas"),o=document.getElementById("background-canvas"),s=document.getElementById("webgl-canvas");r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height;var a=r.getContext("2d"),c=o.getContext("2d");function u(){a.clearRect(0,0,r.width,r.height)}function d(){r.width=r.getBoundingClientRect().width,r.height=r.getBoundingClientRect().height,o.width=o.getBoundingClientRect().width,o.height=o.getBoundingClientRect().height,s.width=s.getBoundingClientRect().width,s.height=s.getBoundingClientRect().height,i.grid.updateSize(),i.grid.draw()}window.addEventListener("resize",d)},"./src/Config.ts":(t,e,n)=>{n.r(e),n.d(e,{getFieldSize:()=>g,getFieldStrength:()=>f,getGravityDirection:()=>l,getGridSize:()=>y,getParticleNumber:()=>p,getPhysicsSubstepsAmount:()=>h,getPointerFunction:()=>v,setFieldSize:()=>C,setFieldStrength:()=>x,setGravityDirection:()=>m,setParticleNumber:()=>S,setPhysicsSubstepsAmount:()=>P,setPointerFunction:()=>w});var i=n("./src/Vec2D.ts"),r=10,o=4,s=new i.default(0,1),a=100,c=200,u="field",d=26;function l(){return s}function h(){return o}function f(){return r}function g(){return a}function p(){return c}function v(){return u}function y(){return d}function m(t){s=t}function P(t){o=t}function x(t){r=t}function C(t){a=t}function S(t){c=t}function w(t){u=t}},"./src/Grid.ts":(t,e,n)=>{n.r(e),n.d(e,{Grid:()=>r});var i=n("./src/Config.ts"),r=function(){function t(t,e){void 0===e&&(e=i.getGridSize()),this.pixelSize=e,this.canvas=t,this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.cells=this.initialize(),this.canvasCtx=this.canvas.getContext("2d")}return t.prototype.initialize=function(){for(var t=[],e=0;e<this.columns;e++){t[e]=[];for(var n=0;n<this.rows;n++)t[e][n]=[]}return t},t.prototype.removeAll=function(){for(var t=0;t<this.columns;t++)for(var e=0;e<this.rows&&null!=this.cells[t];e++)this.cells[t][e]=[]},t.prototype.put=function(t){var e=Math.floor(t.currentPosition.x/this.pixelSize),n=Math.floor(t.currentPosition.y/this.pixelSize);e>=0&&e<this.cells.length&&n>=0&&n<this.cells[e].length&&this.cells[e][n].push(t)},t.prototype.updateSize=function(){this.columns=Math.ceil(this.canvas.width/this.pixelSize),this.rows=Math.ceil(this.canvas.height/this.pixelSize),this.initialize()},t.prototype.draw=function(){this.canvasCtx.clearRect(0,0,this.canvas.width,this.canvas.height),this.canvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),this.canvasCtx.lineWidth=1;for(var t=this.pixelSize;t<this.canvas.width;t+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(t,0),this.canvasCtx.lineTo(t,this.canvas.height),this.canvasCtx.stroke();for(var e=this.pixelSize;e<this.canvas.height;e+=this.pixelSize)this.canvasCtx.beginPath(),this.canvasCtx.moveTo(0,e),this.canvasCtx.lineTo(this.canvas.width,e),this.canvasCtx.stroke()},t}()},"./src/InputHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{InputHandler:()=>d});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/MenuManager.ts"),s=n("./src/UIManager.ts"),a=n("./src/script.ts"),c=n("./src/Utils.ts"),u=n("./src/Particle.ts"),d=function(){function t(){this.clicked=!1,this.pointerPosition=new i.default(0,0),this.clickStartPosition=new i.default(0,0),this.pointerFunction="field"}return t.getInstance=function(){return t.instance||(t.instance=new t,t.instance.initializeEventListeners()),t.instance},t.prototype.initializeEventListeners=function(){var t=document.getElementById("main_container");t&&(t.addEventListener("mousedown",this.handleMouseDown.bind(this)),t.addEventListener("mouseup",this.handleMouseUp.bind(this)),t.addEventListener("mousemove",this.handleMoveEvent.bind(this)),t.addEventListener("touchstart",this.handleMouseDown.bind(this)),t.addEventListener("touchend",this.handleMouseUp.bind(this)),t.addEventListener("touchmove",this.handleMoveEvent.bind(this)),t.addEventListener("click",(function(t){t.stopPropagation(),(0,o.closeMenu)()})))},t.prototype.handleMouseDown=function(t){t.stopPropagation(),this.clicked=!0,t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY),this.clickStartPosition.x=this.pointerPosition.x,this.clickStartPosition.y=this.pointerPosition.y},t.prototype.handleMouseUp=function(t){if(t.stopPropagation(),this.clicked=!1,"throw"==r.getPointerFunction()){var e=this.clickStartPosition.difference(this.pointerPosition);e.multiply(s.fps/60),a.particles.push(new u.default(this.clickStartPosition.clone(),r.getGridSize()/2,e,(0,c.getRandomColor)(),a.grid))}},t.prototype.handleMoveEvent=function(t){t.stopPropagation(),this.clicked&&(t instanceof MouseEvent?(this.pointerPosition.x=t.clientX,this.pointerPosition.y=t.clientY):t instanceof TouchEvent&&(this.pointerPosition.x=t.touches[0].clientX,this.pointerPosition.y=t.touches[0].clientY))},t}()},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>u,openMenu:()=>c,setGravityStrength:()=>v,updatePointerFunction:()=>p});var i=n("./src/Config.ts"),r=n("./src/Vec2D.ts"),o=n("./src/script.ts"),s=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element");function c(){"false"==s.getAttribute("open")&&(s.setAttribute("open","true"),s.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function u(){s.setAttribute("open","false"),s.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}s.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),o.grid.draw()}));var d=document.getElementById("field-size-slider"),l=document.getElementById("field-strength-slider"),h=document.getElementById("gravity-strength-slider"),f=document.getElementById("substeps-amount-entry"),g=document.getElementById("particles-amount-entry");function p(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}function v(t){i.setGravityDirection(new r.default(0,.1*t))}document.getElementsByName("cursor-function").forEach((function(t){t.addEventListener("change",(function(){t.checked&&i.setPointerFunction(t.value)}))})),d.oninput=function(){i.setFieldSize(parseInt(d.value))},l.oninput=function(){i.setFieldStrength(parseInt(l.value))},h.oninput=function(){v(parseInt(h.value))},f.addEventListener("change",(function(){i.setPhysicsSubstepsAmount(parseInt(f.value))})),g.addEventListener("change",(function(){i.setParticleNumber(parseInt(g.value));for(var t=o.particles.length-i.getParticleNumber();t>0;)o.particles.pop(),t--}))},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./src/Vec2D.ts");const r=function(){function t(t,e,n,r,o){this.currentPosition=t,this.previousPosition=this.currentPosition,this.radius=e,this.acceleration=n,this.color=r,this.grid=o,this.cell=new i.default(Math.floor(this.currentPosition.x/o.pixelSize),Math.floor(this.currentPosition.y/o.pixelSize))}return t.prototype.updatePosition=function(t){var e=new i.default(this.currentPosition.x-this.previousPosition.x,this.currentPosition.y-this.previousPosition.y);this.previousPosition=this.currentPosition.clone(),this.currentPosition.add(e),this.acceleration.multiply(t*t),this.currentPosition.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0,this.updateCell()},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.getNeighboringParticles=function(){for(var t=[],e=this.cell.x-1;e<=this.cell.x+1;e++)for(var n=this.cell.y-1;n<=this.cell.y+1;n++)if(e>=0&&e<this.grid.columns&&n>=0&&n<this.grid.rows){if(null==this.grid.cells[e])break;t.push.apply(t,this.grid.cells[e][n])}return t},t.prototype.updateCell=function(){this.cell=new i.default(Math.floor(this.currentPosition.x/this.grid.pixelSize),Math.floor(this.currentPosition.y/this.grid.pixelSize))},t.canvas=document.getElementById("foreground-canvas"),t}()},"./src/PhysicsEngine.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>g,applyAttractorForcesToAll:()=>l,applyConstraint:()=>f,tick:()=>h});var i=n("./src/CanvasManager.ts"),r=n("./src/Config.ts"),o=n("./src/InputHandler.ts"),s=n("./src/Vec2D.ts"),a=n("./src/script.ts"),c=o.InputHandler.getInstance();function u(t){a.grid.removeAll(),a.particles.forEach((function(e){e.updatePosition(t),a.grid.put(e)}))}function d(t){a.particles.forEach((function(e){var n=t.difference(e.currentPosition),i=n.length();i<r.getFieldSize()&&i>10&&(n.multiply(100*r.getFieldStrength()),n.divide(i*i),e.accelerate(n))}))}function l(){a.particles.forEach((function(t){g(t)}))}function h(t){for(var e=t/r.getPhysicsSubstepsAmount(),n=0;n<r.getPhysicsSubstepsAmount();n++){if(0!=r.getGravityDirection().y&&a.particles.forEach((function(t){t.accelerate(r.getGravityDirection())})),c.clicked)switch(r.getPointerFunction()){case"field":d(c.pointerPosition);break;case"gravity":r.setGravityDirection(c.pointerPosition.difference(c.clickStartPosition).divide(400))}a.particles.forEach((function(t){f(t)})),p(),u(e)}}function f(t){t.currentPosition.y+t.radius>i.foregroundCanvas.height&&(t.currentPosition.y=i.foregroundCanvas.height-t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.y-t.radius<0&&(t.currentPosition.y=t.radius,t.previousPosition.y=t.currentPosition.y+t.currentPosition.y-t.previousPosition.y),t.currentPosition.x-t.radius<0&&(t.currentPosition.x=t.radius,t.previousPosition.x=t.currentPosition.x+t.currentPosition.x-t.previousPosition.x),t.currentPosition.x+t.radius>i.foregroundCanvas.width&&(t.currentPosition.x=i.foregroundCanvas.width-t.radius)}function g(t){a.attractors.forEach((function(e){var n=e.position.difference(t.currentPosition),i=n.length();i<e.radius&&i>10&&(n.multiply(e.force),n.divide(i*i),t.accelerate(n))}))}function p(){var t=new s.default(0,0),e=0,n=0;a.particles.forEach((function(i){i.getNeighboringParticles().forEach((function(r){if(i!==r&&(t.set(i.currentPosition).subtract(r.currentPosition),e=t.squaredLength(),n=i.radius+r.radius,e<n*n&&0!=e)){var o=Math.sqrt(e);t.divide(o);var s=n-o;t.multiply(.5*s),i.currentPosition.add(t),r.currentPosition.subtract(t)}}))}))}},"./src/Renderer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>F,drawCursorFunction:()=>R,drawDot:()=>A,drawDottedLine:()=>k,drawLasso:()=>I,drawParticles:()=>_,drawPredictedPath:()=>z,setGeometry:()=>M});var i=n("./src/Vec2D.ts"),r=n("./src/Config.ts"),o=n("./src/shaders/particleFragmentShader.frag"),s=n("./src/shaders/particleVertexShader.vert"),a=n("./src/ShaderHelper.ts"),c=n("./src/CanvasManager.ts"),u=n("./src/PhysicsEngine.ts"),d=n("./src/InputHandler.ts"),l=n("./src/script.ts"),h=n("./src/Particle.ts"),f=document.getElementById("webgl-canvas"),g=f.getContext("webgl");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height;var p=d.InputHandler.getInstance();g||console.error("Unable to initialize WebGL. Your browser may not support it."),g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);var v=(0,a.createShader)(g,g.VERTEX_SHADER,s),y=(0,a.createShader)(g,g.FRAGMENT_SHADER,o),m=(0,a.createProgram)(g,v,y),P=g.getAttribLocation(m,"a_position"),x=g.getUniformLocation(m,"u_resolution"),C=g.getUniformLocation(m,"u_color"),S=g.getUniformLocation(m,"u_translation"),w=g.getUniformLocation(m,"u_radius"),b=g.getUniformLocation(m,"u_outline_black"),E=g.createBuffer();function M(){l.particles.forEach((function(t){!function(t,e,n,i,r){var o=0-i/2,s=0+i/2,a=0-r/2,c=0+r/2;t.bufferData(t.ARRAY_BUFFER,new Float32Array([o,a,s,a,o,c,o,c,s,a,s,c]),t.STATIC_DRAW)}(g,0,0,r.getGridSize(),r.getGridSize())}))}function _(){(0,a.resizeCanvasToDisplaySize)(g.canvas),g.viewport(0,0,g.canvas.width,g.canvas.height),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT),g.useProgram(m),g.enableVertexAttribArray(P),g.bindBuffer(g.ARRAY_BUFFER,E),g.vertexAttribPointer(P,2,g.FLOAT,!1,0,0);var t=parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--is-outline-dark")),e=[g.canvas.width,g.canvas.height];l.particles.forEach((function(n){g.uniform2fv(x,e),g.uniform2f(S,n.currentPosition.x,n.currentPosition.y),g.uniform3f(C,n.color.r,n.color.g,n.color.b),g.uniform1f(w,n.radius),g.uniform1f(b,t),g.drawArrays(g.TRIANGLES,0,6)}))}function k(t,e,n,r){if(void 0===n&&(n=5),void 0===r&&(r=8),p.clicked&&t.x!=e.x&&t.y!=e.y){var o=t.difference(e);z(t.clone(),o.clone()),o.divide(r);var s=Math.atan2(e.y-t.y,e.x-t.x),a=new i.default(e.x,e.y);a.x-=Math.cos(s),a.y-=Math.sin(s);for(var c=0;c<=r;c++)A(t.x-o.x*c,t.y-o.y*c,n,255)}}function z(t,e){for(var n=new h.default(t,r.getGridSize()/2,e,{r:0,g:0,b:0},l.grid),i=1;i<=255;i++)n.accelerate(r.getGravityDirection()),(0,u.applyConstraint)(n),(0,u.applyAttractorForces)(n),n.updatePosition(.2),i%6==0&&A(n.currentPosition.x,n.currentPosition.y,5,255-i)}function A(t,e,n,i){c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),c.foregroundCanvasCtx.fillStyle="rgba(210, 210, 210, ".concat(i/255,")"),c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}function I(t){void 0===t&&(t=3),p.clicked&&(c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.arc(p.pointerPosition.x,p.pointerPosition.y,r.getFieldSize(),0,2*Math.PI),c.foregroundCanvasCtx.lineWidth=t,c.foregroundCanvasCtx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.closePath())}function F(t,e){if(p.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),r=10,o=new i.default(e.x,e.y);o.x-=11.5*Math.cos(n),o.y-=11.5*Math.sin(n),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(t.x,t.y),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.beginPath(),c.foregroundCanvasCtx.moveTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n+Math.PI/7),o.y-r*Math.sin(n+Math.PI/7)),c.foregroundCanvasCtx.lineTo(o.x,o.y),c.foregroundCanvasCtx.lineTo(o.x-r*Math.cos(n-Math.PI/7),o.y-r*Math.sin(n-Math.PI/7)),c.foregroundCanvasCtx.strokeStyle="#bbbbbb",c.foregroundCanvasCtx.lineWidth=10,c.foregroundCanvasCtx.stroke(),c.foregroundCanvasCtx.fillStyle="#bbbbbb",c.foregroundCanvasCtx.fill(),c.foregroundCanvasCtx.closePath()}}function R(){if(p.clicked)switch(r.getPointerFunction()){case"field":I();break;case"gravity":F(p.clickStartPosition,p.pointerPosition);break;case"throw":k(p.clickStartPosition,p.pointerPosition)}}g.bindBuffer(g.ARRAY_BUFFER,E)},"./src/ShaderHelper.ts":(t,e,n)=>{function i(t,e,n){var i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;console.log(t.getShaderInfoLog(i)),t.deleteShader(i)}function r(t,e,n){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS))return i;console.log(t.getProgramInfoLog(i)),t.deleteProgram(i)}function o(t){var e=t.clientWidth,n=t.clientHeight,i=t.width!==e||t.height!==n;return i&&(t.width=e,t.height=n),i}n.r(e),n.d(e,{createProgram:()=>r,createShader:()=>i,resizeCanvasToDisplaySize:()=>o})},"./src/UIManager.ts":(t,e,n)=>{n.r(e),n.d(e,{fps:()=>r,frameTimes:()=>o,getAverageFrameTime:()=>u,updateUI:()=>c});var i=document.createElement("div");i.style.position="absolute",i.style.top="10px",i.style.left="10px",document.body.appendChild(i);var r=60,o=[],s=100,a=performance.now();function c(){var t=function(){var t=performance.now(),e=t-a;o.push(e),o.length>s&&o.shift();var n=o.reduce((function(t,e){return t+e}),0)/o.length;return a=t,1e3/n}();i.innerText="FPS: ".concat(Math.round(t))}function u(){return o.reduce((function(t,e){return t+e}),0)/o.length}},"./src/Utils.ts":(t,e,n)=>{function i(){return{r:Math.random(),g:Math.random(),b:Math.random()}}n.r(e),n.d(e,{getRandomColor:()=>i})},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this},t.prototype.divide=function(t){return this.x/=t,this.y/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.squaredLength=function(){return this.x*this.x+this.y*this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{attractors:()=>f,grid:()=>p,particles:()=>h});var i=n("./src/Renderer.ts"),r=n("./src/Particle.ts"),o=n("./src/Vec2D.ts"),s=n("./src/UIManager.ts"),a=n("./src/CanvasManager.ts"),c=n("./src/PhysicsEngine.ts"),u=n("./src/Config.ts"),d=n("./src/Grid.ts"),l=n("./src/Utils.ts"),h=[],f=[],g=0,p=new d.Grid(a.backgroundCanvas);p.draw(),requestAnimationFrame((function t(){var e=(0,s.getAverageFrameTime)();(0,c.tick)(e/25),(0,a.clearCanvas)(),(0,i.drawParticles)(),(0,i.drawCursorFunction)(),(0,s.updateUI)();var n=10/e;g%3==0&&h.length<u.getParticleNumber()&&g>120&&(h.push(new r.default(new o.default(200,200),p.pixelSize/2,new o.default(200*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,260),p.pixelSize/2,new o.default(180*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,320),p.pixelSize/2,new o.default(170*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,380),p.pixelSize/2,new o.default(180*n,-80*n),(0,l.getRandomColor)(),p)),h.push(new r.default(new o.default(200,440),p.pixelSize/2,new o.default(170*n,-80*n),(0,l.getRandomColor)(),p)),(0,i.setGeometry)()),g++,requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_translation;\r\nuniform float u_outline_black;\r\nfloat mask(in vec2 _st, in float _radius){\r\n    vec2 dist = _st;\r\n    return 1.-smoothstep(_radius-(_radius*0.15),\r\n                         _radius+(_radius*0.15),\r\n                         dot(dist,dist)*3.9);\r\n}\r\n\r\n\r\nvec3 circle(in vec2 _st, in float radius, in vec3 color) {\r\n\tvec2 dist = _st;\r\n\treturn smoothstep(\r\n\t\tradius + (radius * 0.15),\r\n\t\tradius -(radius * 0.15),\r\n\t\tdot(dist, dist) * 3.9) * color + u_outline_black * (smoothstep(\r\n\t\tradius - (radius * 0.15),\r\n\t\tradius +(radius * 0.15),\r\n\t\tdot(dist, dist) * 5.3));\r\n}\r\nvoid main(){\r\n \tvec2 st =  (gl_FragCoord.xy - u_translation*vec2(1., -1.) - u_resolution*vec2(0.,1.)) / u_radius; \r\n\r\n\tvec3 color = circle(st,4.0, u_color);\r\n\r\n\tgl_FragColor = vec4(color, mask(st, 4.0));\r\n}"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\n\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation ;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1., -1.), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    // v_position = a_position;\r\n}"}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,