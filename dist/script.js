/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/Drawer.ts":(t,e,r)=>{r.r(e),r.d(e,{drawArrow:()=>P,drawDot:()=>b,drawGrid:()=>_,drawLasso:()=>S,drawParticles:()=>x,drawTail:()=>w,setGeometry:()=>m});var n=r("./src/Particle.ts"),o=r("./src/Vec2D.ts"),i=r("./src/shaders/particleFragmentShader.frag"),a=r("./src/shaders/particleVertexShader.vert"),c=r("./src/script.ts"),s=r("./src/ShaderHelper.ts"),u=document.getElementById("webgl-canvas").getContext("webgl");u||console.error("Unable to initialize WebGL. Your browser may not support it."),u.enable(u.BLEND),u.blendFunc(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA);var d=(0,s.createShader)(u,u.VERTEX_SHADER,a),l=(0,s.createShader)(u,u.FRAGMENT_SHADER,i),h=(0,s.createProgram)(u,d,l),f=u.getAttribLocation(h,"a_position"),p=u.getUniformLocation(h,"u_resolution"),g=u.getUniformLocation(h,"u_color"),v=u.getUniformLocation(h,"u_translation");u.uniform2f(p,u.canvas.width,u.canvas.height);var y=u.createBuffer();function m(){c.particles.forEach((function(t){!function(t,e,r,n,o){t.bufferData(t.ARRAY_BUFFER,new Float32Array([-15,-15,15,-15,-15,15,-15,15,15,-15,15,15]),t.STATIC_DRAW)}(u)}))}function x(){(0,s.resizeCanvasToDisplaySize)(u.canvas),u.viewport(0,0,u.canvas.width,u.canvas.height),u.clearColor(0,0,0,0),u.clear(u.COLOR_BUFFER_BIT),u.useProgram(h),u.enableVertexAttribArray(f),u.bindBuffer(u.ARRAY_BUFFER,y),u.vertexAttribPointer(f,2,u.FLOAT,!1,0,0),c.particles.forEach((function(t){u.uniform2f(p,u.canvas.width,u.canvas.height),u.uniform2f(v,t.pos_curr.x,t.pos_curr.y),u.uniform3f(g,t.color.r,t.color.g,t.color.b),u.drawArrays(u.TRIANGLES,0,6)}))}function _(){c.back_ctx.clearRect(0,0,c.foreground_canvas.width,c.foreground_canvas.height),c.back_ctx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.back_ctx.lineWidth=1;for(var t=c.gridSize;t<c.foreground_canvas.width;t+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(t,0),c.back_ctx.lineTo(t,c.foreground_canvas.height),c.back_ctx.stroke();for(var e=c.gridSize;e<c.foreground_canvas.height;e+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(0,e),c.back_ctx.lineTo(c.foreground_canvas.width,e),c.back_ctx.stroke()}function w(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var r=t.difference(e);!function(t,e){for(var r=new n.default(t,15,e,{r:0,g:0,b:0}),o=1;o<=510;o++)r.accelerate(c.gravity),(0,c.applyConstraint)(r),(0,c.applyAttractorForces)(r),r.updatePosition(.125),o%15==0&&b(r.pos_curr.x,r.pos_curr.y,5,255-o/2)}(t.clone(),r.clone()),r.divide(8);var i=Math.atan2(e.y-t.y,e.x-t.x),a=new o.default(e.x,e.y);a.x-=Math.cos(i),a.y-=Math.sin(i);for(var s=0;s<=8;s++)b(t.x-r.x*s,t.y-r.y*s,5,255)}}function b(t,e,r,n){c.ctx.beginPath(),c.ctx.arc(t,e,r,0,2*Math.PI,!1),c.ctx.fillStyle="rgba(210, 210, 210, ".concat(n/255,")"),c.ctx.fill(),c.ctx.closePath()}function S(){c.clicked&&(c.ctx.beginPath(),c.ctx.arc(c.pointerPosition.x,c.pointerPosition.y,c.fieldSize,0,2*Math.PI),c.ctx.lineWidth=3,c.ctx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-color"),c.ctx.stroke(),c.ctx.closePath())}function P(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var r=Math.atan2(e.y-t.y,e.x-t.x),n=10,i=new o.default(e.x,e.y);i.x-=11.5*Math.cos(r),i.y-=11.5*Math.sin(r),c.ctx.beginPath(),c.ctx.moveTo(t.x,t.y),c.ctx.lineTo(i.x,i.y),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.beginPath(),c.ctx.moveTo(i.x,i.y),c.ctx.lineTo(i.x-n*Math.cos(r-Math.PI/7),i.y-n*Math.sin(r-Math.PI/7)),c.ctx.lineTo(i.x-n*Math.cos(r+Math.PI/7),i.y-n*Math.sin(r+Math.PI/7)),c.ctx.lineTo(i.x,i.y),c.ctx.lineTo(i.x-n*Math.cos(r-Math.PI/7),i.y-n*Math.sin(r-Math.PI/7)),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.fillStyle="#bbbbbb",c.ctx.fill(),c.ctx.closePath()}}u.bindBuffer(u.ARRAY_BUFFER,y)},"./src/MenuManager.ts":(t,e,r)=>{r.r(e),r.d(e,{closeMenu:()=>s,getPointerFunction:()=>g,openMenu:()=>c});var n=r("./src/Drawer.ts"),o=r("./src/script.ts"),i=document.getElementById("menu-button"),a=document.querySelectorAll(".menu-element");function c(){"false"==i.getAttribute("open")&&(i.setAttribute("open","true"),i.style.cursor="auto",a.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function s(){i.setAttribute("open","false"),i.style.cursor="pointer",a.forEach((function(t){t.style.display="none"}))}i.addEventListener("click",(function(t){t.stopPropagation(),c()})),document.querySelector("#theme-switch").addEventListener("click",(function(){var t,e=document.documentElement;t="light"===e.getAttribute("theme")?"dark":"light",e.setAttribute("theme",t),(0,n.drawGrid)()}));var u=document.getElementById("field-size-slider"),d=document.getElementById("field-strength-slider"),l=document.getElementById("gravity-strength-slider"),h=document.getElementById("substeps-amount-entry"),f=document.getElementById("particles-amount-entry"),p=document.getElementById("drawOutline");function g(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}u.oninput=function(){(0,o.setFieldSize)(parseInt(u.value))},d.oninput=function(){(0,o.setFieldStrength)(parseInt(d.value))},l.oninput=function(){(0,o.setGravityStrength)(parseInt(l.value))},h.addEventListener("change",(function(){(0,o.setSubsteps)(parseInt(h.value))})),f.addEventListener("change",(function(){(0,o.setParticlesNum)(parseInt(f.value))})),p.oninput=function(){(0,o.setDrawOutline)(p.checked)}},"./src/Particle.ts":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});var n=r("./src/Vec2D.ts"),o=r("./src/script.ts");const i=function(){function t(t,e,r,i){this.pos_curr=t,this.pos_prev=this.pos_curr,this.radius=e,this.acceleration=r,this.color=i,this.updateCell(new n.default(Math.floor(this.pos_curr.x/o.gridSize),Math.floor(this.pos_curr.y/o.gridSize)))}return t.prototype.draw=function(){},t.prototype.updatePosition=function(t){var e=new n.default(this.pos_curr.x-this.pos_prev.x,this.pos_curr.y-this.pos_prev.y);this.pos_prev=this.pos_curr.clone(),this.pos_curr.add(e),this.acceleration.multiply(t*t),this.pos_curr.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.prototype.updateCell=function(t){this.gridCell=t},t.canvas=document.getElementById("foreground-canvas"),t.gl=t.canvas.getContext("2d"),t}()},"./src/ShaderHelper.ts":(t,e,r)=>{function n(t,e,r){var n=t.createShader(e);if(t.shaderSource(n,r),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS))return n;console.log(t.getShaderInfoLog(n)),t.deleteShader(n)}function o(t,e,r){var n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,r),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;console.log(t.getProgramInfoLog(n)),t.deleteProgram(n)}function i(t){var e=t.clientWidth,r=t.clientHeight,n=t.width!==e||t.height!==r;return n&&(t.width=e,t.height=r),n}function a(){}r.r(e),r.d(e,{createProgram:()=>o,createShader:()=>n,initParticleShader:()=>a,resizeCanvasToDisplaySize:()=>i})},"./src/Vec2D.ts":(t,e,r)=>{r.r(e),r.d(e,{default:()=>n});const n=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.prototype.subtract=function(t){this.x-=t.x,this.y-=t.y},t.prototype.multiply=function(t){this.x*=t,this.y*=t},t.prototype.divide=function(t){this.x/=t,this.y/=t},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,r)=>{r.r(e),r.d(e,{applyAttractorForces:()=>H,applyConstraint:()=>Y,back_ctx:()=>T,clicked:()=>A,ctx:()=>k,drawOutline:()=>b,fieldSize:()=>w,foreground_canvas:()=>m,fps:()=>C,gravity:()=>y,grid:()=>u,gridSize:()=>s,particles:()=>d,pointerPosition:()=>p,setDrawOutline:()=>G,setFieldSize:()=>L,setFieldStrength:()=>F,setGravityStrength:()=>z,setParticlesNum:()=>O,setSubsteps:()=>D});var n=r("./src/Drawer.ts"),o=r("./src/MenuManager.ts"),i=r("./src/Particle.ts"),a=r("./src/ShaderHelper.ts"),c=r("./src/Vec2D.ts"),s=31,u=[],d=[],l=[],h=100,f=0,p=new c.default(0,0),g=new c.default(0,0),v="field",y=new c.default(0,1),m=document.getElementById("foreground-canvas"),x=document.getElementById("background-canvas"),_=document.getElementById("webgl-canvas"),w=1,b=!0,S=10,P=4,E=Math.ceil(m.width/s),M=Math.ceil(m.height/s);m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,x.width=x.getBoundingClientRect().width,x.height=x.getBoundingClientRect().height,_.width=_.getBoundingClientRect().width,_.height=_.getBoundingClientRect().height;var k=m.getContext("2d"),T=x.getContext("2d"),C=60,A=!1,B=document.createElement("div");B.style.position="absolute",B.style.top="10px",B.style.left="10px";var I=document.createElement("div");I.style.position="absolute",I.style.top="30px",I.style.left="10px";var R=document.createElement("div");function F(t){S=t}function L(t){w=t}function z(t){y=new c.default(0,.1*t)}function D(t){P=t}function O(t){h=t}function G(t){b=t}function U(){E=Math.ceil(m.width/s),M=Math.ceil(m.height/s),console.log(E),console.log(M);for(var t=0;t<E;t++){u[t]=[];for(var e=0;e<M;e++)u[t][e]=[]}}function V(t){!function(){for(var t=0;t<E;t++){u[t]=[];for(var e=0;e<M;e++)u[t][e]=[]}}(),d.forEach((function(e){e.updatePosition(t),function(t){var e=Math.floor(t.pos_curr.x/s),r=Math.floor(t.pos_curr.y/s);e>=0&&e<u.length&&r>=0&&r<u[e].length&&u[e][r].push(t)}(e)}))}function N(t){d.forEach((function(e){var r=t.difference(e.pos_curr),n=r.length();n<w&&n>10&&(r.multiply(100*S),r.divide(n*n),e.accelerate(r))}))}function H(t){l.forEach((function(e){var r=e.pos.difference(t.pos_curr),n=r.length();n<e.radius&&n>10&&(r.multiply(e.force),r.divide(n*n),t.accelerate(r))}))}function Y(t){t.pos_curr.y+t.radius>m.height&&(t.pos_curr.y=m.height-t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.y-t.radius<0&&(t.pos_curr.y=t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.x-t.radius<0&&(t.pos_curr.x=t.radius,t.pos_prev.x=t.pos_curr.x+t.pos_curr.x-t.pos_prev.x),t.pos_curr.x+t.radius>m.width&&(t.pos_curr.x=m.width-t.radius)}R.style.position="absolute",R.style.top="50px",R.style.left="10px",document.body.appendChild(B),document.body.appendChild(I),document.body.appendChild(R);var W=0,q=.1*performance.now();function X(t){t.stopPropagation(),A=!0,v=(0,o.getPointerFunction)(),t instanceof MouseEvent?(p.x=t.clientX,p.y=t.clientY):t instanceof TouchEvent&&(p.x=t.touches[0].clientX,p.y=t.touches[0].clientY),g.x=p.x,g.y=p.y}function j(t){switch(t.stopPropagation(),A=!1,v){case"field":case"gravity":break;case"throw":var e=g.difference(p);e.multiply(C/60),d.push(new i.default(g.clone(),15,e,K()))}}function K(){return{r:Math.random(),g:Math.random(),b:Math.random()}}function J(t){t.stopPropagation(),A&&(t instanceof MouseEvent?(p.x=t.clientX,p.y=t.clientY):t instanceof TouchEvent&&(p.x=t.touches[0].clientX,p.y=t.touches[0].clientY))}var Q=0,Z=document.getElementById("main_container");window.addEventListener("resize",(function(){m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,x.width=x.getBoundingClientRect().width,x.height=x.getBoundingClientRect().height,_.width=_.getBoundingClientRect().width,_.height=_.getBoundingClientRect().height,(0,a.initParticleShader)(),U(),(0,n.drawGrid)()})),Z.addEventListener("mousedown",X),Z.addEventListener("mouseup",j),Z.addEventListener("mousemove",J),Z.addEventListener("touchstart",X),Z.addEventListener("touchend",j),Z.addEventListener("touchmove",J),Z.addEventListener("click",(function(t){t.stopPropagation(),(0,o.closeMenu)()})),(0,a.initParticleShader)(),U(),(0,n.drawGrid)(),requestAnimationFrame((function t(){switch(function(t){for(var e=P,r=t/e,n=0;n<e;n++){if(0!=y.y&&d.forEach((function(t){t.accelerate(y)})),A)switch(v){case"field":N(p);break;case"gravity":(y=p.difference(g)).divide(200)}u.forEach((function(t){t.forEach((function(t){t.forEach((function(t){Y(t)}))}))})),f=0,d.forEach((function(t){(function(t){for(var e=Math.floor(t.pos_curr.x/s),r=Math.floor(t.pos_curr.y/s),n=[],o=e-1;o<=e+1;o++)for(var i=r-1;i<=r+1;i++)o>=0&&o<u.length&&i>=0&&i<u[o].length&&n.push.apply(n,u[o][i]);return n})(t).forEach((function(e){f++;var r=t.pos_curr.difference(e.pos_curr),n=r.length();if(0!=n&&n<t.radius+e.radius){r.divide(n);var o=t.radius+e.radius-n;r.multiply(.5*o),t.pos_curr.add(r),e.pos_curr.subtract(r)}}))})),V(r)}}(.5/C*60),k.clearRect(0,0,m.width,m.height),(0,n.drawParticles)(),v){case"field":(0,n.drawLasso)();break;case"gravity":(0,n.drawArrow)(g,p);break;case"throw":(0,n.drawTail)(g,p)}var e=.016666*C;Q%Math.floor(2*e)==0&&d.length<h&&Q>120&&(d.push(new i.default(new c.default(200,200),15,new c.default(200*e,-80*e),K())),d.push(new i.default(new c.default(200,260),15,new c.default(180*e,-80*e),K())),d.push(new i.default(new c.default(200,320),15,new c.default(170*e,-80*e),K())),d.push(new i.default(new c.default(200,380),15,new c.default(180*e,-80*e),K())),d.push(new i.default(new c.default(200,440),15,new c.default(170*e,-80*e),K())),(0,n.setGeometry)()),Q++,++W%10==0&&(C=function(){var t=.1*performance.now(),e=t-q,r=Math.round(1e3/e);return q=t,r}(),B.innerText="FPS: ".concat(C),I.innerText="Particles: ".concat(d.length),R.innerText="Collisions: ".concat(f)),requestAnimationFrame(t)}))},"./src/shaders/particleFragmentShader.frag":t=>{t.exports="precision mediump float;\r\n\r\nuniform vec2 u_resolution;\r\n// // Passed in from the vertex shader.\r\n// varying vec3 v_color;\r\nuniform vec3 u_color;\r\nuniform float u_radius;\r\nuniform vec2 u_center;\r\n// float mask(in vec2 _st, in float _radius){\r\n//     vec2 dist = _st-u_center;\r\n//     return 1.-smoothstep(_radius-(_radius*0.01),\r\n//                          _radius+(_radius*0.01),\r\n//                          dot(dist,dist)*4.024);\r\n// }\r\n\r\n// vec3 circle(in vec2 _st, in float _radius, in vec3 color){\r\n//     vec2 dist = _st-u_center;\r\n// \treturn \r\n//     (smoothstep(_radius-(_radius*0.01), _radius +(_radius*0.01),dot(dist, dist)*(4.))) + color * (smoothstep(_radius + (_radius*0.01), _radius -(_radius*0.01),dot(dist, dist)*(4.8)));\r\n// }\r\n// void main(){\r\n// \tvec2 st = gl_FragCoord.xy/u_resolution.xy;\r\n\r\n// \tst.x = mix(0.5, st.x, )\r\n\r\n// \tvec3 shaded = circle(st,u_radius, u_color);\r\n\r\n// \tgl_FragColor = vec4( shaded, mask(st, u_radius));\r\n\t\r\n// }\r\n\r\nvoid main() {\r\n    // gl_FragColor is a special variable a fragment shader\r\n    // is responsible for setting\r\n    gl_FragColor = vec4(u_color, 1.);\r\n  }"},"./src/shaders/particleVertexShader.vert":t=>{t.exports="precision mediump float;\r\n\r\nattribute vec2 a_position;\r\n\r\n// attribute vec3 color;\r\n// varying vec3 v_color;\r\nuniform vec2 u_resolution;\r\nuniform vec2 u_translation;\r\nvoid main() {\r\n    //move the position of the shader\r\n    vec2 position = a_position + u_translation;\r\n\r\n    // convert the position from pixels to 0.0 to 1.0\r\n    vec2 zeroToOne = position / u_resolution;\r\n\r\n    // convert from 0->1 to 0->2\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n    // convert from 0->2 to -1->+1 (clipspace)\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n\r\n    // // Pass the vertex color to the fragment shader.\r\n    //  v_color = color;\r\n}"}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r("./src/script.ts"),r("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,