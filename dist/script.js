/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/Attractor.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});var r=n("./src/script.ts");const o=function(){function t(t,e,n,r,o){this.dt=0,this.pos=t,this.radius=e,this.color=o,this.attracts=r,this.force=r?n:-n}return t.prototype.animate=function(){var e=0;e=this.attracts?1:0,this.attracts?this.dt+=60/r.fps*.03:this.dt-=60/r.fps*.03;var n=this.pos.x,o=this.pos.y;for(t.ctx.lineWidth=2;e<=6;e++)t.ctx.strokeStyle="rgba(0, 0, 0, ".concat((6-e+this.dt%1)/6,")"),t.ctx.beginPath(),t.ctx.arc(n,o,(e-this.dt%1)*this.radius/6,0,2*Math.PI,!1),t.ctx.stroke();t.ctx.closePath()},t.canvas=document.getElementById("foreground-canvas"),t.ctx=t.canvas.getContext("2d"),t}()},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>l,drawDot:()=>u,drawGrid:()=>a,drawLasso:()=>d,drawParticles:()=>i,drawTail:()=>s});var r=n("./src/Particle.ts"),o=n("./src/Vec2D.ts"),c=n("./src/script.ts");function i(){c.particles.forEach((function(t){t.draw()}))}function a(){c.back_ctx.clearRect(0,0,c.foreground_canvas.width,c.foreground_canvas.height),c.back_ctx.strokeStyle="rgba(0, 0, 0, 0.1)",c.back_ctx.lineWidth=1;for(var t=c.gridSize;t<c.foreground_canvas.width;t+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(t,0),c.back_ctx.lineTo(t,c.foreground_canvas.height),c.back_ctx.stroke();for(var e=c.gridSize;e<c.foreground_canvas.height;e+=c.gridSize)c.back_ctx.beginPath(),c.back_ctx.moveTo(0,e),c.back_ctx.lineTo(c.foreground_canvas.width,e),c.back_ctx.stroke()}function s(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var n=t.difference(e);!function(t,e){for(var n=new r.default(t,15,e,"black"),o=1;o<=510;o++)n.accelerate(c.gravity),(0,c.applyConstraint)(n),(0,c.applyAttractorForces)(n),n.updatePosition(.125),o%15==0&&u(n.pos_curr.x,n.pos_curr.y,5,255-o/2)}(t.clone(),n.clone()),n.divide(8);var i=Math.atan2(e.y-t.y,e.x-t.x),a=new o.default(e.x,e.y);a.x-=Math.cos(i),a.y-=Math.sin(i);for(var s=0;s<=8;s++)u(t.x-n.x*s,t.y-n.y*s,5,255)}}function u(t,e,n,r){c.ctx.beginPath(),c.ctx.arc(t,e,n,0,2*Math.PI,!1),c.ctx.fillStyle="rgba(210, 210, 210, ".concat(r/255,")"),c.ctx.fill(),c.ctx.closePath()}function d(){c.clicked&&(c.ctx.beginPath(),c.ctx.arc(c.pointerPosition.x,c.pointerPosition.y,c.fieldSize,0,2*Math.PI),c.ctx.lineWidth=3,c.ctx.strokeStyle="rgba(0, 0, 0, 0.2)",c.ctx.stroke(),c.ctx.closePath())}function l(t,e){if(c.clicked&&t.x!=e.x&&t.y!=e.y){var n=Math.atan2(e.y-t.y,e.x-t.x),r=10,i=new o.default(e.x,e.y);i.x-=11.5*Math.cos(n),i.y-=11.5*Math.sin(n),c.ctx.beginPath(),c.ctx.moveTo(t.x,t.y),c.ctx.lineTo(i.x,i.y),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.beginPath(),c.ctx.moveTo(i.x,i.y),c.ctx.lineTo(i.x-r*Math.cos(n-Math.PI/7),i.y-r*Math.sin(n-Math.PI/7)),c.ctx.lineTo(i.x-r*Math.cos(n+Math.PI/7),i.y-r*Math.sin(n+Math.PI/7)),c.ctx.lineTo(i.x,i.y),c.ctx.lineTo(i.x-r*Math.cos(n-Math.PI/7),i.y-r*Math.sin(n-Math.PI/7)),c.ctx.strokeStyle="#bbbbbb",c.ctx.lineWidth=10,c.ctx.stroke(),c.ctx.fillStyle="#bbbbbb",c.ctx.fill(),c.ctx.closePath()}}},"./src/MenuManager.ts":(t,e,n)=>{n.r(e),n.d(e,{closeMenu:()=>a,getPointerFunction:()=>p,openMenu:()=>i});var r=n("./src/script.ts"),o=document.getElementById("menu-button"),c=document.querySelectorAll(".menu-element");function i(){"false"==o.getAttribute("open")&&(o.setAttribute("open","true"),o.style.cursor="auto",c.forEach((function(t){setTimeout((function(){t.style.display="block"}),300)})))}function a(){o.setAttribute("open","false"),o.style.cursor="pointer",c.forEach((function(t){t.style.display="none"}))}o.addEventListener("click",(function(t){t.stopPropagation(),i()}));var s=document.getElementById("field-size-slider"),u=document.getElementById("field-strength-slider"),d=document.getElementById("gravity-strength-slider"),l=document.getElementById("substeps-amount-entry"),h=document.getElementById("particles-amount-entry"),f=document.getElementById("drawOutline");function p(){for(var t=document.getElementsByName("cursor-function"),e=0;e<t.length;e++)if(t[e].checked)return t[e].value}s.oninput=function(){(0,r.setFieldSize)(parseInt(s.value))},u.oninput=function(){(0,r.setFieldStrength)(parseInt(u.value))},d.oninput=function(){(0,r.setGravityStrength)(parseInt(d.value))},l.addEventListener("change",(function(){(0,r.setSubsteps)(parseInt(l.value))})),h.addEventListener("change",(function(){(0,r.setParticlesNum)(parseInt(h.value))})),f.oninput=function(){(0,r.setDrawOutline)(f.checked)}},"./src/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var r=n("./src/Vec2D.ts"),o=n("./src/script.ts");const c=function(){function t(t,e,n,r){this.pos_curr=t,this.pos_prev=this.pos_curr,this.radius=e,this.acceleration=n,this.color=r}return t.prototype.draw=function(){var e=this.pos_curr.x,n=this.pos_curr.y;t.ctx.beginPath(),t.ctx.arc(e,n,this.radius,0,2*Math.PI,!1),t.ctx.fillStyle=this.color,t.ctx.fill(),o.drawOutline&&(t.ctx.lineWidth=2,t.ctx.strokeStyle="black",t.ctx.stroke()),t.ctx.closePath()},t.prototype.updatePosition=function(t){var e=new r.default(this.pos_curr.x-this.pos_prev.x,this.pos_curr.y-this.pos_prev.y);this.pos_prev=this.pos_curr.clone(),this.pos_curr.add(e),this.acceleration.multiply(t*t),this.pos_curr.add(this.acceleration),this.acceleration.x=0,this.acceleration.y=0},t.prototype.accelerate=function(t){this.acceleration.add(t)},t.canvas=document.getElementById("foreground-canvas"),t.ctx=t.canvas.getContext("2d"),t}()},"./src/Vec2D.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});const r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.prototype.subtract=function(t){this.x-=t.x,this.y-=t.y},t.prototype.multiply=function(t){this.x*=t,this.y*=t},t.prototype.divide=function(t){this.x/=t,this.y/=t},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.difference=function(e){return new t(this.x-e.x,this.y-e.y)},t}()},"./src/script.ts":(t,e,n)=>{n.r(e),n.d(e,{applyAttractorForces:()=>D,applyConstraint:()=>W,back_ctx:()=>P,clicked:()=>E,ctx:()=>M,drawOutline:()=>b,fieldSize:()=>w,foreground_canvas:()=>g,fps:()=>k,gravity:()=>x,grid:()=>u,gridSize:()=>s,particles:()=>d,pointerPosition:()=>f,setDrawOutline:()=>z,setFieldSize:()=>T,setFieldStrength:()=>B,setGravityStrength:()=>C,setParticlesNum:()=>A,setSubsteps:()=>L});var r=n("./src/Attractor.ts"),o=n("./src/Drawer.ts"),c=n("./src/MenuManager.ts"),i=n("./src/Particle.ts"),a=n("./src/Vec2D.ts"),s=30,u=[],d=[],l=[],h=100,f=new a.default(0,0),p=new a.default(0,0),y="field",x=new a.default(0,1),g=document.getElementById("foreground-canvas"),v=document.getElementById("background-canvas"),w=100,b=!0,m=10,_=4;g.width=g.getBoundingClientRect().width,g.height=g.getBoundingClientRect().height,v.width=v.getBoundingClientRect().width,v.height=v.getBoundingClientRect().height;var M=i.default.canvas.getContext("2d"),P=v.getContext("2d"),k=60,E=!1,S=document.createElement("div");S.style.position="absolute",S.style.top="10px",S.style.left="10px",S.style.color="black";var I=document.createElement("div");function B(t){m=t}function T(t){w=t}function C(t){x=new a.default(0,t/10)}function L(t){_=t}function A(t){h=t}function z(t){b=t}function F(){for(var t=Math.ceil(g.width/s),e=Math.ceil(g.height/s),n=0;n<t;n++){u[n]=[];for(var r=0;r<e;r++)u[n][r]=[]}}function O(t){d.forEach((function(e){!function(t){var e=Math.floor(t.pos_curr.x/s),n=Math.floor(t.pos_curr.y/s);if(e>=0&&e<u.length&&n>=0&&n<u[e].length){var r=u[e][n],o=r.indexOf(t);-1!==o&&r.splice(o,1)}}(e),e.updatePosition(t),function(t){var e=Math.floor(t.pos_curr.x/s),n=Math.floor(t.pos_curr.y/s);e>=0&&e<u.length&&n>=0&&n<u[e].length&&u[e][n].push(t)}(e)}))}function R(t){d.forEach((function(e){var n=t.difference(e.pos_curr),r=n.length();r<w&&r>10&&(n.multiply(100*m),n.divide(r*r),e.accelerate(n))}))}function D(t){l.forEach((function(e){var n=e.pos.difference(t.pos_curr),r=n.length();r<e.radius&&r>10&&(n.multiply(e.force),n.divide(r*r),t.accelerate(n))}))}function W(t){t.pos_curr.y+t.radius>g.height&&(t.pos_curr.y=g.height-t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.y-t.radius<0&&(t.pos_curr.y=t.radius,t.pos_prev.y=t.pos_curr.y+t.pos_curr.y-t.pos_prev.y),t.pos_curr.x-t.radius<0&&(t.pos_curr.x=t.radius,t.pos_prev.x=t.pos_curr.x+t.pos_curr.x-t.pos_prev.x),t.pos_curr.x+t.radius>g.width&&(t.pos_curr.x=g.width-t.radius)}I.style.position="absolute",I.style.top="30px",I.style.left="10px",I.style.color="black",document.body.appendChild(S),document.body.appendChild(I);var G=0,j=performance.now()/10;function q(t){t.stopPropagation(),E=!0,y=(0,c.getPointerFunction)(),t instanceof MouseEvent?(f.x=t.clientX,f.y=t.clientY):t instanceof TouchEvent&&(f.x=t.touches[0].clientX,f.y=t.touches[0].clientY),p.x=f.x,p.y=f.y}function V(t){switch(t.stopPropagation(),E=!1,y){case"field":case"gravity":break;case"throw":var e=p.difference(f);e.multiply(k/60),d.push(new i.default(p.clone(),15,e,X()))}}function X(){var t=Math.floor(256*Math.random()),e=Math.floor(256*Math.random()),n=Math.floor(256*Math.random());return"rgb(".concat(t,", ").concat(e,", ").concat(n,")")}function Y(t){t.stopPropagation(),E&&(t instanceof MouseEvent?(f.x=t.clientX,f.y=t.clientY):t instanceof TouchEvent&&(f.x=t.touches[0].clientX,f.y=t.touches[0].clientY))}var N=0,H=document.getElementById("main_container");window.addEventListener("resize",(function(){g.width=g.getBoundingClientRect().width,g.height=g.getBoundingClientRect().height,v.width=v.getBoundingClientRect().width,v.height=v.getBoundingClientRect().height,F(),(0,o.drawGrid)()})),H.addEventListener("mousedown",q),H.addEventListener("mouseup",V),H.addEventListener("mousemove",Y),H.addEventListener("touchstart",q),H.addEventListener("touchend",V),H.addEventListener("touchmove",Y),H.addEventListener("click",(function(t){t.stopPropagation(),(0,c.closeMenu)()})),F(),(0,o.drawGrid)(),l.push(new r.default(new a.default(300,300),200,400,!0,"black")),l.push(new r.default(new a.default(900,300),280,400,!0,"pink")),requestAnimationFrame((function t(){switch(function(t){for(var e=_,n=t/e,r=0;r<e;r++){if(0!=x.y&&d.forEach((function(t){t.accelerate(x)})),E)switch(y){case"field":R(f);break;case"gravity":(x=f.difference(p)).divide(200)}d.forEach((function(t){D(t)})),d.forEach((function(t){W(t)})),d.forEach((function(t){(function(t){for(var e=Math.floor(t.pos_curr.x/s),n=Math.floor(t.pos_curr.y/s),r=[],o=e-1;o<=e+1;o++)for(var c=n-1;c<=n+1;c++)o>=0&&o<u.length&&c>=0&&c<u[o].length&&r.push.apply(r,u[o][c]);return r})(t).forEach((function(e){var n=t.pos_curr.difference(e.pos_curr),r=n.length();if(0!=r&&r<t.radius+e.radius){n.divide(r);var o=t.radius+e.radius-r;n.multiply(.5*o),t.pos_curr.add(n),e.pos_curr.subtract(n)}}))})),O(n)}}(.5/k*60),M.clearRect(0,0,g.width,g.height),(0,o.drawParticles)(),l.forEach((function(t){t.animate()})),y){case"field":(0,o.drawLasso)();break;case"gravity":(0,o.drawArrow)(p,f);break;case"throw":(0,o.drawTail)(p,f)}var e=k/60;N%Math.floor(8*e)==0&&d.length<h&&(d.push(new i.default(new a.default(200,200),15,new a.default(100*e,-150*e),X())),d.push(new i.default(new a.default(200,260),15,new a.default(90*e,-150*e),X())),d.push(new i.default(new a.default(200,320),15,new a.default(85*e,-150*e),X())),d.push(new i.default(new a.default(200,380),15,new a.default(90*e,-150*e),X())),d.push(new i.default(new a.default(200,440),15,new a.default(85*e,-150*e),X()))),N++,++G%10==0&&(k=function(){var t=performance.now()/10,e=t-j,n=Math.round(1e3/e);return j=t,n}(),S.innerText="FPS: ".concat(k),I.innerText="Particles: ".concat(d.length)),requestAnimationFrame(t)}))}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var c=e[r]={exports:{}};return t[r](c,c.exports,n),c.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/script.ts"),n("./src/MenuManager.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,